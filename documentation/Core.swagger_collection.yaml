openapi: 3.0.1
x-stoplight:
  id: tnc6hl9b9eimk
info:
  title: DeepLynx
  description: |-
    The construction of megaprojects has consistently demonstrated challenges for project managers in regard to meeting cost, schedule, and performance requirements. Megaproject construction challenges are common place within megaprojects with many active projects in the United States failing to meet cost and schedule efforts by significant margins. Currently, engineering teams operate in siloed tools and disparate teams where connections across design, procurement, and construction systems are translated manually or over brittle point-to-point integrations. The manual nature of data exchange increases the risk of silent errors in the reactor design, with each silent error cascading across the design. These cascading errors lead to uncontrollable risk during construction, resulting in significant delays and cost overruns. DeepLynx allows for an integrated platform during design and operations of mega projects.
    The DeepLynx Core API delivers a few main features.
    1. Provides a set of methods and endpoints for manipulating data in an object oriented database. This allows us to store complex datatypes as records and then to compile them into actual, modifiable objects at run-time. Users can store taxonomies or ontologies in a readable format.
    2. Provides methods for storing and retrieving data in a graph database. This data is structured and validated against the aformentioned object oriented database before storage.
  contact: {}
  version: '1.0'
  license:
    name: MIT
    url: 'https://github.com/idaholab/Deep-Lynx/blob/master/LICENSE'
servers:
  - url: 'http://localhost:8090'
    description: Localhost
tags:
  - name: Containers
    description: 'Containers are considered a root object with only users and organizations as potential parents. Containers separate object defintions (as declared in Metatypes) from each other and allow for versioning and access control. '
  - name: Data Query
    description: 'DeepLynx gives you the ability to query data using a GraphQL enabled endpoint. Please see the documentation on GraphQL and run a schema query to learn more about what search methods, query arguments, and fields are available to you.'
  - name: Graph
    description: 'These endpoints give you the ability to add nodes and edges to the graph manually as well as perform some basic queries. For all advanced queries, please use the GraphQL query endpoint.'
  - name: Metatypes
    description: 'Metatypes only consist of a name and a description. While this might change, the bulk of information about a type should reside in its keys and relationships. Metatypes can be considered as "classes" when referring to web ontology.'
  - name: Metatype Keys
    description: 'Keys represent a Metatype''s properties, and in the future, its methods. This information allows for a user to modify and compile a complex object type/class and store it in a readable format. Inserted data is then validated against a Metatype''s declared keys/properties.'
  - name: Metatype Relationships
    description: Metatype Relationships consist of a name and a description. They define  the relationships available to be instantiated between certain Metatypes  as Metatype Relationship Pairs.
  - name: Metatype Relationship Keys
    description: 'Keys represent a Metatype Relationship''s properties, and in the future, its methods. This information allows for a user to modify and compile a complex object type/class relationship and store it in a readable format. Relationships declared between already inserted data will be verified against its declared Metatype Relationship.'
  - name: Metatype Relationship Pairs
    description: 'Metatype Relationship pairs represent the actual connection between two Metatypes. Properties of that relationship are attached to the Metatype Relationship. Again, this only represents the connection between two Metatypes.'
  - name: Data Sources
    description: 'This set of endpoints allows the user to create and manage data sources. As of 3/26/2020 only the HTTP data source type is supported, and that''s still under construction. Each endpoint functions - but there is no guaranteed functionality with regards to data sources beyond this point.'
  - name: Data Targets
    description: 'This set of endpoints allows the user to create and manage data targets. As of 6/1/2022 only the HTTP data target type is supported, and that''s still under construction. Each endpoint functions - but there is no guaranteed functionality with regards to data targets beyond this point.'
  - name: Data Export
    description: 'These endpoints have to do with the export functionality. A snapshot of the contained data can be exported to numerous different data sources. However, only Gremlin enabled Graph databases are supported for export.'
  - name: Users
    description: 'These endpoints have to do with user functionality. As of 3/26/2020 there are no methods for creating new users - other than enabling and use SAML-ADFS authentication methods. Unless using this method, either request/build a feature or use Basic Authentication configuration.'
  - name: Data Type Mappings
    description: These are mappings for taking unknown payloads and mapping them to known data classes and structures prior to storage.
  - name: Imports
    description: These endpoints allow for retrieving or deleting the data associated with  a given import from a Data Source.
  - name: Events
    description: 'An application may create a Registered Event with DeepLynx in order to  receive messages from DeepLynx concerning the event type registered. This  system may be used to receive alerts when other Data Sources have ingested data, a new data source is created, etc.'
  - name: Authentication
    description: These endpoints provide users and applications the ability to authenticate with DeepLynx.
  - name: Tasks
    description: 'These endpoints provide functionality for the creation, retrieval, and updating of tasks.'
  - name: Tags
    description: 'These endpoints provide functionality for the management of tags associated with files, nodes, or edges.'
  - name: TimeSeries
    description: These endpoints allow for interacting with timeseries data.
  - name: Misc
    description: ''
  - name: Report
    description: These endpoints allow for interacting with Reports
  - name: File
    description: These endpoints allow for interacting with Files
security:
  - BearerAuth: []
paths:
  /containers:
    get:
      tags:
        - Containers
      summary: List Containers
      description: List all containers.
      operationId: ListContainers
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListContainerResponse'
      deprecated: false
    put:
      tags:
        - Containers
      summary: Container Batch Update
      description: 'Accepts an array of container objects - will attempt to update all of them in a single transaction. If the update fails, none of them will go through.'
      operationId: ContainerBatchUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchContainerUpdateRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchUpdateContainerResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
      x-codegen-request-body-name: Body
    post:
      tags:
        - Containers
      summary: Create Container
      description: |-
        Creates a new container object. Containers are the root level object and are considered to contain both the ontology(in form of Metatypes, Metatype Keys, and MetatypeRelationships) as well as the data stored under that ontology.
        Endpoint will accept both a single container request object, or an array of container request objects
      operationId: CreateContainer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContainerRequest'
        required: true
      responses:
        '200':
          description: 'Returns the newly created container if successfull, else the appropriate error. '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateContainerResponse'
              examples: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                example-1:
                  value:
                    isError: true
                    error:
                      errorCode: 0
                      error: string
      deprecated: false
      x-codegen-request-body-name: Body
      parameters: []
  '/containers/{container_id}':
    get:
      tags:
        - Containers
      summary: Retrieve Container
      description: Retrieve container by ID.
      operationId: RetrieveContainer
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContainerResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
    put:
      tags:
        - Containers
      summary: Update Container
      description: Updates the container. This will fail if a container already exists with the proposed updated name.
      operationId: UpdateContainer
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContainerRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateContainerResponse'
      deprecated: false
      x-codegen-request-body-name: Body
    delete:
      tags:
        - Containers
      summary: Archive Container
      description: 'Archives a Container. This is preferred over deletion as deletion has a cascading effect on the deleted type''s keys, relationships, and relationship keys. When in doubt, archive over delete. We''d rather have tombstones than cremating the type.'
      operationId: ArchiveContainer
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: boolean
          in: query
          name: permanent
          description: 'If true, permanently deletes the container'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
  '/containers/{container_id}/data_source_templates':
    get:
      tags:
        - Containers
      summary: List Data Source Templates
      description: List all Data Source Templates for the container.
      operationId: ListDataTemplates
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        encrypted:
                          type: boolean
                        authorized:
                          type: boolean
                        custom_fields:
                          type: array
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                              value:
                                type: string
                              encrypt:
                                type: boolean
                              required:
                                type: boolean
                        redirect_address:
                          type: string
                  isError:
                    type: boolean
                x-examples:
                  Example 1:
                    value:
                      - id: 98eb71e9-2556-4309-824b-068be12650c9
                        name: P6
                        encrypted: true
                        authorized: false
                        custom_fields:
                          - name: encrypted
                            value: OVTPjwWPZNdAvkkxZseu448ZrrdpjLshMmJZ2BF5HYRobkmb91ZWZimOVwU6VeGT6hc1PABdvMXVHi0nRl7cfw==
                            encrypt: true
                            required: true
                          - name: no value
                            encrypt: false
                            required: false
                          - name: unencrypted
                            value: unencrypted
                        redirect_address: 'localhost:8181'
                      - id: 87da60d8-1445-3298-713a-957ad01549b8
                        name: Jazz
                        encrypted: true
                        authorized: false
                        redirect_address: 'localhost:8282'
                    isError: false
              examples:
                Example 1:
                  value:
                    value:
                      - id: 98eb71e9-2556-4309-824b-068be12650c9
                        name: P6
                        encrypted: true
                        authorized: false
                        custom_fields:
                          - name: encrypted
                            value: OVTPjwWPZNdAvkkxZseu448ZrrdpjLshMmJZ2BF5HYRobkmb91ZWZimOVwU6VeGT6hc1PABdvMXVHi0nRl7cfw==
                            encrypt: true
                            required: true
                          - name: no value
                            encrypt: false
                            required: false
                          - name: unencrypted
                            value: unencrypted
                        redirect_address: 'localhost:8181'
                      - id: 87da60d8-1445-3298-713a-957ad01549b8
                        name: Jazz
                        encrypted: true
                        authorized: false
                        redirect_address: 'localhost:8282'
                    isError: false
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
    post:
      summary: Save Data Source Templates
      operationId: post-containers-container_id-data_source_templates
      description: Add a new Data Source Template to the container or create a new Data Source Template.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  redirect_address:
                    type: string
                  custom_fields:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        encrypt:
                          type: boolean
                        required:
                          type: boolean
                        value:
                          type: string
              x-examples:
                Example 1:
                  - id: 98eb71e9-2556-4309-824b-068be12650c9
                    name: P6
                    redirect_address: 'localhost:8181'
                    custom_fields:
                      - name: encrypted
                        encrypt: true
                        required: true
                        value: encrypted
                      - name: no value
                        required: false
                        encrypt: false
                      - name: unencrypted
                        value: unencrypted
                  - id: 87da60d8-1445-3298-713a-957ad01549b8
                    name: Jazz
                    redirect_address: 'localhost:8282'
            examples:
              Example 1:
                value:
                  - id: 98eb71e9-2556-4309-824b-068be12650c9
                    name: P6
                    redirect_address: 'localhost:8181'
                    custom_fields:
                      - name: encrypted
                        encrypt: true
                        required: true
                        value: encrypted
                      - name: no value
                        required: false
                        encrypt: false
                      - name: unencrypted
                        value: unencrypted
                  - id: 87da60d8-1445-3298-713a-957ad01549b8
                    name: Jazz
                    redirect_address: 'localhost:8282'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: boolean
                    description: The result of the operation.
                    example: true
                  isError:
                    type: boolean
                    description: Indicates if the operation resulted in an error.
                    example: false
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  isError:
                    type: boolean
                    description: Indicates if the operation resulted in an error.
                    example: true
                  error:
                    type: string
                    description: Detailed error message including specific validation failures.
                    example: '{"errorCode":500,"error":"some data source templates do not pass validation An instance of DataSourceTemplate has failed the validation:\n - property id has failed the following constraints: isUuid \n"}'
  '/containers/{container_id}/data_source_templates/{template_id}':
    delete:
      tags:
        - Containers
      summary: Delete Data Source Template
      description: Deletes a Data Source Template based on its UUID as supplied in the route.
      operationId: DeleteDataTemplate
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: template_id
        in: path
        required: true
  '/containers/{container_id}/active':
    post:
      tags:
        - Containers
      summary: Set Container Active
      description: Unarchives a Container. This is the only way to update this value of a container via API.
      operationId: SetContainerActive
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
  /containers/import:
    post:
      tags:
        - Containers
      summary: Import Container
      description: 'An optional query param `dryrun` may be included with a value of `true` in order to return a HTML formatted string explaining the name and description of the container along with the number of metatypes, metatype relationships, and metatype keys to be created. This request uses a form-data body. If the ontology to be imported is being referenced via url, provide the url via a `path` field. Otherwise a local file may be provided. A file takes precedence over a `path` value if both are provided.'
      operationId: ImportContainer
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ContainerImportRequest'
            examples:
              example-1:
                value:
                  name: string
                  description: string
                  data_versioning_enabled: true
                  path: string
                  file: 'http://example.com'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerImportResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      deprecated: false
      parameters:
        - schema:
            type: boolean
            default: 'false'
          in: query
          name: dryrun
          description: If true returns a description of the container that will be created and its contents.
  '/containers/import/{container_id}':
    put:
      tags:
        - Containers
      summary: Update Container Import
      operationId: UpdateContainerImport
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ContainerImportRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerImportUpdateResponse'
      deprecated: false
      description: Updates an existing container via an ontology file.
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
  '/containers/{container_id}/permissions':
    post:
      tags:
        - Containers
      summary: Repair Container Permissions
      description: Repairs a container's permission set
      operationId: RepairContainerPermissions
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
              examples:
                example-1:
                  value:
                    value: true
                    isError: false
      deprecated: false
  '/containers/{container_id}/query':
    post:
      tags:
        - Data Query
      summary: Query Graph (Deprecated)
      description: |-
        Query the graph of the specified container using GraphQL. GraphQL queries may be formatted as json or plain text.
        This has been deprecated in favor of the `/containers/{container_id}/data` endpoint.
      operationId: QueryGraph
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
          text/plain:
            schema:
              type: string
              example: "{\r\n    nodes {\r\n        id\r\n        metatype{id}\r\n        archived\r\n    }\r\n}"
        required: true
        description: ''
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
      deprecated: false
      x-codegen-request-body-name: Body
  '/containers/{container_id}/data':
    post:
      tags:
        - Data Query
      summary: Query Data
      description: 'Query data from your container using GraphQL. You can learn more here - https://github.com/idaholab/Deep-Lynx/wiki/Querying-Data-With-GraphQL'
      operationId: DataQuery
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: boolean
            default: false
          in: query
          name: rawMetadataEnabled
        - schema:
            type: string
          in: query
          name: pointInTime
      requestBody:
        content:
          application/json:
            schema:
              type: object
          text/plain:
            schema:
              type: string
              example: "{\r\n    nodes {\r\n        id\r\n        metatype{id}\r\n        archived\r\n    }\r\n}"
          application/xml:
            schema:
              type: object
              properties: {}
        required: true
        description: ''
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
      deprecated: false
      x-codegen-request-body-name: Body
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
  '/containers/{container_id}/graphs/nodes':
    get:
      tags:
        - Graph
      summary: List Nodes
      description: List nodes
      operationId: ListNodes
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: query
          name: transformationID
          description: Return only nodes for the selected type transformation
        - schema:
            type: string
          in: query
          name: metatypeID
          description: Return only nodes for the selected metatype
        - schema:
            type: string
          in: query
          name: dataSourceID
          description: Return only nodes for the selected datasource
        - schema:
            type: boolean
          in: query
          name: history
          description: Return historical data for all selected nodes
        - schema:
            type: boolean
          in: query
          name: fileAttached
          description: Return only nodes with a file attached
        - schema:
            type: string
          in: query
          name: fileExtension
          description: Return only nodes with files of a certain extension attached
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNodesResponse'
      deprecated: false
    post:
      tags:
        - Graph
      summary: Create Or Update Nodes
      description: This endpoint will either create new nodes or update nodes if one with the same original_id is passed.
      operationId: CreateOrUpdateNodes
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateNodesRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
                    isError:
                      type: boolean
      deprecated: false
      x-codegen-request-body-name: Body
  '/containers/{container_id}/graphs/nodes/{node_id}':
    get:
      tags:
        - Graph
      summary: Retrieve Node
      description: Retrieve a single node from storage.
      operationId: RetrieveNode
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: node_id
          in: path
          required: true
          schema:
            type: string
        - name: history
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNodeResponse'
      deprecated: false
    delete:
      tags:
        - Graph
      summary: Archive Node
      operationId: ArchiveNode
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: node_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
      x-codegen-request-body-name: Body
      description: Archives a node
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: node_id
        in: path
        required: true
  '/containers/{container_id}/graphs/nodes/{node_id}/graph':
    get:
      tags:
        - Graph
      summary: Nth Node Query
      description: Retrieve n layers of node-edge relationships given a depth n and an origin node id.
      operationId: RetrieveNthNodes
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: node_id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
            default: '10'
          in: query
          name: depth
          description: Number of layers deep to query. Defaults to 10.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    value:
                      - origin_properties:
                          id: null
                          name: null
                          room: null
                          action: null
                          object: null
                          building: null
                          location: null
                          condition: null
                          elevation: null
                          item_type: null
                          step_type: null
                          action_verb: null
                          description: null
                          instruction: null
                          requires_CV: null
                          requires_IV: null
                          requires_PC: null
                          requires_QA: null
                          applicability: null
                          hold_point_end: null
                          additional_info: null
                          hold_point_start: null
                          critical_location: null
                          original_duration: null
                          step_construct_type: null
                          responsible_performer: null
                          critical_supplemental_information: null
                        edge_properties: {}
                        destination_properties:
                          id: null
                          name: null
                          value: null
                          status_by: null
                          description: null
                          status_date: null
                          primary_text: null
                          creation_date: null
                          creation_user: null
                          modified_date: null
                          modified_user: null
                        origin_id: '1457'
                        origin_container_id: '13'
                        origin_data_source_id: '9'
                        origin_import_data_id: null
                        origin_data_staging_id: null
                        origin_type_mapping_transformation_id: null
                        origin_original_data_id: null
                        origin_metadata: null
                        origin_created_at: '2022-02-23T20:24:18.809Z'
                        origin_modified_at: '2022-02-23T20:24:18.801Z'
                        origin_deleted_at: null
                        origin_created_by: '1'
                        origin_modified_by: '1'
                        origin_metatype_name: StepAction
                        edge_id: '16'
                        edge_container_id: '13'
                        edge_relationship_pair_id: '56521'
                        edge_data_source_id: '9'
                        edge_import_data_id: null
                        edge_data_staging_id: null
                        edge_type_mapping_transformation_id: null
                        edge_metadata: null
                        edge_created_at: '2022-02-23T20:26:15.605Z'
                        edge_modified_at: '2022-02-23T20:26:15.563Z'
                        edge_deleted_at: null
                        edge_modified_by: '1'
                        edge_created_by: '1'
                        destination_id: '1456'
                        destination_container_id: '13'
                        destination_data_source_id: '9'
                        destination_import_data_id: null
                        destination_data_staging_id: null
                        destination_type_mapping_transformation_id: null
                        destination_original_data_id: null
                        destination_metadata: null
                        destination_created_at: '2022-02-23T20:23:43.883Z'
                        destination_modified_at: '2022-02-23T20:23:43.743Z'
                        destination_deleted_at: null
                        destination_created_by: '1'
                        destination_modified_by: '1'
                        destination_metatype_name: Status
                        lvl: 1
                        metatype_id:
                          name: ''
                          description: ''
                        destination_metatype_id: ''
                      - origin_properties:
                          id: null
                          name: null
                          value: null
                          status_by: null
                          description: null
                          status_date: null
                          primary_text: null
                          creation_date: null
                          creation_user: null
                          modified_date: null
                          modified_user: null
                        edge_properties: {}
                        destination_properties:
                          id: null
                          name: null
                          description: null
                          primary_text: null
                          creation_date: null
                          creation_user: null
                          modified_date: null
                          modified_user: null
                        origin_id: '1456'
                        origin_container_id: '13'
                        origin_data_source_id: '9'
                        origin_import_data_id: null
                        origin_data_staging_id: null
                        origin_type_mapping_transformation_id: null
                        origin_original_data_id: null
                        origin_metadata: null
                        origin_created_at: '2022-02-23T20:23:43.883Z'
                        origin_modified_at: '2022-02-23T20:23:43.743Z'
                        origin_deleted_at: null
                        origin_created_by: '1'
                        origin_modified_by: '1'
                        origin_metatype_name: Status
                        edge_id: '15'
                        edge_container_id: '13'
                        edge_relationship_pair_id: '56545'
                        edge_data_source_id: '9'
                        edge_import_data_id: null
                        edge_data_staging_id: null
                        edge_type_mapping_transformation_id: null
                        edge_metadata: null
                        edge_created_at: '2022-02-23T20:26:00.459Z'
                        edge_modified_at: '2022-02-23T20:26:00.442Z'
                        edge_deleted_at: null
                        edge_modified_by: '1'
                        edge_created_by: '1'
                        destination_id: '1454'
                        destination_container_id: '13'
                        destination_data_source_id: '9'
                        destination_import_data_id: null
                        destination_data_staging_id: null
                        destination_type_mapping_transformation_id: null
                        destination_original_data_id: null
                        destination_metadata: null
                        destination_created_at: '2022-02-23T20:22:17.699Z'
                        destination_modified_at: '2022-02-23T20:22:17.697Z'
                        destination_deleted_at: null
                        destination_created_by: '1'
                        destination_modified_by: '1'
                        destination_metatype_name: DataItem
                        lvl: 2
                        metatype_id:
                          name: ''
                          description: ''
                        destination_metatype_id: ''
                      - origin_properties:
                          id: null
                          name: null
                          description: null
                          primary_text: null
                          creation_date: null
                          creation_user: null
                          modified_date: null
                          modified_user: null
                        edge_properties: {}
                        destination_properties:
                          id: null
                          name: null
                          count: null
                          active: null
                          message: null
                          equation: null
                          in_alarm: null
                          setpoint: null
                          description: null
                          primary_text: null
                          creation_date: null
                          creation_user: null
                          modified_date: null
                          modified_user: null
                          comparison_operator: null
                        origin_id: '1454'
                        origin_container_id: '13'
                        origin_data_source_id: '9'
                        origin_import_data_id: null
                        origin_data_staging_id: null
                        origin_type_mapping_transformation_id: null
                        origin_original_data_id: null
                        origin_metadata: null
                        origin_created_at: '2022-02-23T20:22:17.699Z'
                        origin_modified_at: '2022-02-23T20:22:17.697Z'
                        origin_deleted_at: null
                        origin_created_by: '1'
                        origin_modified_by: '1'
                        origin_metatype_name: DataItem
                        edge_id: '13'
                        edge_container_id: '13'
                        edge_relationship_pair_id: '54060'
                        edge_data_source_id: '9'
                        edge_import_data_id: null
                        edge_data_staging_id: null
                        edge_type_mapping_transformation_id: null
                        edge_metadata: null
                        edge_created_at: '2022-02-23T20:25:07.848Z'
                        edge_modified_at: '2022-02-23T20:25:07.798Z'
                        edge_deleted_at: null
                        edge_modified_by: '1'
                        edge_created_by: '1'
                        destination_id: '1450'
                        destination_container_id: '13'
                        destination_data_source_id: '9'
                        destination_import_data_id: null
                        destination_data_staging_id: null
                        destination_type_mapping_transformation_id: null
                        destination_original_data_id: null
                        destination_metadata: null
                        destination_created_at: '2022-02-23T20:21:15.340Z'
                        destination_modified_at: '2022-02-23T20:21:15.319Z'
                        destination_deleted_at: null
                        destination_created_by: '1'
                        destination_modified_by: '1'
                        destination_metatype_name: Alarm
                        lvl: 3
                        metatype_id:
                          name: ''
                          description: ''
                        destination_metatype_id: ''
                    isError: false
                properties:
                  value:
                    type: array
                    minItems: 1
                    items:
                      type: object
                      properties:
                        origin_properties:
                          type: object
                          properties:
                            id: {}
                            name: {}
                        edge_properties:
                          type: object
                        destination_properties:
                          type: object
                          properties:
                            id: {}
                            name: {}
                        origin_id:
                          type: string
                          minLength: 1
                        origin_container_id:
                          type: string
                          minLength: 1
                        origin_data_source_id:
                          type: string
                          minLength: 1
                        origin_import_data_id: {}
                        origin_data_staging_id: {}
                        origin_type_mapping_transformation_id: {}
                        origin_original_data_id: {}
                        origin_metadata: {}
                        origin_created_at:
                          type: string
                          minLength: 1
                        origin_modified_at:
                          type: string
                          minLength: 1
                        origin_deleted_at: {}
                        origin_created_by:
                          type: string
                          minLength: 1
                        origin_modified_by:
                          type: string
                          minLength: 1
                        origin_metatype_name:
                          type: string
                          minLength: 1
                        edge_id:
                          type: string
                          minLength: 1
                        edge_container_id:
                          type: string
                          minLength: 1
                        edge_relationship_pair_id:
                          type: string
                          minLength: 1
                        edge_data_source_id:
                          type: string
                          minLength: 1
                        edge_import_data_id: {}
                        edge_data_staging_id: {}
                        edge_type_mapping_transformation_id: {}
                        edge_metadata: {}
                        edge_created_at:
                          type: string
                          minLength: 1
                        edge_modified_at:
                          type: string
                          minLength: 1
                        edge_deleted_at: {}
                        edge_modified_by:
                          type: string
                          minLength: 1
                        edge_created_by:
                          type: string
                          minLength: 1
                        destination_id:
                          type: string
                          minLength: 1
                        destination_container_id:
                          type: string
                          minLength: 1
                        destination_data_source_id:
                          type: string
                          minLength: 1
                        destination_import_data_id: {}
                        destination_data_staging_id: {}
                        destination_type_mapping_transformation_id: {}
                        destination_original_data_id: {}
                        destination_metadata: {}
                        destination_created_at:
                          type: string
                          minLength: 1
                        destination_modified_at:
                          type: string
                          minLength: 1
                        destination_deleted_at: {}
                        destination_created_by:
                          type: string
                          minLength: 1
                        destination_modified_by:
                          type: string
                          minLength: 1
                        destination_metatype_name:
                          type: string
                          minLength: 1
                        lvl:
                          type: number
                        metatype_id:
                          type: object
                          properties:
                            name:
                              type: string
                            description:
                              type: string
                        destination_metatype_id:
                          type: string
                      required:
                        - origin_id
                        - origin_container_id
                        - edge_id
                        - edge_container_id
                        - destination_id
                        - destination_container_id
                        - lvl
                  isError:
                    type: boolean
      deprecated: false
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: node_id
        in: path
        required: true
  '/containers/{container_id}/graphs/nodes/{node_id}/timeseries':
    post:
      summary: Timeseries Node Query
      operationId: TimeseriesNodeQuery
      parameters:
        - schema:
            type: string
          name: container_id
          in: path
          required: true
        - schema:
            type: string
          name: node_id
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
          text/plain:
            schema:
              type: string
              example: "{\r\n    TimeseriesSourceName {\r\n        timestamp\r\n        value\r\n    }\r\n}"
          application/xml:
            schema:
              type: object
              properties: {}
        required: true
        description: ''
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
      description: This is an endpoint that accepts a GraphQL query and returns the results of that query. Primarily used for working with time series data that is attached to a specific node.
      tags:
        - Graph
        - TimeSeries
    get:
      summary: List Timeseries Sources for Node
      operationId: list-ts-for-node
      parameters:
        - schema:
            type: string
          name: container_id
          in: path
          required: true
        - schema:
            type: string
          name: node_id
          in: path
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                x-examples:
                  Example 1:
                    value:
                      sourceA: '123'
                      sourceB: '456'
                    isError: false
                properties:
                  value:
                    type: object
                  isError:
                    type: boolean
      description: Returns a dictionary of source names and source IDs for each source attached to the given node.
  '/containers/{container_id}/import/datasources/{data_source_id}/data':
    post:
      summary: Timeseries Data Source Query
      operationId: TimeseriesDataSourceQuery
      parameters:
        - schema:
            type: string
          name: container_id
          in: path
          required: true
        - schema:
            type: string
          name: data_source_id
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
          text/plain:
            schema:
              type: string
              example: "{\r\n    Timeseries {\r\n        timestamp\r\n        value\r\n    }\r\n}"
          application/xml:
            schema:
              type: object
              properties: {}
        required: true
        description: ''
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
      description: This is an endpoint that accepts a GraphQL query and returns the results of that query. Primarily used for working with time series data without requiring attachment to a node.
      tags:
        - Graph
        - TimeSeries
  '/containers/{container_id}/graphs/nodes/metatype/{metatype_id}':
    get:
      tags:
        - Graph
      summary: List Nodes By Metatype ID
      description: 'List Nodes, filter by MetatypeID'
      operationId: ListNodesByMetatypeID
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: metatype_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNodesByMetatypeResponse'
      deprecated: false
  '/containers/{container_id}/graphs/edges':
    get:
      tags:
        - Graph
      summary: List Edges
      description: List Edges from storage
      operationId: ListEdges
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: query
          name: originID
        - schema:
            type: string
          in: query
          name: destinationID
        - schema:
            type: string
          in: query
          name: relationshipPairID
        - schema:
            type: string
          in: query
          name: relationshipPairName
        - schema:
            type: boolean
          in: query
          name: history
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEdgesResponse'
      deprecated: false
    post:
      tags:
        - Graph
      summary: Create or Update Edges
      description: 'This endpoint will attempt to create a connection between two nodes. You can either pass in the node''s DeepLynx IDs, or the node''s original id, metatype id, and data source id to create these edges.'
      operationId: CreateOrUpdateEdges
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrUpdateEdgesRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: array
                    items:
                      $ref: '#/components/schemas/Edge'
                    isError:
                      type: boolean
  '/containers/{container_id}/graphs/edges/{edge_id}':
    get:
      tags:
        - Graph
      summary: Retrieve Edge
      operationId: RetrieveEdge
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: edge_id
          in: path
          required: true
          schema:
            type: string
        - name: history
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEdgeResponse'
      deprecated: false
      description: Retrieve a single edge
    delete:
      tags:
        - Graph
      summary: Archive Edge
      operationId: ArchiveEdge
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: edge_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
      x-codegen-request-body-name: Body
      description: Archives an edge
  '/containers/{container_id}/graphs/nodes/{node_id}/files':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: node_id
        in: path
        required: true
    get:
      summary: List Node Files
      tags:
        - Graph
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNodeFiles'
      operationId: ListNodeFiles
      description: Lists all attached files for node.
  '/containers/{container_id}/graphs/nodes/{node_id}/files/{file_id}':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: node_id
        in: path
        required: true
      - schema:
          type: string
        name: file_id
        in: path
        required: true
    put:
      summary: Attach Node File
      tags:
        - Graph
      operationId: AttachNodeFile
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      description: Attach a file to a node.
    delete:
      summary: Detach Node File
      tags:
        - Graph
      operationId: DeleteNodeFile
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      description: Detach file from node
  '/containers/{container_id}/graphs/edges/{edge_id}/files':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: edge_id
        in: path
        required: true
    get:
      summary: List Edge Files
      tags:
        - Graph
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEdgeFiles'
      operationId: ListEdgeFiles
      description: Lists all attached files for edge.
  '/containers/{container_id}/graphs/edges/{edge_id}/files/{file_id}':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: file_id
        in: path
        required: true
      - schema:
          type: string
        name: edge_id
        in: path
        required: true
    put:
      summary: Attach Edge File
      tags:
        - Graph
      operationId: AttachEdgeFile
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      description: Attach a file to an edge.
    delete:
      summary: Detach Node File
      tags:
        - Graph
      operationId: DetachNodeFile
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      description: Detach file from an edge.
  '/containers/{container_id}/metatypes':
    get:
      tags:
        - Metatypes
      summary: List Metatypes
      description: 'List all metatypes that the container has access to. '
      operationId: ListMetatypes
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: name
          in: query
          schema:
            type: string
          description: Filter metatypes with names that match this pattern
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: query
          name: description
          description: Filter metatypes with descriptions that match this pattern
        - schema:
            type: string
          in: query
          name: count
          description: Set to true to return an integer count of the number of metatypes
        - schema:
            type: string
          in: query
          name: loadKeys
          description: Set to false to not return the keys for the selected metatypes (true by default)
        - schema:
            type: string
          in: query
          name: sortBy
          description: 'Supply the name of a metatype attribute (name, created_at, etc) by which to sort'
        - schema:
            type: string
          in: query
          name: sortDesc
          description: Set true to sort descending
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMetatypesResponse'
      deprecated: false
    post:
      tags:
        - Metatypes
      summary: Create Metatype
      description: Create a new metatype. Pass in an array for bulk creation.
      operationId: CreateMetatype
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMetatypeRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMetatypesResponse'
      deprecated: false
      x-codegen-request-body-name: Body
  '/containers/{container_id}/metatypes/{metatype_id}':
    get:
      tags:
        - Metatypes
      summary: Retrieve Metatype
      description: Retrieves a single metatype.
      operationId: RetrieveMetaype
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: metatype_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMetatypeResponse'
      deprecated: false
    put:
      tags:
        - Metatypes
      summary: Update Metatype
      description: Update a single Metatype in storage. Will fail if the updated name has already been taken.
      operationId: UpdateMetatype
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: metatype_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMetatypeRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMetatypeResponse'
      deprecated: false
      x-codegen-request-body-name: Body
    delete:
      tags:
        - Metatypes
      summary: Archive Metatype
      description: 'Archives the metatype. This is preferred over deletion as deletion has a cascading effect on the deleted metatype''s keys, relationships, and relationship keys. When in doubt, archive over delete. We''d rather have tombstones than cremating the metatype.'
      operationId: ArchiveMetatype
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: metatype_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: metatype_id
        in: path
        required: true
    post:
      tags:
        - Metatypes
      summary: Validate Metatype Properties
      operationId: ValidateMetatypeProperties
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateMetatypePropertiesResponse'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      description: Returns any errors associated with the intended properties or keys for a metatype or else the data itself if no errors are present.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateMetatypePropertiesRequest'
  '/containers/{container_id}/metatypes/{metatype_id}/keys':
    get:
      tags:
        - Metatype Keys
      summary: List Metatype's Keys
      description: Lists all currently valid and available keys for the metatype.
      operationId: ListMetatypesKeys
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: metatype_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMetatypeKeysResponse'
      deprecated: false
    post:
      tags:
        - Metatype Keys
      summary: Create Metatype Key
      description: |-
        Creates a new key for a metatype. Keys consist of a unique key name (unique to the metatype only), key type, default values, and allowed values. Of those, only the first two are required.
        The `dataType` field accepts only one of the following values: number, string, date, boolean, enumeration, file.
        The fields `defaultValue` and `options` will only accept an array of the following types: string, boolean, number, float.
        Pass in an array for bulk creation.
        Currently the validation and cardinality functionality of keys are NOT checked at data insertion.
      operationId: CreateMetatypeKey
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: metatype_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMetatypeKeyRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMetatypeKeysResponse'
      deprecated: false
      x-codegen-request-body-name: Body
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: metatype_id
        in: path
        required: true
  '/containers/{container_id}/metatypes/{metatype_id}/keys/{key_id}':
    get:
      tags:
        - Metatype Keys
      summary: Retrieve Metatype Key
      description: Retrieve the specified key for the metatype.
      operationId: RetrieveMetatypeKey
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: metatype_id
          in: path
          required: true
          schema:
            type: string
        - name: key_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMetatypeKeyResponse'
      deprecated: false
    put:
      tags:
        - Metatype Keys
      summary: Update Metatype Key
      description: Updates a single key for a metatype.
      operationId: UpdateMetatypeKey
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: metatype_id
          in: path
          required: true
          schema:
            type: string
        - name: key_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetatypeKey'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMetatypeKeyResponse'
      deprecated: false
      x-codegen-request-body-name: Body
    delete:
      tags:
        - Metatype Keys
      summary: Archive Metatype Key
      description: Archiving the metatype key prevents any new types from implementing the key. It *does not remove key/value pairs on existing types*. We highly recommend you archive type keys instead of deleting them so that previous data is not affected.
      operationId: ArchiveMetatypeKey
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: metatype_id
          in: path
          required: true
          schema:
            type: string
        - name: key_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: metatype_id
        in: path
        required: true
      - schema:
          type: string
        name: key_id
        in: path
        required: true
  '/containers/{container_id}/metatype_relationships':
    get:
      tags:
        - Metatype Relationships
      summary: List Metatype Relationships
      description: List metatype relationships. Describes the connection between two metatypes and acts as a vehicle for relationship specific keys.
      operationId: ListMetatypeRelationships
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: name
          in: query
          schema:
            type: string
          description: Filter metatype relationships with names that match this pattern
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: query
          name: description
          description: Filter metatype relationships with descriptions that match this pattern
        - schema:
            type: string
          in: query
          name: count
          description: Set to true to return an integer count of the number of metatype relationships
        - schema:
            type: string
          in: query
          name: loadKeys
          description: Set to false to not return the keys for the selected metatype relationships (true by default)
        - schema:
            type: string
          in: query
          name: sortBy
          description: 'Supply the name of a metatype relationship attribute (name, created_at, etc) by which to sort'
        - schema:
            type: string
          in: query
          name: sortDesc
          description: Set true to sort descending
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMetatypeRelationshipsResponse'
      deprecated: false
    post:
      tags:
        - Metatype Relationships
      summary: Create Metatype Relationship
      description: |-
        Create a new metatype relationship. Describes the connection that could exist between two metatypes and acts as a vehicle for relationship specific keys.
        Pass in an array for bulk creation.
      operationId: CreateMetatypeRelationship
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMetatypeRelationshipRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMetatypeRelationshipsResponse'
      deprecated: false
      x-codegen-request-body-name: Body
  '/containers/{container_id}/metatype_relationships/{relationship_id}':
    get:
      tags:
        - Metatype Relationships
      summary: Retrieve Metatype Relationship
      description: Retrieve a single Metatype Relationship.
      operationId: RetrieveMetatypeRelationship
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: relationship_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMetatypeRelationshipResponse'
      deprecated: false
    put:
      tags:
        - Metatype Relationships
      summary: Update Metatype Relationship
      operationId: UpdateMetatypeRelationship
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: relationship_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMetatypeRelationshipRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMetatypeRelationshipResponse'
      deprecated: false
      x-codegen-request-body-name: Body
      description: Updates the specified metatype relationship.
    delete:
      tags:
        - Metatype Relationships
      summary: Archive Metatype Relationship
      description: Archive the metatype relationship.
      operationId: ArchiveMetatypeRelationship
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: relationship_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
  '/containers/{container_id}/metatype_relationships/{relationship_id}/keys':
    get:
      tags:
        - Metatype Relationship Keys
      summary: List Metatype Relationship Keys
      description: Retrieves all keys for a Metatype Relationship.
      operationId: ListMetatypeRelationshipKeys
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: relationship_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMetatypeRelationshipKeysResponse'
      deprecated: false
    post:
      tags:
        - Metatype Relationship Keys
      summary: Create Metatype Relationship Key
      description: |-
        Creates a new key for a metatype relationship. Keys consist of a unique key name (unique to the metatype relationship), key type, default values, and allowed values. Of those, only the first two are required.
        The `dataType` field accepts only one of the following values: number, string, date, boolean, enumeration, file.
        The fields `defaultValue` and `options` will only accept an array of the following types: string, boolean, number, float.
      operationId: CreateMetatypeRelationshipKey
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: relationship_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMetatypeRelationshipKeyRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMetatypeRelationshipKeysResponse'
      deprecated: false
      x-codegen-request-body-name: Body
  '/containers/{container_id}/metatype_relationships/{relationship_id}/keys/{key_id}':
    get:
      tags:
        - Metatype Relationship Keys
      summary: Retrieve Metatype Relationship Key
      description: Retrieve a single key for a Metatype Relationship by id.
      operationId: RetrieveMetatypeRelationshipKey
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: relationship_id
          in: path
          required: true
          schema:
            type: string
        - name: key_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMetatypeRelationshipKeyResponse'
      deprecated: false
    put:
      tags:
        - Metatype Relationship Keys
      summary: Update Metaype Relationship Key
      description: Updates a Metatype Relationship key. The update must follow the same format as creation.
      operationId: UpdateMetatypeRelationshipKey
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: relationship_id
          in: path
          required: true
          schema:
            type: string
        - name: key_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipKey'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMetatypeRelationshipKeyResponse'
      deprecated: false
      x-codegen-request-body-name: Body
    delete:
      tags:
        - Metatype Relationship Keys
      summary: Archive Metatype Relationship Key
      description: Archives a Metatype Relationship Key.
      operationId: ArchiveMetatypeRelationshipKey
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: relationship_id
          in: path
          required: true
          schema:
            type: string
        - name: key_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
  '/containers/{container_id}/metatype_relationship_pairs':
    get:
      tags:
        - Metatype Relationship Pairs
      summary: List Metatype Relationship Pairs
      description: List all Metatype Relationship Pairs for current container.
      operationId: ListMetatypeRelationshipPairs
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: name
          in: query
          schema:
            type: string
          description: Filter metatype relationship pairs with names that match this pattern
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: query
          name: archived
          description: Set to true to include archived metatype relationship pairs
        - schema:
            type: string
          in: query
          name: count
          description: Set to true to return an integer count of the number of metatype relationship pairs
        - schema:
            type: string
          in: query
          name: loadRelationships
          description: Set to false to not return the relationships for the selected metatype relationship pairs (true by default)
        - schema:
            type: string
          in: query
          name: destinationID
          description: Filter destination by metatype ID
        - schema:
            type: string
          in: query
          name: originID
          description: Filter origin by metatype ID
        - schema:
            type: string
          in: query
          name: metatypeID
          description: Filter by metatype ID
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMetatypeRelationshipPairsResponse'
      deprecated: false
    post:
      tags:
        - Metatype Relationship Pairs
      summary: Create Metatype Relationship Pair
      description: |-
        Create a new Metaype Relationship Pair. Describes the connection between two metatypes by connecting them using a Metatype Relationship.
        Pass in an array for bulk creation.
      operationId: CreateMetatypeRelationshipPair
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMetatypeRelationshipPairRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMetatypeRelationshipPairsResponse'
      deprecated: false
      x-codegen-request-body-name: Body
  '/containers/{container_id}/metatype_relationship_pairs/{pair_id}':
    get:
      tags:
        - Metatype Relationship Pairs
      summary: Retrieve Metatype Relationship Pair
      description: Retrieves a single Metatype Relationship Pair.
      operationId: RetrieveMetatypeRelationshipPair
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: pair_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMetatypeRelationshipPairResponse'
      deprecated: false
    delete:
      tags:
        - Metatype Relationship Pairs
      summary: Archive Metatype Relationship Pair
      description: Archives a Metatype Relationship Pair.
      operationId: ArchiveMetatypeRelationshipPair
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: pair_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
    put:
      tags:
        - Metatype Relationship Pairs
      summary: Update Metaype Relationship Pair
      operationId: UpdateMetatypeRelationshipPair
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: pair_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateMetatypeRelationshipPairResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipPair'
      description: Updates the specified metatype relationship pair.
  '/containers/{container_id}/import/datasources':
    get:
      tags:
        - Data Sources
      summary: List Data Sources
      operationId: ListDataSources
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: boolean
          in: query
          name: decrypted
          description: Return decrypted data sources. Requires read-write permissions on data.
        - schema:
            type: boolean
          in: query
          name: timeseries
          description: Return timeseries data sources (true) or non-timeseries data sources (false)
        - schema:
            type: boolean
          in: query
          name: count
          description: Return the count of data sources
        - schema:
            type: boolean
          in: query
          name: archived
          description: Return data sources marked as archived
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDataSourcesResponse'
        '201':
          description: Created
      deprecated: false
      description: List the datasources for the container.
    post:
      tags:
        - Data Sources
      summary: Create Data Source
      description: 'Create new datasource. Supported data source types are `http`, `standard` (or `manual`), `p6`, `aveva`, and `timeseries`.'
      operationId: CreateDataSource
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDataSourceRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDataSourcesResponse'
      deprecated: false
      x-codegen-request-body-name: Body
  '/containers/{container_id}/export/datatargets':
    get:
      summary: List Data Targets
      operationId: ListDatTargets
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDataTargetsResponse'
        '301':
          description: Moved Permanently
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
      description: List the datatargets for the container.
      tags:
        - Data Targets
    post:
      summary: Create Data Target
      description: Create new datatarget. Supported data target types are `http` and `standard`.
      operationId: CreateDataTarget
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDataTargetsResponse'
      deprecated: false
      x-codegen-request-body-name: Body
      tags:
        - Data Targets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDataTargetRequest'
            examples:
              example-1:
                value:
                  name: testing data target
                  adapter_type: http OR standard
                  active: true
                  config:
                    endpoint: ''
                    auth_method: basic
                    username: test
                    password: test
                    grapgql_query: '{ __type(name: "Requirement"){ name fields{ name } } }'
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
  '/containers/{container_id}/import/datasources/{data_source_id}':
    get:
      tags:
        - Data Sources
      summary: Retrieve Data Source
      description: Retrieve a single data source by ID.
      operationId: RetrieveDataSource
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_source_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDataSourceResponse'
      deprecated: false
    put:
      tags:
        - Data Sources
      summary: Set Data Source Configuration
      description: Updates a data source's configuration in storage. Note that this request body's structure must match that of the data source's adapter type.
      operationId: SetDataSourceConfiguration
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_source_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDataSourceConfig'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDataSourceResponse'
      deprecated: false
      x-codegen-request-body-name: Body
    delete:
      tags:
        - Data Sources
      summary: Archive Data Source
      description: 'Archive a data source, with options to permanently remove it (and associated data).'
      operationId: ArchiveDataSource
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_source_id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: query
          name: archive
          description: Set to true to archive the data source.
        - schema:
            type: string
          in: query
          name: forceDelete
          description: Set to true to force deletion of the data source.
        - schema:
            type: string
          in: query
          name: removeData
          description: Set to true to remove data associated with the data source.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
  '/containers/{container_id}/import/datasources/{data_source_id}/download':
    get:
      tags:
        - Data Sources
      summary: Download Timeseries Data Source
      description: Download a Timeseries Data Source by ID. Output is a CSV file.
      operationId: DownloadDataSource
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_source_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDataSourceResponse'
      deprecated: false
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: data_source_id
        in: path
        required: true
  '/containers/{container_id}/export/datatargets/{data_target_id}':
    get:
      summary: Retrieve Data Target
      description: Retrieve a single data target by ID.
      operationId: RetrieveDataTarget
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_target_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDataTargetResponse'
      deprecated: false
      tags:
        - Data Targets
    put:
      tags:
        - Data Targets
      summary: Set Data Target Configuration
      description: Updates a data target's configuration in storage. Note that this request body's structure must match that of the data target's adapter type.
      operationId: SetDataTargetConfiguration
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_target_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDataTargetConfig'
            examples: {}
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDataTargetResponse'
      deprecated: false
      x-codegen-request-body-name: Body
    delete:
      summary: Archive Data Target
      description: 'Archive a data target, with options to permanently remove it.'
      operationId: ArchiveDataTarget
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_target_id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: query
          name: archive
          description: Set to true to archive the data target.
        - schema:
            type: string
          in: query
          name: forceDelete
          description: Set to true to force deletion of the data target.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
      tags:
        - Data Targets
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: data_target_id
        in: path
        required: true
  '/containers/{container_id}/import/datasources/{data_source_id}/active':
    post:
      tags:
        - Data Sources
      summary: Set Data Source Active
      description: Sets a data source active.
      operationId: SetDataSourceActive
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_source_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
    delete:
      tags:
        - Data Sources
      summary: Set Data Source Inactive
      description: Sets a data source inactive.
      operationId: SetDataSourceInactive
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_source_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
  '/containers/{container_id}/export/datatargets/{data_target_id}/active':
    post:
      summary: Set Data Target Active
      description: Sets a data target active.
      operationId: SetDataTargetActive
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_target_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
      tags:
        - Data Targets
    delete:
      summary: Set Data Target Inactive
      description: Sets a data target inactive.
      operationId: SetDataTargetInactive
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_target_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
      tags:
        - Data Targets
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: data_target_id
        in: path
        required: true
  '/containers/{container_id}/import/datasources/{data_source_id}/imports':
    get:
      tags:
        - Data Sources
      summary: List Imports for Data Source
      operationId: ListImportsForDataSource
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_source_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDataSourceImportsResponse'
      deprecated: false
      description: List the imports for the datasource.
    post:
      tags:
        - Data Sources
      summary: Create Manual Import
      description: Create a manual import.
      operationId: CreateManualImport
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_source_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                test: test
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateManualImportResponse'
      deprecated: false
      x-codegen-request-body-name: Body
  '/containers/{container_id}/import/datasources/{data_source_id}/files':
    post:
      tags:
        - Data Sources
      summary: Upload File
      description: |-
        Uploads a file and it's metadata to DeepLynx. All additional fields on the multipart form will be processed and added as metadata to the file upload itself.
        This should be a collection of files and normal fields. If you include a file field and call that "metadata" - you can include a normal metadata upload as either a json, csv, or xml file. This data will be processed like a normal import and the files attached to the processed data. Once DeepLynx generates nodes and edges from that data, any files attached will automatically be attached to the resulting nodes/edges as well.
        NOTE: The metadata file you upload, if json, must be wrapped in an array. If you do not pass in an array of objects, even if it's a single object, then DeepLynx will attempt to split up your metadata into its parts instead of treating it like a whole object.
      operationId: UploadFile
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_source_id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: query
          name: importID
          description: You can attach the metadata to an existing import if desired.
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFileResponse'
      deprecated: false
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                metadata:
                  type: string
                  format: binary
          application/json:
            schema:
              type: object
              properties: {}
        description: |-
          This should be a collection of files and normal fields. If you include a file field and call that "metadata" - you can include a normal metadata upload as either a json, csv, or xml file. This data will be processed like a normal import and the files attached to the processed data. Once DeepLynx generates nodes and edges from that data, any files attached will automatically be attached to the resulting nodes/edges as well.
          NOTE: The metadata file you upload, if json, must be wrapped in an array. If you do not pass in an array of objects, even if it's a single object, then DeepLynx will attempt to split up your metadata into its parts instead of treating it like a whole object.
  '/containers/{container_id}/files/{file_id}/download':
    get:
      tags:
        - Data Sources
      summary: Download File
      description: Downloads a previously uploaded file.
      operationId: DownloadFile
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: file_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File downloaded successfully
          content:
            application/octet-stream:
              schema:
                type: file
                format: binary
        '404':
          description: File not found
        '500':
          description: Internal server error
      deprecated: false
  '/containers/{container_id}/files/{file_id}':
    get:
      tags:
        - Data Sources
      summary: Retrieve File
      description: Get information about a file by ID.
      operationId: RetrieveFile
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: file_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFileInfoResponse'
      deprecated: false
    delete:
      summary: Delete File
      operationId: delete-containers-container_id-files-file_id
      responses:
        '200':
          description: OK
      description: Delete a file
  '/containers/{container_id}/data/export':
    post:
      tags:
        - Data Export
      summary: Create Data Export
      description: Create a new data export with the included configuration. Configuration values may be encrypted depending on the adapter you've choosen. See the readme for the exporters for more information.
      operationId: CreateDataExport
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDataExportRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
      x-codegen-request-body-name: Body
    get:
      tags:
        - Data Export
      summary: List Data Exports
      operationId: ListDataExports
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDataExportsResponse'
      description: List data exports for the container.
      parameters:
        - schema:
            type: boolean
          in: query
          name: count
          description: boolean indicating if the return value should be a count only
        - schema:
            type: integer
            minimum: 0
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
        - schema:
            type: string
          in: query
          name: sortBy
          description: column to sort results by
        - schema:
            type: boolean
          in: query
          name: sortDesc
          description: boolean indicating if results should be in descending order
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
  '/containers/{container_id}/data/export/{export_id}':
    get:
      tags:
        - Data Export
      summary: Retrieve Data Export
      description: Fetch a data export record by ID
      operationId: RetrieveDataExport
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: export_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDataExportResponse'
      deprecated: false
    put:
      tags:
        - Data Export
      summary: Stop Data Export
      description: Stops a data export. Please note that this just sends a **stop** signal. The application's export adapter determines how to handle the said signal. In some cases the export stopping might not be immediate.
      operationId: StopDataExport
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: export_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
      x-codegen-request-body-name: Body
    post:
      tags:
        - Data Export
      summary: Start Data Export
      description: Start or restart a data export by id.
      operationId: StartDataExport
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: export_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
    delete:
      tags:
        - Data Export
      summary: Delete Data Export
      description: Deletes a data export record. This does not guarantee the export will stop immediately.
      operationId: DeleteDataExport
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: export_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
  /users:
    get:
      summary: List Users
      tags:
        - Users
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
      operationId: ListUsers
      description: List users.
      parameters:
        - schema:
            type: boolean
          in: query
          name: count
          description: boolean indicating if the return value should be a count only
        - schema:
            type: boolean
          in: query
          name: loadKeys
          description: 'if supplied, the API keys for the user will also be returned'
        - schema:
            type: integer
            minimum: 0
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
        - schema:
            type: string
          in: query
          name: sortBy
          description: column to sort results by
        - schema:
            type: boolean
          in: query
          name: sortDesc
          description: boolean indicating if results should be in descending order
  '/users/{user_id}':
    parameters:
      - schema:
          type: string
        name: user_id
        in: path
        required: true
    put:
      tags:
        - Users
      summary: Update User
      operationId: UpdateUser
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      description: Updates the specified user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
    delete:
      tags:
        - Users
      summary: Delete User
      operationId: DeleteUser
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      description: Deletes the specified user.
  /users/invite:
    get:
      summary: Accept Container Invite
      tags:
        - Users
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      operationId: AcceptContainerInvite
      parameters:
        - schema:
            type: string
          in: query
          name: token
          description: the token supplied in the container invite
          required: true
      description: Accepts a container invite for the current user. The token received in the container invite previously must be attached to this request as a query parameter.
  /users/invites:
    get:
      summary: List Outstanding Invites
      tags:
        - Users
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserInvitesResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound404'
      operationId: ListOutstandingInvites
      description: Lists the outstanding container invites for the current user.
  /users/permissions:
    get:
      summary: List User Permissions
      tags:
        - Users
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserPermissionsResponse'
      operationId: ListUserPermissions
      description: List permissions for the user.
  '/containers/{container_id}/users':
    get:
      tags:
        - Users
      summary: List Users for Container
      description: List Users for container.
      operationId: ListUsersForContainer
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersForContainerResponse'
      deprecated: false
  '/containers/{container_id}/users/{user_id}':
    get:
      tags:
        - Users
      summary: Retrieve User
      description: Retrieve a user by ID
      operationId: RetrieveUser
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserResponse'
      deprecated: false
  '/containers/{container_id}/service-users':
    get:
      tags:
        - Users
      summary: List Service Users
      description: Retrieve a list of all service users for container
      operationId: ListServiceUsers
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListServiceUserResponse'
      deprecated: false
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
    post:
      summary: Create Service User
      operationId: CreateServiceUser
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateServiceUserResponse'
      description: Creates a new service user for container
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServiceUser'
      tags:
        - Users
  '/containers/{container_id}/service-users/{service_user_id}':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: service_user_id
        in: path
        required: true
    delete:
      summary: Delete Service User
      operationId: DeleteServiceUser
      responses:
        '200':
          description: OK
      description: Deletes a service user.
      tags:
        - Users
  '/containers/{container_id}/service-users/{service_user_id}/permissions':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: service_user_id
        in: path
        required: true
    put:
      summary: Set Service User Permissions
      operationId: SetServiceUserPermissions
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: boolean
                  isError:
                    type: boolean
      description: Set service user permissions.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  containers:
                    - read
                    - write
                  data:
                    - read
                    - write
                  users:
                    - read
                    - write
                  ontology:
                    - read
                    - write
              properties:
                containers:
                  type: array
                  items:
                    type: string
                data:
                  type: array
                  items:
                    type: string
                users:
                  type: array
                  items:
                    type: string
                ontology:
                  type: array
                  items:
                    type: string
              required:
                - containers
                - data
                - users
                - ontology
      tags:
        - Users
    get:
      summary: Get Service User Permissions
      operationId: GetServiceUserPermissions
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    type: string
      tags:
        - Users
      description: Get service user permissions.
  '/containers/{container_id}/service-users/{service_user_id}/keys':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: service_user_id
        in: path
        required: true
    get:
      summary: List Service User KeyPairs
      operationId: ListServiceUserKeyPairs
      responses:
        '200':
          description: OK
      description: 'Lists a service user''s api/secret keypairs. This lists only the key, not the secret.'
      tags:
        - Users
      parameters:
        - schema:
            type: string
          in: query
          name: note
          description: search for keys created with a specific note
    post:
      summary: Create Service User KeyPair
      operationId: CreateServiceUserKeyPair
      responses:
        '200':
          description: Successfully created a service user keypair.
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: object
                  isError:
                    type: boolean
      description: Creates a new api/secret keypair. This will return the secret as well - this is the only time that you will be able to see the secret.
      tags:
        - Users
  '/containers/{container_id}/service-users/{service_user_id}/keys/{key_id}':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: service_user_id
        in: path
        required: true
      - schema:
          type: string
        name: key_id
        in: path
        required: true
    delete:
      summary: Delete Service User KeyPair
      operationId: DeleteServiceUserKeyPair
      responses:
        '200':
          description: OK
      description: Delete a service user keypair.
      tags:
        - Users
  '/containers/{container_id}/users/{user_id}/roles':
    get:
      tags:
        - Users
      summary: List User's Roles
      description: List Users' roles
      operationId: ListUsersRoles
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUserRoles'
      deprecated: false
  '/containers/{container_id}/users/roles':
    post:
      tags:
        - Users
      summary: Assign User Role
      description: 'Assign a role to a user, roles must consist of role name and domain'
      operationId: AssignUserRole
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignRoleRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
      x-codegen-request-body-name: Body
  '/containers/{container_id}/users/invite':
    get:
      tags:
        - Users
      summary: List Invited Users for Container
      description: List all invitations to container.
      operationId: ListInvitedUsersForContainer
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListContainerInvitesResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound404'
      deprecated: false
    post:
      tags:
        - Users
      summary: Invite User to Container
      description: Create a new user using the username_password identity type.
      operationId: InviteUserToContainer
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContainerInvite'
  '/containers/{container_id}/import/datasources/{data_source_id}/mappings':
    get:
      tags:
        - Data Type Mappings
      summary: List Data Type Mappings
      description: Lists data type mappings for the data source
      operationId: ListDataTypeMappings
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 0
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
        - name: needsTransformations
          in: query
          description: boolean indicating if the return should consist of only mappings that need transformations
          schema:
            type: boolean
        - name: count
          in: query
          description: boolean indicating if the return value should be a count only
          schema:
            type: boolean
        - name: sortBy
          in: query
          description: column to sort results by
          schema:
            type: string
        - name: sortDesc
          in: query
          description: boolean indicating if results should be in descending order
          schema:
            type: boolean
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_source_id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: query
          name: resultingMetatypeName
          description: 'if supplied, filters returned transformations by those that produce the resulting metatype'
        - schema:
            type: string
          in: query
          name: resultingMetatypeRelationshipName
          description: 'if supplied, filters returned transformations by those that produce the resulting metatype relationship'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDataTypeMappingResponse'
      deprecated: false
  '/containers/{container_id}/import/datasources/{data_source_id}/mappings/{mapping_id}':
    get:
      tags:
        - Data Type Mappings
      summary: Retrieve Data Type Mapping
      description: Retrieve a data type mapping
      operationId: RetrieveDataTypeMapping
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_source_id
          in: path
          required: true
          schema:
            type: string
        - name: mapping_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDataTypeMappingResponse'
      deprecated: false
    delete:
      tags:
        - Data Type Mappings
      summary: Delete Data Type Mapping
      description: Permanently remove data type mapping.
      operationId: DeleteDataTypeMapping
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_source_id
          in: path
          required: true
          schema:
            type: string
        - name: mapping_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
      x-codegen-request-body-name: Body
    put:
      tags:
        - Data Type Mappings
      summary: Update Data Type Mapping
      operationId: UpdateDataTypeMapping
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_source_id
          in: path
          required: true
          schema:
            type: string
        - name: mapping_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDataTypeMappingResponse'
      description: Updates a data type mapping.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypeMapping'
    parameters: []
  '/containers/{container_id}/import/datasources/{data_source_id}/mappings/export':
    post:
      tags:
        - Data Type Mappings
      summary: Export Type Mappings
      operationId: ExportTypeMappings
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypeMapping'
      description: 'Export type mappings for a datasource. Providing a JSON body is optional. If provided, the mapping_ids may be specified to indicate certain type mapping IDs to return. Additionally, a target data source may be provided to which the mappings will be copied.'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypeMappingExportPayload'
        description: ''
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: data_source_id
        in: path
        required: true
  '/containers/{container_id}/import/datasources/{data_source_id}/mappings/import':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: data_source_id
        in: path
        required: true
    post:
      tags:
        - Data Type Mappings
      summary: Import Data Type Mappings
      operationId: ImportDataTypeMappings
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportDataTypeMappingResponse'
      description: 'Import type mappings for a datasource. Accepts either a JSON body or actual JSON file. The payload should be an array of type mapping classes, previously generated using the export route.'
      parameters:
        - schema:
            type: boolean
            default: false
          in: query
          name: isEnabled
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportDataTypeMappingsRequest'
        description: ''
  '/containers/{container_id}/import/datasources/{data_source_id}/mappings/{mapping_id}/transformations':
    get:
      tags:
        - Data Type Mappings
      summary: List Data Type Mapping's Transformations
      description: List transformations for a type mapping from storage.
      operationId: ListTransformations
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_source_id
          in: path
          required: true
          schema:
            type: string
        - name: mapping_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTransformationResponse'
      deprecated: false
    post:
      tags:
        - Data Type Mappings
      summary: Create Data Type Mapping's Transformations
      description: Create a transformation for the type mapping.
      operationId: CreateTransformation
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_source_id
          in: path
          required: true
          schema:
            type: string
        - name: mapping_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTypeMappingTransformationsRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTransformationResponse'
      deprecated: false
      x-codegen-request-body-name: Body
  '/containers/{container_id}/import/datasources/{data_source_id}/mappings/{mapping_id}/transformations/{transformation_id}':
    put:
      tags:
        - Data Type Mappings
      summary: Update Data Type Mapping's Transformations
      description: Update a transformation.
      operationId: UpdateTransformation
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_source_id
          in: path
          required: true
          schema:
            type: string
        - name: mapping_id
          in: path
          required: true
          schema:
            type: string
        - name: transformation_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTypeMappingTransformationsRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTransformationResponse'
      deprecated: false
      x-codegen-request-body-name: Body
    delete:
      tags:
        - Data Type Mappings
      summary: Delete Data Type Mapping's Transformations
      description: Delete a transformation.
      operationId: DeleteTransformation
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: data_source_id
          in: path
          required: true
          schema:
            type: string
        - name: mapping_id
          in: path
          required: true
          schema:
            type: string
        - name: transformation_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
  '/containers/{container_id}/import/imports/{import_id}':
    delete:
      tags:
        - Imports
      summary: Delete Import
      description: Delete import will delete an import ONLY IF the import has not been processed.
      operationId: DeleteImport
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: import_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ''
          content: {}
      deprecated: false
  '/containers/{container_id}/import/imports/{import_id}/data':
    get:
      tags:
        - Imports
      summary: List Import's Data
      operationId: ListImportsData
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: import_id
          in: path
          required: true
          schema:
            type: string
        - schema:
            type: string
          in: query
          name: count
          description: boolean indicating if the return value should be a count only
        - schema:
            type: integer
            minimum: 0
          in: query
          name: limit
        - schema:
            type: integer
            minimum: 0
          in: query
          name: offset
        - schema:
            type: string
          in: query
          name: sortBy
          description: column to sort results by
        - schema:
            type: boolean
          in: query
          name: sortDesc
          description: boolean indicating if results should be in descending order
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListImportDataResponse'
      deprecated: false
      description: List the data for an import.
  '/containers/{container_id}/import/imports/{import_id}/data/{data_id}':
    get:
      tags:
        - Imports
      summary: Retrieve Import Data
      description: Retrieve a single piece of data from an import.
      operationId: RetrieveImportData
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: import_id
          in: path
          required: true
          schema:
            type: string
        - name: data_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetImportDataResponse'
      deprecated: false
    delete:
      tags:
        - Imports
      summary: Delete Import Data
      description: Delete a single piece of data from an import.
      operationId: DeleteImportData
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: import_id
          in: path
          required: true
          schema:
            type: string
        - name: data_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      deprecated: false
    put:
      tags:
        - Imports
      summary: Update Import Data
      operationId: UpdateImportData
      parameters:
        - name: container_id
          in: path
          required: true
          schema:
            type: string
        - name: import_id
          in: path
          required: true
          schema:
            type: string
        - name: data_id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateImportDataResponse'
      description: Update the data of an existing import.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataStaging'
  '/containers/{container_id}/datasources/{data_source_id}/imports':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: data_source_id
        in: path
        required: true
    post:
      tags:
        - Imports
      summary: Create Import
      operationId: CreateImport
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateImportResponse'
      description: Creates a new import.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  data_source_id: 1294f879-7f15-40e7-86f4-56177108ba23
                  reference: testing upload
              properties:
                data_source_id:
                  type: string
                  minLength: 1
                reference:
                  type: string
                  minLength: 1
                status_message:
                  type: string
              required:
                - data_source_id
        description: ''
  '/containers/{container_id}/datasources/{data_source_id}/imports/{import_id}/data':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: import_id
        in: path
        required: true
      - schema:
          type: string
        name: data_source_id
        in: path
        required: true
    post:
      tags:
        - Imports
      summary: Add Data to Import
      operationId: AddDataToImport
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddDataToImportResponse'
      description: Adds data to an existing import. Accepts an array of JSON objects or a file in JSON or CSV format.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
  /events:
    post:
      tags:
        - Events
      summary: Create Event
      description: Create new event
      operationId: CreateEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEventResponse'
      deprecated: false
      x-codegen-request-body-name: Body
  /event_actions:
    get:
      summary: List Event Actions
      tags:
        - Events
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEventActionResponse'
      operationId: ListEventActions
      description: Lists all event actions
      parameters:
        - schema:
            type: boolean
            default: 'false'
          in: query
          name: deleted
          description: boolean indicating if we should return deleted event actions
    post:
      summary: Create Event Action
      tags:
        - Events
      operationId: CreateEventAction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventActionRequest'
        required: true
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEventActionResponse'
      description: Create an event action
  '/event_actions/{action_id}':
    parameters:
      - schema:
          type: string
        name: action_id
        in: path
        required: true
    get:
      summary: Retrieve Event Action
      tags:
        - Events
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventActionResponse'
      operationId: RetrieveEventAction
      description: Retrieve an event action
    put:
      summary: Update Event Action
      tags:
        - Events
      operationId: UpdateEventAction
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateEventActionResponse'
      description: Update an event action
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventActionRequest'
      parameters:
        - schema:
            type: boolean
          in: query
          name: active
          description: Sets the event action active or inactive
    delete:
      summary: Delete Event Action
      tags:
        - Events
      operationId: DeleteEventAction
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Generic200Response'
      description: Delete an event action
  /event_action_status:
    get:
      summary: List Event Action Statuses
      tags:
        - Events
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEventActionStatusResponse'
      operationId: ListEventActionStatuses
      description: List all event action statuses
      parameters:
        - schema:
            type: string
          in: query
          name: eventID
          description: Filter returned statuses by the event ID
  '/event_action_status/{status_id}':
    parameters:
      - schema:
          type: string
        name: status_id
        in: path
        required: true
    get:
      summary: Retrieve Event Action Status
      tags:
        - Events
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventActionStatusResponse'
      operationId: RetrieveEventActionStatus
      description: Retrieve an event action status
    put:
      summary: Update Event Action Status
      tags:
        - Events
      operationId: UpdateEventActionStatus
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateEventActionStatusResponse'
      description: Update an event action status
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventActionStatusRequest'
  /oauth/token:
    get:
      tags:
        - Authentication
      summary: Retrieve OAuth Token
      operationId: RetrieveOAuthToken
      parameters:
        - name: x-api-key
          in: header
          required: true
          schema:
            type: string
          description: The API key
        - name: x-api-secret
          in: header
          required: true
          schema:
            type: string
          description: The API secret
        - name: x-api-expiry
          in: header
          schema:
            type: string
          description: The API expiry date
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
                pattern: unauthorized
                default: unauthorized
      deprecated: false
      description: Returns an OAuth token. The API key and secret must be supplied.
    parameters: []
  /oauth/exchange:
    post:
      tags:
        - Authentication
      summary: Exchange OAuth Token
      operationId: ExchangeOAuthToken
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenExchangeRequest'
      description: 'Exchanges credentials for a JSON Web Token (JWT). Multiple authentication flows are supported, see DeepLynx documentation for details.'
  /health:
    get:
      tags:
        - Misc
      summary: Health
      description: 'Simple endpoint, returns 200 on call. Can be used for a simple Up monitor by an external service.'
      operationId: Health
      responses:
        '200':
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: OK
      deprecated: false
  /rsa/initialize:
    post:
      tags:
        - Authentication
      summary: RSA Initialize
      operationId: RsaInitialize
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RSAResponse'
      description: |-
        Used to begin (and optionally complete) an RSA authentication. Either a user's ID may be provided and the SecurID provided in a later `verify` request,
        or else the user may provide both the user ID (`subjectName`) and `securID` at once to `initialize` to complete the authentication request.
        The `securID` is the combination of the user's memorized token and 6 digit temporary RSA pin (with no spaces or characters between them).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RSAInitRequest'
  /rsa/verify:
    post:
      tags:
        - Authentication
      summary: RSA Verify
      operationId: RsaVerify
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RSAResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RSAVerifyRequest'
      description: Provides RSA with the user's SecurID to complete authentication
  /rsa/status:
    post:
      tags:
        - Authentication
      summary: RSA Status
      operationId: RsaStatus
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RSAStatusResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RSAStatusRequest'
      description: Returns the status of an RSA authentication attempt
  /rsa/cancel:
    post:
      tags:
        - Authentication
      summary: RSA Cancel
      operationId: RsaCancel
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RSAResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RSACancelRequest'
      description: Cancels an RSA authentication attempt
  '/containers/{container_id}/task':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
    get:
      summary: List Tasks
      tags:
        - Tasks
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTasksResponse'
      operationId: ListTasks
      description: Lists all tasks with a "ready" status
    post:
      summary: Create Task
      tags:
        - Tasks
      operationId: CreateTask
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTaskResponse'
      description: Creates a new task
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
  '/containers/{container_id}/task/{task_id}':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: task_id
        in: path
        required: true
    get:
      summary: Get Task
      tags:
        - Tasks
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTaskResponse'
      operationId: GetTask
      description: Retrieves a specific task by ID
    put:
      summary: Update Task
      tags:
        - Tasks
      operationId: UpdateTask
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTaskResponse'
      description: Updates a task
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
  '/containers/{container_id}/alerts':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
    get:
      summary: List Container Alerts
      tags:
        - Containers
      responses:
        '200':
          description: OK
      operationId: ListContainerAlerts
      description: List all active alerts for a container by ID.
  '/containers/{container_id}/alerts/{alert_id}':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: alert_id
        in: path
        required: true
    post:
      summary: Acknowledge Container Alert
      operationId: AcknowledgeContainerAlert
      tags:
        - Containers
      responses:
        '200':
          description: OK
      description: Post with no body to acknowledge an alert and remove it from the active alerts list.
  '/containers/{container_id}/ontology/versions':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
    get:
      summary: List Ontology Versions
      tags:
        - Containers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  value:
                    type: array
                    minItems: 1
                    items:
                      required:
                        - id
                        - container_id
                        - name
                        - changelist_id
                        - created_by
                        - created_at
                      properties:
                        id:
                          type: string
                        container_id:
                          type: string
                        name:
                          type: string
                        changelist_id:
                          type: string
                        created_by:
                          type: string
                        created_at:
                          type: string
                required:
                  - value
                x-examples:
                  example-1:
                    value:
                      - id: ''
                        container_id: ''
                        name: ''
                        changelist_id: ''
                        created_by: ''
                        created_at: ''
      operationId: ListOntologyVersions
      description: Lists all versions of the ontology for a container.
  '/containers/{container_id}/ontology/versions/{version_id}':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: version_id
        in: path
        required: true
    get:
      summary: Retrieve Ontology Version
      tags:
        - Containers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  value:
                    type: object
                    properties:
                      id:
                        type: string
                      container_id:
                        type: string
                      name:
                        type: string
                      changelist_id:
                        type: string
                      created_by:
                        type: string
                      created_at:
                        type: string
                    required:
                      - id
                      - container_id
                      - name
                      - changelist_id
                      - created_by
                      - created_at
                required:
                  - value
                x-examples:
                  example-1:
                    value:
                      id: ''
                      container_id: ''
                      name: ''
                      changelist_id: ''
                      created_by: ''
                      created_at: ''
      operationId: RetrieveOntologyVersion
      description: Retreives details on a single ontology version.
  '/containers/{container_id}/ontology/versions/{version_id}/rollback':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: version_id
        in: path
        required: true
    post:
      tags:
        - Containers
      summary: Rollback Ontology Version
      operationId: RollbackOntologyVersion
      responses:
        '200':
          description: OK
      description: Rolls back the ontology to the selected version.
  '/containers/{container_id}/ontology/versions/{ontology_version_id}/approve':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: ontology_version_id
        in: path
        required: true
    post:
      tags:
        - Containers
      summary: Send Ontology Version for Approval
      operationId: SendOntologyVersionForApproval
      responses:
        '200':
          description: OK
      description: Sends an ontology version to be approved by a container admin
    delete:
      tags:
        - Containers
      summary: Reject Ontology Version Approval
      operationId: RejectOntologyVersionApproval
      responses:
        '200':
          description: OK
      description: Rejects an ontology version (either in a pending status or after it has been approved).
    put:
      tags:
        - Containers
      summary: Approve Ontology Version
      operationId: ApproveOntologyVersion
      responses:
        '200':
          description: OK
      description: Approves an ontology version
  '/containers/{container_id}/ontology/versions/{ontology_version_id}/publish':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: ontology_version_id
        in: path
        required: true
    post:
      tags:
        - Containers
      summary: Publish Ontology Version
      operationId: PublishOntologyVersion
      responses:
        '200':
          description: OK
      description: Publishes an ontology version
  '/containers/{container_id}/import/datasources/{data_source_id}/mappings/{mapping_id}/copy/{original_mapping_id}':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: data_source_id
        in: path
        required: true
      - schema:
          type: string
        name: mapping_id
        in: path
        required: true
      - schema:
          type: string
        name: original_mapping_id
        in: path
        required: true
    post:
      tags:
        - Data Type Mappings
      summary: ''
      operationId: CopyTransformations
      responses:
        '200':
          description: OK
      description: 'This endpoint copies transformations from the {original_mapping_id} type mapping (final parameter) to the {mapping_id} type mapping. This POST has NO body.'
  '/containers/{container_id}/import/datasources/{data_source_id}/files/{file_id}':
    parameters: []
    put:
      tags:
        - Imports
      summary: Update files
      operationId: put-containers-container_id-import-datasources-datasource_id-files-file_id
      responses:
        '200':
          description: OK
        '500':
          description: Internal Server Error
      description: Update a file
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
          description: Bearer token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file:
                  type: object
                metadata:
                  type: object
            examples: {}
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: object
                metadata:
                  type: string
              required:
                - file
            examples:
              example-1:
                value:
                  file: {}
          application/xml:
            schema:
              type: object
              properties: {}
        description: |-
          Key/value pair where the key is named 'file' and the file is any file.
          Optionally, any metadata can be added
      x-internal: false
    delete:
      tags:
        - Imports
      summary: Delete File
      description: Delete a file
      operationId: delete-file
      responses:
        '200':
          description: OK
  '/containers/{container_id}/graphs/tags':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
    post:
      tags:
        - Tags
      summary: Create Tag
      operationId: post-tags
      responses:
        '200':
          description: OK
      description: Create a Tag
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tag_name:
                  type: string
                metadata:
                  type: object
              example:
                tag_name: example tag
                metadata:
                  key1: value1
                  key2: value2
    get:
      tags:
        - Tags
      summary: List Tags
      description: List all tags for a container
      operationId: list-tags
      responses:
        '200':
          description: OK
  '/containers/{container_id}/graphs/tags/{tag_id}/nodes/{node_id}':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: node_id
        in: path
        required: true
      - schema:
          type: string
        name: tag_id
        in: path
        required: true
    put:
      tags:
        - Tags
      summary: Tag Node
      operationId: put-containers-container_id-graphs-tags-nodes-node_id
      responses:
        '200':
          description: OK
      description: Attach Tag to Node
    delete:
      tags:
        - Tags
      summary: Detach Tag From Node
      operationId: detach-tag-from-node
      responses:
        '200':
          description: OK
      description: Removes the connection between a tag and a node
  '/containers/{container_id}/graphs/tags/{tag_id}/edges/{edge_id}':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: edge_id
        in: path
        required: true
      - schema:
          type: string
        name: tag_id
        in: path
        required: true
    put:
      tags:
        - Tags
      summary: Tag Edge
      operationId: put-containers-container_id-graphs-tags-tag_id-edges-edge_id
      responses:
        '200':
          description: OK
      description: Tag an Edge
    delete:
      tags:
        - Tags
      summary: Detach Tag From Edge
      operationId: detach-tag-from-edge
      responses:
        '200':
          description: OK
      description: Removes the connection between a tag and an edge
  '/containers/{container_id}/graphs/tags/{tag_id}/files/{file_id}':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: file_id
        in: path
        required: true
      - schema:
          type: string
        name: tag_id
        in: path
        required: true
    put:
      tags:
        - Tags
      summary: Tag File
      operationId: put-containers-container_id-graphs-tags-tag_id-files-file_id
      responses:
        '200':
          description: OK
      description: Tag a File
    delete:
      tags:
        - Tags
      summary: Detach Tag From File
      operationId: detach-tag-from-file
      responses:
        '200':
          description: OK
      description: Removes the connection between a tag and a file
  '/containers/{container_id}/graphs/tags/nodes/{node_id}':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: node_id
        in: path
        required: true
    get:
      summary: List Tags for Node
      tags:
        - Tags
      responses:
        '200':
          description: OK
      operationId: get-containers-container_id-graphs-tags-nodes-node_id
      description: List all Tags on a Node
  '/containers/{container_id}/graphs/tags/files/{file_id}':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: file_id
        in: path
        required: true
    get:
      summary: List Tags for File
      tags:
        - Tags
      responses:
        '200':
          description: OK
      operationId: get-containers-container_id-graphs-tags-files-file_id
      description: List all Tags for a File
  '/containers/{container_id}/graphs/tags/edges/{edge_id}':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: edge_id
        in: path
        required: true
    get:
      summary: List Tags for Edge
      tags:
        - Tags
      responses:
        '200':
          description: OK
      operationId: get-containers-container_id-graphs-tags-edges-edge_id
      description: List all Tags for an Edge
  '/containers/{container_id}/graphs/tags/{tag_id}/nodes':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: tag_id
        in: path
        required: true
    get:
      summary: List Nodes with Tag
      tags:
        - Tags
      responses:
        '200':
          description: OK
      operationId: get-containers-container_id-graphs-tags-nodes-tag_id
      description: List all Nodes with a Tag
    put:
      summary: Bulk Add Tag to Nodes
      operationId: put-containers-container_id-graphs-tags-tag_id-nodes
      responses:
        '200':
          description: OK
      description: Add Tag to Multiple Nodes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                node_ids:
                  type: array
                  items:
                    type: string
              x-examples:
                Example 1:
                  node_ids:
                    - '123'
                    - '456'
                    - '789'
            examples:
              Example 1:
                value:
                  node_ids:
                    - '123'
                    - '456'
                    - '789'
    delete:
      summary: Bulk Detach Tag from Nodes
      operationId: delete-containers-container_id-graphs-tags-tag_id-nodes
      responses:
        '200':
          description: OK
      description: Detach Tag from Multiple Nodes
  '/containers/{container_id}/graphs/tags/{tag_id}/files':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: tag_id
        in: path
        required: true
    get:
      summary: List Files with Tag
      tags:
        - Tags
      responses:
        '200':
          description: OK
      operationId: get-containers-container_id-graphs-tags-tag_id-files
      description: List all Files with Tag
  '/containers/{container_id}/graphs/tags/{tag_id}/edges':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: tag_id
        in: path
        required: true
    get:
      summary: List Edges with Tag
      tags:
        - Tags
      responses:
        '200':
          description: OK
      operationId: get-containers-container_id-graphs-tags-tag_id-edges
      description: List all Edges with Tag
    put:
      summary: Bulk Add Tag to Edge
      operationId: put-containers-container_id-graphs-tags-tag_id-edges
      responses:
        '200':
          description: OK
      description: Add Tag to Multiple Edges
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                edge_ids:
                  type: array
                  items:
                    type: string
              x-examples:
                Example 1:
                  edge_ids:
                    - '123'
                    - '456'
                    - '789'
            examples:
              Example 1:
                value:
                  edge_ids:
                    - '123'
                    - '456'
                    - '789'
    delete:
      summary: Bulk Detach Tag from Edges
      operationId: delete-containers-container_id-graphs-tags-tag_id-edges
      responses:
        '200':
          description: OK
      description: Detach Tag from Multiple Edges
  '/containers/{container_id}/graphs/tags/{tag_id}':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: tag_id
        in: path
        required: true
    put:
      tags:
        - Tags
      summary: Update Tag
      operationId: put-containers-container_id-graphs-tags-tag_id
      responses:
        '200':
          description: OK
      description: Update a tag
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tag_name:
                  type: string
                metadata:
                  type: object
        description: ''
  '/containers/{container_id}/graphs/webgl':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
    post:
      tags:
        - Tags
      summary: Upload WebGL
      operationId: upload-webgl
      responses:
        '200':
          description: OK
      description: 'Upload a WebGL build. The tag will be created if it doesn''t exist, and the file will be uploaded. The tag is then associated with the file. The tag will automatically have {''webgl'': true} added to its metadata field'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: object
        description: ''
      parameters:
        - schema:
            type: string
          in: query
          name: tag
          description: Tag name
    get:
      tags:
        - Tags
      summary: List WebGL
      operationId: list-webgl
      responses:
        '200':
          description: OK
      description: Lists all WebGL files and tags for a container.
  '/containers/{container_id}/graphs/webgl/files/{file_id}':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: file_id
        in: path
        required: true
    get:
      tags:
        - Tags
      summary: Update WebGL Files
      operationId: update-webgl-files
      responses:
        '200':
          description: OK
      description: Updates WebGL files.
    delete:
      tags:
        - Tags
      summary: Delete WebGL File
      operationId: delete-webgl-file
      responses:
        '200':
          description: OK
      description: Deletes a WebGL file.
  '/containers/{container_id}/service-users/keys':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
    get:
      summary: List Service User Keys for Container
      tags:
        - Users
        - Authentication
      operationId: list-service-keys-for-container
      description: Used to list all service-user keys in a container. Useful for obtaining keys in a container with a certain note to verify an application has ben authorized for a container.
      parameters:
        - schema:
            type: string
          in: query
          name: note
          description: note with which keypair was created
      responses:
        '200':
          description: A list of service user keys for the container.
          content:
            application/json:
              schema:
                type: object
                properties:
                  value:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                          description: The unique identifier for the service user key.
                        secret_raw:
                          type: string
                          description: 'The secret part of the service user key, in raw form.'
                        user_id:
                          type: string
                          description: The identifier of the user associated with this key.
                        note:
                          type: string
                          description: 'A note associated with the key, possibly indicating its purpose or the application it authorizes.'
                  isError:
                    type: boolean
                    description: Indicates if the operation resulted in an error.
        '400':
          description: Bad request. The request was invalid.
        '404':
          description: Not found. The specified container does not exist.
  '/containers/{container_id}/graphs/nodes/edges':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
    post:
      summary: List Edges for Node IDs
      tags:
        - Graph
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEdgesForNodeIDsResponse'
      operationId: ListEdgesForNodeIDs
      description: Takes an array of node IDs and returns the given edges for those nodes
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                node_ids:
                  type: array
                  items:
                    type: string
              x-examples:
                Example 1:
                  node_ids:
                    - '1'
                    - '2'
                    - '3'
                    - '4'
                    - '5'
            examples:
              Example 1:
                value:
                  node_ids:
                    - '1'
                    - '2'
                    - '3'
                    - '4'
                    - '5'
  '/containers/{container_id}/import/datasources/{data_source_id}/files/timeseries':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: data_source_id
        in: path
        required: true
    post:
      summary: Upload Timeseries File
      tags:
        - File
        - TimeSeries
      responses: {}
      operationId: post-containers-container_id-import-datasources-data_source_id-files-timeseries
      description: Uploads a file and it's metadata to DeepLynx. Marks the file as "timeseries" so it can be processed by the TS2 rust module.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
        description: This should be a collection of files.
  '/containers/{container_id}/files/timeseries/describe':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
    post:
      summary: Add File Description
      operationId: post-containers-container_id-reports-report_id-files-file_id-description
      responses:
        '200':
          description: OK
      description: Upload file description (schema)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file_id:
                  type: string
                column_info:
                  type: array
                  items:
                    type: object
                    properties:
                      column_name:
                        type: string
                      data_type:
                        type: string
              x-examples:
                Example 1:
                  file_id: '6'
                  column_info:
                    - column_name: greg
                      data_type: string
                    - column_name: fred
                      data_type: boolean
  '/containers/{container_id}/files/timeseries/{file_id}/description':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: file_id
        in: path
        required: true
    get:
      summary: Get File Description
      tags:
        - File
        - TimeSeries
        - Report
      responses: {}
      operationId: get-containers-container_id-reports-report_id-files-file_id-description
      description: Retrieve the file description (schema) for a given report file
  '/containers/{container_id}/reports/query':
    post:
      summary: Query Timeseries
      tags:
        - Report
      responses: {}
      operationId: post-containers-container_id-reports-query
      description: Send a either a describe or a user-provided query to the TS2 rust module for processing.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                file_ids:
                  type: array
                  items:
                    type: string
              x-examples:
                Example 1:
                  query: <string>
                  file_ids:
                    - <string>
                    - <string>
  '/containers/{container_id}/reports/{report_id}/status':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: report_id
        in: path
        required: true
    get:
      summary: Report Status
      tags:
        - Report
      responses: {}
      operationId: get-containers-container_id-reports-report_id-status
      description: Check the status for a given report
  '/containers/{container_id}/reports/{report_id}/query/{report_query_id}':
    parameters:
      - schema:
          type: string
        name: container_id
        in: path
        required: true
      - schema:
          type: string
        name: report_id
        in: path
        required: true
      - schema:
          type: string
        name: report_query_id
        in: path
        required: true
    post:
      summary: Upload Timeseries Results
      tags: []
      responses: {}
      operationId: post-containers-container_id-reports-report_id-query-report_query_id
      description: |-
        Endpoint for the TS2 rust module to upload file results. TS2 will already have uploaded the data to the
        appropriate storage provider, so we just need to attach the file metadata to the report.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                file_name:
                  type: string
                file_size:
                  type: number
                adapter_file_path:
                  type: string
                adapter:
                  type: string
              x-examples:
                Example 1:
                  file_name: greg.json
                  file_size: 0.141
                  adapter_file_path: /trees/greg
                  adapter: filesystem
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    ListContainerResponse:
      description: ''
      type: object
      x-examples:
        ContainerResponseExample:
          value:
            - name: Test Container 4
              description: Test Container Description
              id: 07b1e35e-0a7c-476d-ada8-5906b16da1b8
              archived: false
              created_at: '2021-08-06T21:17:49.545Z'
              modified_at: '2021-08-06T21:17:49.545Z'
              created_by: fa3c2cc0-2c4e-441c-aa78-cf77f8af8cd1
              modified_by: fa3c2cc0-2c4e-441c-aa78-cf77f8af8cd1
              config: null
              active_graph_id: 0cc62f41-ceaa-4a68-8f1c-7856525c2668
          isError: false
      properties:
        value:
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/Container'
        isError:
          type: boolean
    CreateContainerResponse:
      description: ''
      type: object
      x-examples:
        ContainerResponseExample:
          value:
            - name: Test Container 4
              description: Test Container Description
              id: 07b1e35e-0a7c-476d-ada8-5906b16da1b8
              archived: false
              created_at: '2021-08-06T21:17:49.545Z'
              modified_at: '2021-08-06T21:17:49.545Z'
              created_by: fa3c2cc0-2c4e-441c-aa78-cf77f8af8cd1
              modified_by: fa3c2cc0-2c4e-441c-aa78-cf77f8af8cd1
              config: null
              active_graph_id: 0cc62f41-ceaa-4a68-8f1c-7856525c2668
          isError: false
      properties:
        value:
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/Container'
        isError:
          type: boolean
    BatchUpdateContainerResponse:
      description: ''
      type: object
      x-examples:
        ContainerResponseExample:
          value:
            - name: Test Container 4
              description: Test Container Description
              id: 07b1e35e-0a7c-476d-ada8-5906b16da1b8
              archived: false
              created_at: '2021-08-06T21:17:49.545Z'
              modified_at: '2021-08-06T21:17:49.545Z'
              created_by: fa3c2cc0-2c4e-441c-aa78-cf77f8af8cd1
              modified_by: fa3c2cc0-2c4e-441c-aa78-cf77f8af8cd1
              config: null
              active_graph_id: 0cc62f41-ceaa-4a68-8f1c-7856525c2668
          isError: false
      properties:
        value:
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/Container'
        isError:
          type: boolean
    GetContainerResponse:
      description: ''
      type: object
      x-examples:
        ContainerResponseExample:
          value:
            - name: Test Container 4
              description: Test Container Description
              id: 07b1e35e-0a7c-476d-ada8-5906b16da1b8
              archived: false
              created_at: '2021-08-06T21:17:49.545Z'
              modified_at: '2021-08-06T21:17:49.545Z'
              created_by: fa3c2cc0-2c4e-441c-aa78-cf77f8af8cd1
              modified_by: fa3c2cc0-2c4e-441c-aa78-cf77f8af8cd1
              config: null
              active_graph_id: 0cc62f41-ceaa-4a68-8f1c-7856525c2668
          isError: false
      properties:
        value:
          $ref: '#/components/schemas/Container'
        isError:
          type: boolean
    UpdateContainerResponse:
      description: ''
      type: object
      x-examples:
        ContainerResponseExample:
          value:
            - name: Test Container 4
              description: Test Container Description
              id: 07b1e35e-0a7c-476d-ada8-5906b16da1b8
              archived: false
              created_at: '2021-08-06T21:17:49.545Z'
              modified_at: '2021-08-06T21:17:49.545Z'
              created_by: fa3c2cc0-2c4e-441c-aa78-cf77f8af8cd1
              modified_by: fa3c2cc0-2c4e-441c-aa78-cf77f8af8cd1
              config: null
              active_graph_id: 0cc62f41-ceaa-4a68-8f1c-7856525c2668
          isError: false
      properties:
        value:
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/Container'
        isError:
          type: boolean
    ContainerImportResponse:
      description: ''
      type: object
      x-examples:
        example-1:
          value: 35bfbf46-5b50-49f5-a325-e5f03f43c3aa
          isError: false
      properties:
        value:
          type: string
          minLength: 1
        isError:
          type: boolean
    ContainerImportUpdateResponse:
      description: ''
      type: object
      x-examples:
        example-1:
          value: 35bfbf46-5b50-49f5-a325-e5f03f43c3aa
          isError: false
      properties:
        value:
          type: string
          minLength: 1
        isError:
          type: boolean
    ListNodesResponse:
      title: ListNodesResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        isError:
          type: boolean
    GetNodeResponse:
      title: GetNodeResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Node'
        isError:
          type: boolean
    ListNodesByMetatypeResponse:
      title: ListNodesResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/Node'
        isError:
          type: boolean
    ListNodeFiles:
      title: ListNodeFiles
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/FileInfo'
        isError:
          type: boolean
    ListEdgesResponse:
      title: ListEdgesResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/Edge'
        isError:
          type: boolean
    ListEdgesForNodeIDsResponse:
      title: ListEdgesForNodeIDsResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/Edge'
        isError:
          type: boolean
    GetEdgeResponse:
      title: GetEdgeResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Edge'
        isError:
          type: boolean
    ListEdgeFiles:
      title: ListEdgeFiles
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/FileInfo'
        isError:
          type: boolean
    ListMetatypesResponse:
      title: ListMetatypesResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/Metatype'
        isError:
          type: boolean
    CreateMetatypesResponse:
      title: CreateMetatypesResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/Metatype'
        isError:
          type: boolean
    GetMetatypeResponse:
      title: GetMetatypeResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Metatype'
        isError:
          type: boolean
    UpdateMetatypeResponse:
      title: UpdateMetatypeResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Metatype'
        isError:
          type: boolean
    ValidateMetatypePropertiesResponse:
      title: ValidateMetatypePropertiesResponse
      type: object
      properties:
        value:
          type: object
        isError:
          type: boolean
    ListMetatypeKeysResponse:
      title: ListMetatypeKeysResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/MetatypeKey'
        isError:
          type: boolean
    CreateMetatypeKeysResponse:
      title: CreateMetatypeKeysResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/MetatypeKey'
        isError:
          type: boolean
    GetMetatypeKeyResponse:
      title: GetMetatypeKeyResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/MetatypeKey'
        isError:
          type: boolean
    UpdateMetatypeKeyResponse:
      title: UpdateMetatypeKeyResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/MetatypeKey'
        isError:
          type: boolean
    ListMetatypeRelationshipsResponse:
      title: ListMetatypeRelationshipsResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/MetatypeRelationship'
        isError:
          type: boolean
    CreateMetatypeRelationshipsResponse:
      title: CreateMetatypeRelationshipsResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/MetatypeRelationship'
        isError:
          type: boolean
    GetMetatypeRelationshipResponse:
      title: GetMetatypeRelationshipResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/MetatypeRelationship'
        isError:
          type: boolean
    UpdateMetatypeRelationshipResponse:
      title: UpdateMetatypeRelationshipResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/MetatypeRelationship'
        isError:
          type: boolean
    ListMetatypeRelationshipKeysResponse:
      title: ListMetatypeRelationshipKeysResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/RelationshipKey'
        isError:
          type: boolean
    CreateMetatypeRelationshipKeysResponse:
      title: CreateMetatypeRelationshipKeysResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/RelationshipKey'
        isError:
          type: boolean
    GetMetatypeRelationshipKeyResponse:
      title: GetMetatypeRelationshipKeyResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/RelationshipKey'
        isError:
          type: boolean
    UpdateMetatypeRelationshipKeyResponse:
      title: UpdateMetatypeRelationshipKeyResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/RelationshipKey'
        isError:
          type: boolean
    ListMetatypeRelationshipPairsResponse:
      title: ListMetatypeRelationshipPairsResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/RelationshipPair'
        isError:
          type: boolean
    CreateMetatypeRelationshipPairsResponse:
      title: CreateMetatypeRelationshipPairsResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/RelationshipPair'
        isError:
          type: boolean
    GetMetatypeRelationshipPairResponse:
      title: GetMetatypeRelationshipPairResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/RelationshipPair'
        isError:
          type: boolean
    UpdateMetatypeRelationshipPairResponse:
      title: UpdateMetatypeRelationshipPairResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/RelationshipPair'
        isError:
          type: boolean
    ListDataSourcesResponse:
      title: ListDataSourcesResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/DataSource'
        isError:
          type: boolean
    ListDataTargetsResponse:
      title: ListDataTargetsResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/DataTarget'
        isError:
          type: boolean
    CreateDataSourcesResponse:
      title: CreateDataSourcesResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/DataSource'
        isError:
          type: boolean
    CreateDataTargetsResponse:
      title: CreateDataTargetsResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/DataTarget'
        isError:
          type: boolean
      x-examples:
        example-1:
          value:
            adapter_type: string
            status: string
            active: true
            config:
              kind: string
              data_type: string
              data_format: string
            id: string
            container_id: string
            name: string
            data_format: string
            created_at: string
            modified_at: string
            created_by: string
            modified_by: string
            archived: true
            status_message: string
          isError: true
    GetDataSourceResponse:
      title: GetDataSourceResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/DataSource'
        isError:
          type: boolean
    GetDataTargetResponse:
      title: GetDataTargetResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/DataTarget'
        isError:
          type: boolean
    UpdateDataSourceResponse:
      title: UpdateDataSourceResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/DataSource'
        isError:
          type: boolean
    UpdateDataTargetResponse:
      title: UpdateDataTargetResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/DataTarget'
        isError:
          type: boolean
    ListDataSourceImportsResponse:
      title: ListDataSourceImportsResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/DataSourceImport'
        isError:
          type: boolean
    CreateManualImportResponse:
      title: CreateManualImportResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/CreateManualImport'
        isError:
          type: boolean
    UploadFileResponse:
      oneOf:
        - properties:
            value:
              $ref: '#/components/schemas/FileModel'
            isError:
              type: boolean
        - properties:
            isError:
              type: boolean
            value:
              type: array
              items:
                type: object
                properties:
                  value:
                    $ref: '#/components/schemas/FileInfo'
                  isError:
                    type: boolean
      type: object
    GetFileInfoResponse:
      title: GetFileInfoResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/FileInfo'
        isError:
          type: boolean
    GetDataExportResponse:
      title: GetDataExportResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Exporter'
        isError:
          type: boolean
    ListDataExportsResponse:
      title: ListDataExportsResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/Exporter'
        isError:
          type: boolean
    GetUserResponse:
      title: GetUserResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/User'
        isError:
          type: boolean
    ListUsersResponse:
      title: ListUsersResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/User'
        isError:
          type: boolean
    ListUserInvitesResponse:
      title: ListUserInvitesResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/ContainerInvite'
        isError:
          type: boolean
    ListUserPermissionsResponse:
      title: ListUserPermissionsResponse
      type: object
      properties:
        value:
          type: array
          items:
            type: string
        isError:
          type: boolean
    ListUsersForContainerResponse:
      title: ListUsersForContainerResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/User'
        isError:
          type: boolean
    ListUserRoles:
      title: ListUserRoles
      type: object
      properties:
        value:
          type: array
          items:
            type: string
        isError:
          type: boolean
    ListContainerInvitesResponse:
      title: ListContainerInvitesResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/ContainerInvite'
        isError:
          type: boolean
    ListDataTypeMappingResponse:
      title: ListDataTypeMappingResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/TypeMapping'
        isError:
          type: boolean
    GetDataTypeMappingResponse:
      title: GetDataTypeMappingResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/TypeMapping'
        isError:
          type: boolean
    UpdateDataTypeMappingResponse:
      title: UpdateDataTypeMappingResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/TypeMapping'
        isError:
          type: boolean
    ImportDataTypeMappingResponse:
      title: ImportDataTypeMappingResponse
      type: array
      items:
        type: object
        properties:
          value:
            $ref: '#/components/schemas/TypeMapping'
          isError:
            type: boolean
    ListTransformationResponse:
      title: ListTransformationResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/Transformation'
        isError:
          type: boolean
    CreateTransformationResponse:
      title: CreateTransformationResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Transformation'
        isError:
          type: boolean
    UpdateTransformationResponse:
      title: UpdateTransformationResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Transformation'
        isError:
          type: boolean
    ListImportDataResponse:
      title: ListImportDataResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/ImportModel'
        isError:
          type: boolean
    GetImportDataResponse:
      title: GetImportDataResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/ImportModel'
        isError:
          type: boolean
    UpdateImportDataResponse:
      title: UpdateImportDataResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/ImportModel'
        isError:
          type: boolean
    CreateImportResponse:
      title: CreateImportResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/CreateManualImport'
        isError:
          type: boolean
    AddDataToImportResponse:
      title: AddDataToImportResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/CreateManualImport'
        isError:
          type: boolean
    CreateEventResponse:
      title: CreateEventResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Event'
        isError:
          type: boolean
    Generic200Response:
      title: Generic200Response
      description: ''
      type: object
      properties:
        value:
          type: boolean
        isError:
          type: boolean
      required:
        - value
        - isError
      x-examples:
        Generic200Response:
          value:
            value: true
            isError: false
          isError: false
    ErrorResponse:
      title: ErrorResponse
      description: ''
      type: object
      x-examples: {}
      properties:
        isError:
          type: boolean
        error:
          $ref: '#/components/schemas/ErrorModel'
      required:
        - isError
        - error
    CreateContainerRequest:
      title: CreateContainerRequest
      type: object
      example:
        name: Test Container
        description: Test Container Description
      properties:
        name:
          type: string
        description:
          type: string
        archived:
          type: boolean
        config:
          $ref: '#/components/schemas/ContainerConfig'
      required:
        - name
    UpdateContainerRequest:
      title: UpdateContainerRequest
      type: object
      example:
        name: Test Container
        description: Final Test Description
        config:
          data_versioning_enabled: false
      properties:
        name:
          type: string
        description:
          type: string
        config:
          type: object
          nullable: true
          properties:
            data_versioning_enabled:
              type: boolean
      required:
        - name
      x-examples:
        ContainerUpdateExample:
          value:
            name: Test Container
            description: Final Test Description
            config:
              data_versioning_enabled: false
    BatchContainerUpdateRequest:
      type: array
      title: BatchContainerUpdateRequest
      description: ''
      minItems: 1
      uniqueItems: false
      x-examples:
        example-1:
          - name: Test Container
            description: Test Container New Description
            id: ''
      items:
        type: object
        properties:
          name:
            type: string
          description:
            type: string
          id:
            type: string
    CreateOrUpdateNodesRequest:
      title: CreateOrUpdateNodesRequest
      type: object
      example:
        container_id: required
        id: optional - but required to update the node from this endpoint
        original_data_id: optional
        data_source_id: required
        data_type_mapping_id: optional
        metatype_id: required
        modified_at: optional - set to update node along with the id to update if it exists
        properties: {}
      x-examples:
        example-1:
          container_id: required
          id: optional - including this field will attempt to update a node with this id
          original_data_id: 'optional - including this field will attempt to update a node with the same composite id (data source id + metatype id + original data id) if it exists, if not it will create it'
          data_source_id: required
          metatype_id: required
          properties: {}
      properties:
        id:
          type: string
          description: ''
        container_id:
          type: string
        original_data_id:
          type: string
          description: 'Passing in just the original data id will attempt to update a node with the same composite id (data source id, metatype id, and original data id).'
        data_source_id:
          type: string
        metatype_id:
          type: string
        properties:
          type: object
      required:
        - container_id
        - data_source_id
        - metatype_id
    CreateOrUpdateEdgesRequest:
      title: CreateOrUpdateEdgesRequest
      type: object
      example:
        container_id: required
        data_source_id: required
        origin_id: required (if origin_original_id not set)
        destination_id: required (if destination_original_id not set)
        origin_original_id: create edge based on composite id of node ( data source id + metatype id + original id of node)
        origin_metatype_id: required if using original id for edge creation
        origin_data_source_id: required if using original id for edge creation
        destination_original_id: create edge based on composite id of node (data source id + metatype id +  original id of node)D
        destination_metatype_id: required if using original id for edge creation
        destination_data_source_id: required if using original id for edge creation
        relationship_pair_id: required
        modified_at: will attempt to update edge if exists
        properties: {}
      x-examples:
        example-1:
          container_id: required
          data_source_id: required
          origin_id: required (if origin_original_id not set)
          destination_id: required (if destination_original_id not set)
          origin_original_id: create edge based on composite id of node ( data source id + metatype id + original id of node)
          origin_metatype_id: required if using original id for edge creation
          origin_data_source_id: required if using original id for edge creation
          destination_original_id: create edge based on composite id of node (data source id + metatype id +  original id of node)D
          destination_metatype_id: required if using original id for edge creation
          destination_data_source_id: required if using original id for edge creation
          relationship_pair_id: required
          properties: {}
      properties:
        container_id:
          type: string
        data_source_id:
          type: string
        origin_id:
          type: string
        destination_id:
          type: string
        origin_original_id:
          type: string
        destination_original_id:
          type: string
        relationship_pair_id:
          type: string
        origin_data_source_id:
          type: string
        destination_data_source_id:
          type: string
        destination_metatype_id:
          type: string
        origin_metatype_id:
          type: string
        properties:
          type: object
      required:
        - container_id
        - data_source_id
        - origin_id
        - destination_id
        - relationship_pair_id
    CreateMetatypeRequest:
      title: CreateMetatypeRequest
      required:
        - description
        - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      example:
        name: Equipment
        description: Physical piece of equipement
    UpdateMetatypeRequest:
      title: UpdateMetatypeRequest
      required:
        - description
        - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      example:
        name: Updated Metatype Name
        description: Final Description
    CreateMetatypeKeyRequest:
      title: CreateMetatypeKeyRequest
      type: object
      properties:
        name:
          type: string
        required:
          type: boolean
        property_name:
          type: string
        description:
          type: string
        data_type:
          type: string
        cardinality:
          type: integer
          format: int32
        validation:
          $ref: '#/components/schemas/KeyValidation'
        unique:
          type: boolean
        options:
          type: array
          items:
            type: string
        defaultValue:
          type: string
        metatype_id:
          type: string
      required:
        - name
        - description
        - metatype_id
    KeyValidation:
      title: KeyValidation
      type: object
      example:
        regex: ''
        min: 0
        max: 0
      properties:
        regex:
          type: string
        min:
          type: integer
          format: int32
        max:
          type: integer
          format: int32
    CreateMetatypeRelationshipRequest:
      title: CreateMetatypeRelationshipRequest
      required:
        - description
        - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      example:
        name: Relationship Name
        description: Relationship Description
      x-examples:
        example-1:
          name: Relationship Name
          description: Relationship Description
    UpdateMetatypeRelationshipRequest:
      title: UpdateMetatypeRelationshipRequest
      required:
        - description
        - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      example:
        name: Update Test
        description: Final Test Description
      x-examples:
        example-1:
          name: Update Test
          description: Final Test Description
    CreateMetatypeRelationshipKeyRequest:
      title: CreateMetatypeRelationshipKeyRequest
      type: object
      example:
        name: File Name
        required: true
        property_name: fileName
        description: File Upload Name
        data_type: string
        cardinality: 1
        validation:
          regex: ''
          min: 0
          max: 0
        unique: true
        options:
          - ''
        defaultValue: can be any type
      properties:
        name:
          type: string
        required:
          type: boolean
        property_name:
          type: string
        description:
          type: string
        data_type:
          type: string
        cardinality:
          type: integer
          format: int32
        validation:
          $ref: '#/components/schemas/KeyValidation'
        unique:
          type: boolean
        options:
          type: array
          items:
            type: string
        defaultValue:
          type: string
      required:
        - name
        - description
        - data_type
    CreateMetatypeRelationshipPairRequest:
      title: CreateMetatypeRelationshipPairRequest
      required:
        - description
        - destination_metatype_id
        - name
        - origin_metatype_id
        - relationship_id
        - relationship_type
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        origin_metatype_id:
          type: string
        destination_metatype_id:
          type: string
        relationship_id:
          type: string
        relationship_type:
          type: string
      example:
        name: Relationship Pair Test
        description: Relationship Pair Test description
        origin_metatype_id: 566e3862-6853-45af-8a45-3050576dfb9a
        destination_metatype_id: 8bcc0b06-bb44-4176-a581-aa68eafca7f3
        relationship_id: 885e3fca-5066-4be8-a720-63b3c4744e97
        relationship_type: 'many:many'
    CreateDataSourceRequest:
      title: CreateDataSourceRequest
      type: object
      example:
        name: testing data source
        adapter_type: http OR manual
        active: true
        config:
          endpoint: ''
          auth_method: basic
          username: test
          password: test
      properties:
        name:
          type: string
        adapter_type:
          type: string
        active:
          type: boolean
        config:
          $ref: '#/components/schemas/CreateDataSourceConfig'
      required:
        - name
      x-examples: {}
    CreateDataTargetRequest:
      title: CreateDataTargetRequest
      type: object
      example:
        name: testing data source
        adapter_type: http OR manual
        active: true
        config:
          endpoint: ''
          auth_method: basic
          username: test
          password: test
      properties:
        name:
          type: string
        adapter_type:
          type: string
        active:
          type: boolean
        config:
          $ref: '#/components/schemas/CreateDataTargetConfig'
      required:
        - name
      x-examples:
        example-1:
          name: testing data target
          adapter_type: http OR standard
          active: true
          config:
            endpoint: ''
            auth_method: basic
            username: test
            password: test
            grapgql_query: '{ __type(name: "Requirement"){ name fields{ name } } }'
    CreateDataSourceConfig:
      title: CreateDataSourceConfig
      type: object
      example:
        endpoint: ''
        auth_method: basic
        username: test
        password: test
      properties:
        endpoint:
          type: string
        auth_method:
          type: string
        username:
          type: string
        password:
          type: string
    CreateDataTargetConfig:
      title: CreateDataTargetConfig
      type: object
      example:
        endpoint: ''
        auth_method: basic
        username: test
        password: test
      properties:
        endpoint:
          type: string
        auth_method:
          type: string
        username:
          type: string
        password:
          type: string
        graphql_query:
          type: string
      x-examples:
        example-1:
          endpoint: ''
          auth_method: basic
          username: test
          password: test
          grapgql_query: '{ __type(name: "Requirement"){ name fields{ name } } }'
    CreateDataExportRequest:
      title: CreateDataExportRequest
      required:
        - adapter
        - config
      type: object
      properties:
        adapter:
          type: string
        config:
          $ref: '#/components/schemas/DataExportConfig'
      example:
        adapter: gremlin
        config:
          traversal_source: g
          graphson_v1: false
          user: ''
          key: ''
          endpoint: localhost
          port: '8182'
          path: /gremlin
          writes_per_second: 300
    DataExportConfig:
      title: DataExportConfig
      required:
        - endpoint
        - graphson_v1
        - key
        - path
        - port
        - traversal_source
        - user
        - writes_per_second
      type: object
      properties:
        traversal_source:
          type: string
        graphson_v1:
          type: boolean
        user:
          type: string
        key:
          type: string
        endpoint:
          type: string
        port:
          type: string
        path:
          type: string
        writes_per_second:
          type: integer
          format: int32
      example:
        traversal_source: g
        graphson_v1: false
        user: ''
        key: ''
        endpoint: localhost
        port: '8182'
        path: /gremlin
        writes_per_second: 300
    AssignRoleRequest:
      title: AssignRoleRequest
      required:
        - container_id
        - role_name
        - user_id
      type: object
      properties:
        user_id:
          type: string
        container_id:
          type: string
        role_name:
          type: string
      example:
        user_id: fb127f5f-0318-4866-9570-10ec81a85cc2
        container_id: 2a49dc7b-cf56-4e03-85e7-14ac8f0e4b40
        role_name: admin
    CreateTypeMappingTransformationsRequest:
      title: CreateTypeMappingTransformationsRequest
      type: object
      example:
        metatype_id: ''
        conditions:
          - key: RADIUS
            operator: eq
            value: CIRCLE
        keys:
          - key: RADIUS
            metatype_key_id: Example
      properties:
        metatype_id:
          type: string
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/TransformationCondition'
        keys:
          type: array
          items:
            $ref: '#/components/schemas/TransformationKey'
      required:
        - metatype_id
        - conditions
        - keys
    TransformationCondition:
      title: TransformationCondition
      required:
        - key
        - operator
        - value
      type: object
      properties:
        key:
          type: string
        operator:
          type: string
        value:
          type: string
      example:
        key: RADIUS
        operator: eq
        value: CIRCLE
    ContainerImportRequest:
      title: ContainerImportRequest
      description: ''
      type: object
      x-examples:
        example-1:
          name: string
          description: string
          data_versioning_enabled: true
          path: string
          file: string
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        data_versioning_enabled:
          type: boolean
        path:
          type: string
          minLength: 1
        file:
          type: string
          format: binary
          minLength: 1
      required:
        - name
        - description
        - data_versioning_enabled
    TokenExchangeRequest:
      title: TokenExchangeRequest
      type: object
      properties:
        client_id:
          type: string
        code:
          type: string
        grant_type:
          type: string
        redirect_uri:
          type: string
        client_secret:
          type: string
        code_verifier:
          type: string
    Node:
      description: ''
      type: object
      x-examples:
        example-1:
          properties: {}
          id: c9e8aef5-d13e-49af-b1af-d840e51c6689
          container_id: d3cd0199-6511-4c0d-b634-efeff989a8f6
          metatype:
            name: ''
            description: ''
            id: 4983eb3a-7cae-4cc0-a62f-07ea863be646
          metatype_name: Example
          graph_id: c29870ad-479b-432b-a88a-093b4d85b58a
          archived: false
          created_at: '2021-08-10T15:05:08.393Z'
          modified_at: null
          original_data_id: 9c230bc3-a0b8-48ad-b7bf-11065efd7c60
          data_source_id: f02494db-2210-4d78-ae43-3e3abbdad0e1
          deleted_at: null
          data_staging_id: 19
          import_data_id: e475010f-7afa-4027-9488-e159dff33c7f
          type_mapping_transformation_id: ea4e36af-805a-4b32-b299-ed223d9b2f22
          composite_original_id: d3cd0199-6511-4c0d-b634-efeff989a8f6+f02494db-2210-4d78-ae43-3e3abbdad0e1
          created_by: 16fa1d29-a13f-4783-b56d-cdf9c4946cb4
          modified_by: 16fa1d29-a13f-4783-b56d-cdf9c4946cb4
          value:
            properties: {}
            id: c9e8aef5-d13e-49af-b1af-d840e51c6689
            container_id: d3cd0199-6511-4c0d-b634-efeff989a8f6
            metatype:
              name: ''
              description: ''
              id: 4983eb3a-7cae-4cc0-a62f-07ea863be646
            metatype_name: Example
            graph_id: c29870ad-479b-432b-a88a-093b4d85b58a
            archived: false
            created_at: '2021-08-10T15:05:08.393Z'
            modified_at: null
            original_data_id: bc3-a0b8-48ad-b7bf-11065efd7c60
            data_source_id: f02494db-2210-4d78-ae43-3e3abbdad0e1
            deleted_at: null
            data_staging_id: 19
            import_data_id: e475010f-7afa-4027-9488-e159dff33c7f
            type_mapping_transformation_id: ea4e36af-805a-4b32-b299-ed223d9b2f22
            composite_original_id: d3cd0199-6511-4c0d-b634-efeff989a8f6+f02494db-2210-4d7
            created_by: 16fa1d29-a13f-4783-b56d-cdf9c4946cb4
            modified_by: 16fa1d29-a13f-4783-b56d-cdf9c4946cb4
      properties:
        id:
          type: string
          minLength: 1
        container_id:
          type: string
          minLength: 1
        metatype_id:
          type: string
        metatype:
          $ref: '#/components/schemas/NodeMetatypeBody'
        metatype_name:
          type: string
          minLength: 1
        data_source_id:
          type: string
          minLength: 1
        import_data_id:
          type: string
          minLength: 1
        data_staging_id:
          type: number
        type_mapping_transformation_id:
          type: string
          minLength: 1
        original_data_id:
          type: string
          minLength: 1
        properties:
          type: object
        metadata:
          type: object
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          nullable: true
        deleted_at:
          type: string
          nullable: true
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
    NodeMetatypeBody:
      title: NodeMetatypeBody
      type: object
      required:
        - name
        - description
        - id
      properties:
        name:
          type: string
        description:
          type: string
        id:
          type: string
          minLength: 1
    Edge:
      description: ''
      type: object
      x-examples: {}
      title: ''
      properties:
        id:
          type: string
          minLength: 1
        container_id:
          type: string
          minLength: 1
        relationship_pair_id:
          type: string
          minLength: 1
        data_source_id:
          type: string
          minLength: 1
        import_data_id:
          type: string
          minLength: 1
        data_staging_id:
          type: string
        type_mapping_transformation_id:
          type: string
          minLength: 1
        origin_id:
          type: string
        destination_id:
          type: string
        origin_original_id:
          type: string
          minLength: 1
        origin_data_source_id:
          type: string
          minLength: 1
        origin_metatype_id:
          type: string
        destination_original_id:
          type: string
          minLength: 1
        destination_data_source_id:
          type: string
          minLength: 1
        destination_metatype_id:
          type: string
        destination_node_id:
          type: string
          minLength: 1
        properties:
          type: object
        metadata:
          type: object
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          nullable: true
        deleted_at:
          type: string
          nullable: true
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
    Metatype:
      description: ''
      type: object
      x-examples:
        example-1:
          name: Entity
          description: An entity is anything that exists or has existed or will exist
          container_id: d3cd0199-6511-4c0d-b634-efeff989a8f6
          id: aaa5baa4-59ef-4e48-a111-b96ca2a4d2bc
          archived: false
          created_at: '2021-08-09T18:39:17.604Z'
          modified_at: '2021-08-12T22:03:02.830Z'
          created_by: 16fa1d29-a13f-4783-b56d-cdf9c4946cb4
          modified_by: 6a005d8f-1026-4497-9ba9-2db413bf3119
          keys: []
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        container_id:
          type: string
          minLength: 1
        id:
          type: string
          minLength: 1
        archived:
          type: boolean
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          minLength: 1
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
        keys:
          type: array
          items:
            $ref: '#/components/schemas/MetatypeKey'
      required:
        - name
        - description
    MetatypeKey:
      description: ''
      type: object
      x-examples:
        example-1:
          name: name
          description: ''
          property_name: name
          data_type: string
          required: false
          metatype_id: aaa5baa4-59ef-4e48-a111-b96ca2a4d2bc
          id: feb787cf-189c-4349-aa40-08e106a11d5b
          options: null
          default_value: null
          archived: false
          created_at: '2021-08-09T18:39:19.129Z'
          modified_at: '2021-08-12T22:03:03.952Z'
          created_by: 16fa1d29-a13f-4783-b56d-cdf9c4946cb4
          modified_by: 6a005d8f-1026-4497-9ba9-2db413bf3119
          validation:
            max: 0
            min: 0
            regex: ''
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
        property_name:
          type: string
          minLength: 1
        data_type:
          type: string
          minLength: 1
        required:
          type: boolean
        metatype_id:
          type: string
          minLength: 1
        id:
          type: string
          minLength: 1
        options:
          type: array
          nullable: true
          items:
            type: object
        default_value:
          type: string
          nullable: true
        archived:
          type: boolean
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          minLength: 1
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
        validation:
          $ref: '#/components/schemas/KeyValidation'
      required:
        - name
        - description
        - data_type
        - metatype_id
    MetatypeRelationship:
      description: ''
      type: object
      x-examples:
        example-1:
          name: locates
          description: A locates B if B is contained within a subset of the spatial region occupied by A at some time t.
          container_id: d3cd0199-6511-4c0d-b634-efeff989a8f6
          id: b0d66ebb-58d4-4933-9ed2-29302d0c1aea
          archived: false
          created_at: '2021-08-09T18:39:17.531Z'
          modified_at: '2021-08-12T22:03:02.791Z'
          created_by: 16fa1d29-a13f-4783-b56d-cdf9c4946cb4
          modified_by: 6a005d8f-1026-4497-9ba9-2db413bf3119
          keys: []
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        container_id:
          type: string
          minLength: 1
        id:
          type: string
          minLength: 1
        archived:
          type: boolean
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          minLength: 1
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
        keys:
          type: array
          items:
            $ref: '#/components/schemas/RelationshipKey'
      required:
        - name
        - description
    RelationshipKey:
      description: ''
      type: object
      x-examples:
        example-1:
          name: File Name
          description: File Upload Name
          property_name: fileName
          data_type: string
          required: true
          cardinality: 1
          validation:
            max: 0
            min: 0
            regex: ''
          unique: true
          options:
            - ''
          defaultValue: can be any type
          metatype_relationship_id: b0d66ebb-58d4-4933-9ed2-29302d0c1aea
          id: 1ef3ee3f-c188-4a5f-9da2-ad6ad79eb69d
          default_value: null
          archived: false
          created_at: '2021-08-13T16:17:12.145Z'
          modified_at: '2021-08-13T16:17:12.145Z'
          created_by: 6df185b0-e511-44e6-9692-2b04b51701d9
          modified_by: 6df185b0-e511-44e6-9692-2b04b51701d9
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        property_name:
          type: string
          minLength: 1
        data_type:
          type: string
          minLength: 1
        required:
          type: boolean
        cardinality:
          type: number
        validation:
          $ref: '#/components/schemas/KeyValidation'
        unique:
          type: boolean
        options:
          type: array
          items:
            type: object
        defaultValue:
          type: string
          nullable: true
        metatype_relationship_id:
          type: string
          minLength: 1
        id:
          type: string
          minLength: 1
        archived:
          type: boolean
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          minLength: 1
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
      required:
        - metatype_relationship_id
        - id
    RelationshipPair:
      description: ''
      type: object
      x-examples: null
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        relationship_type:
          type: string
          minLength: 1
        relationship_id:
          type: string
          minLength: 1
        origin_metatype_id:
          type: string
          minLength: 1
        destination_metatype_id:
          type: string
          minLength: 1
        id:
          type: string
          minLength: 1
        archived:
          type: boolean
        container_id:
          type: string
          minLength: 1
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          minLength: 1
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
        origin_metatype_name:
          type: string
          minLength: 1
        destination_metatype_name:
          type: string
          minLength: 1
        relationship_pair_name:
          type: string
          minLength: 1
        destination_metatype:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            id:
              type: string
              minLength: 1
        origin_metatype:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            id:
              type: string
              minLength: 1
        relationship:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            id:
              type: string
              minLength: 1
      required:
        - name
        - id
    DataSource:
      description: ''
      type: object
      x-examples:
        example-1:
          adapter_type: standard
          status: ready
          active: true
          config:
            kind: standard
            data_type: json
            data_format: json
          id: fc218b62-5917-4e52-b7a7-25f399a25811
          container_id: d3cd0199-6511-4c0d-b634-efeff989a8f6
          name: Sample
          data_format: null
          created_at: '2021-08-09T18:40:14.846Z'
          modified_at: '2021-08-09T18:40:14.846Z'
          created_by: 16fa1d29-a13f-4783-b56d-cdf9c4946cb4
          modified_by: 16fa1d29-a13f-4783-b56d-cdf9c4946cb4
          archived: false
          status_message: null
      properties:
        adapter_type:
          type: string
          minLength: 1
        status:
          type: string
          minLength: 1
        active:
          type: boolean
        config:
          $ref: '#/components/schemas/DataSourceConfig'
        id:
          type: string
          minLength: 1
        container_id:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
        data_format:
          type: string
          nullable: true
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          minLength: 1
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
        archived:
          type: boolean
        status_message:
          type: string
          nullable: true
      required:
        - adapter_type
        - active
        - container_id
        - name
    DataTarget:
      description: ''
      type: object
      x-examples: {}
      properties:
        adapter_type:
          type: string
          minLength: 1
        status:
          type: string
          minLength: 1
        active:
          type: boolean
        config:
          $ref: '#/components/schemas/DataTargetConfig'
        id:
          type: string
          minLength: 1
        container_id:
          type: string
          minLength: 1
        name:
          type: string
          minLength: 1
        data_format:
          type: string
          nullable: true
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          minLength: 1
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
        archived:
          type: boolean
        status_message:
          type: string
          nullable: true
      required:
        - adapter_type
        - active
        - container_id
        - name
    DataSourceConfig:
      title: DataSourceConfig
      type: object
      properties:
        kind:
          type: string
          minLength: 1
        data_type:
          type: string
          minLength: 1
        data_format:
          type: string
          minLength: 1
    DataTargetConfig:
      title: DataTargetConfig
      type: object
      properties:
        kind:
          type: string
          minLength: 1
        data_type:
          type: string
          minLength: 1
        data_format:
          type: string
          minLength: 1
    FileModel:
      description: ''
      type: object
      x-examples:
        example-1:
          status: ready
          id: f98827b8-67c5-42f3-86cd-b7bf8490743c
          data_source_id: fc218b62-5917-4e52-b7a7-25f399a25811
          created_at: '2021-08-13T17:25:58.052Z'
          modified_at: '2021-08-13T17:25:58.052Z'
          created_by: 6df185b0-e511-44e6-9692-2b04b51701d9
          modified_by: 6df185b0-e511-44e6-9692-2b04b51701d9
          reference: manual upload
          status_message: null
      properties:
        status:
          type: string
          minLength: 1
        id:
          type: string
          minLength: 1
        data_source_id:
          type: string
          minLength: 1
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          minLength: 1
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
        reference:
          type: string
          minLength: 1
        status_message:
          type: string
          nullable: true
      required:
        - status
        - id
        - data_source_id
        - created_at
        - created_by
        - reference
    FileInfo:
      type: object
      x-examples:
        example-1:
          metadata: {}
          id: f7bc7f76-dca4-4733-8ff2-d2b63625a58b
          file_name: NOTICE.txt
          file_size: 1.794
          adapter_file_path: /path/to/file/fc218b62-5917-4e52-b7a7-25f399a25811/
          adapter: filesystem
          data_source_id: fc218b62-5917-4e52-b7a7-25f399a25811
          created_at: '2021-08-13T17:25:58.051Z'
          modified_at: '2021-08-13T17:25:58.051Z'
          created_by: 6df185b0-e511-44e6-9692-2b04b51701d9
          modified_by: 6df185b0-e511-44e6-9692-2b04b51701d9
          container_id: d3cd0199-6511-4c0d-b634-efeff989a8f6
          md5hash: bc7244e7706e211cc818fb10e4160957
      properties:
        metadata:
          type: object
        id:
          type: string
          minLength: 1
        file_name:
          type: string
          minLength: 1
        file_size:
          type: number
        adapter_file_path:
          type: string
          minLength: 1
        adapter:
          type: string
          minLength: 1
        data_source_id:
          type: string
          minLength: 1
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          minLength: 1
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
        container_id:
          type: string
          minLength: 1
        md5hash:
          type: string
          nullable: true
        short_uuid:
          type: string
          nullable: true
      required:
        - id
        - file_name
        - adapter_file_path
        - data_source_id
        - created_at
        - created_by
        - container_id
      title: ''
    DataSourceImport:
      description: ''
      type: object
      x-examples:
        example-1:
          status: completed
          id: 2b0b7423-c77d-4ea3-9266-7e466ce0fbff
          data_source_id: fc218b62-5917-4e52-b7a7-25f399a25811
          created_at: '2021-08-09T21:26:31.033Z'
          modified_at: '2021-08-09T21:27:01.029Z'
          created_by: 31e3da13-f170-4571-9ed7-80184bc0bf57
          modified_by: 31e3da13-f170-4571-9ed7-80184bc0bf57
          reference: manual upload
          status_message: null
          records_inserted: '0'
          total_records: '1'
      properties:
        status:
          type: string
          minLength: 1
        id:
          type: string
          minLength: 1
        data_source_id:
          type: string
          minLength: 1
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          minLength: 1
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
        reference:
          type: string
          minLength: 1
        status_message:
          type: string
          nullable: true
        records_inserted:
          type: string
          minLength: 1
        total_records:
          type: string
          minLength: 1
      required:
        - status
        - id
        - data_source_id
        - created_at
        - modified_at
        - created_by
        - modified_by
        - reference
        - records_inserted
        - total_records
    CreateManualImport:
      title: CreateManualImport
      description: ''
      type: object
      x-examples:
        example-1:
          status: ready
          id: 2ff12802-222c-472c-95f0-ee364ad93d43
          data_source_id: fc218b62-5917-4e52-b7a7-25f399a25811
          created_at: '2021-08-13T17:35:07.386Z'
          modified_at: '2021-08-13T17:35:07.386Z'
          created_by: 6df185b0-e511-44e6-9692-2b04b51701d9
          modified_by: 6df185b0-e511-44e6-9692-2b04b51701d9
          reference: manual upload
          status_message: null
      properties:
        status:
          type: string
          minLength: 1
        id:
          type: string
          minLength: 1
        data_source_id:
          type: string
          minLength: 1
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          minLength: 1
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
        reference:
          type: string
          minLength: 1
          nullable: true
        status_message:
          type: string
          nullable: true
    Exporter:
      description: ''
      type: object
      x-examples:
        example-1:
          adapter: gremlin
          status: completed
          config:
            kind: standard
            key: ''
            path: /gremlin
            port: '8181'
            user: ''
            endpoint: localhost
            graphson_v1: false
            traversal_source: g
            writes_per_second: 300
          id: d98aa600-7a61-4609-be85-9f510af1610a
          container_id: 35bfbf46-5b50-49f5-a325-e5f03f43c3aa
          created_at: '2021-08-26T21:09:45.170Z'
          modified_at: '2021-08-26T21:09:45.232Z'
          created_by: cad5491e-5d82-47ed-b4de-2d0c9ea7d545
          modified_by: system
          status_message: null
          destination_type: null
      properties:
        adapter:
          type: string
          minLength: 1
        status:
          type: string
          minLength: 1
        config:
          $ref: '#/components/schemas/ExporterConfig'
        id:
          type: string
          minLength: 1
        container_id:
          type: string
          minLength: 1
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          minLength: 1
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
        status_message:
          type: string
          nullable: true
        destination_type:
          type: string
          nullable: true
      required:
        - adapter
        - status
        - config
        - id
        - container_id
        - created_at
        - modified_at
        - created_by
        - modified_by
    ExporterConfig:
      description: ''
      type: object
      properties:
        kind:
          type: string
          minLength: 1
        key:
          type: string
        path:
          type: string
          minLength: 1
        port:
          type: string
          minLength: 1
        user:
          type: string
        endpoint:
          type: string
          minLength: 1
        graphson_v1:
          type: boolean
        traversal_source:
          type: string
          minLength: 1
        writes_per_second:
          type: number
      required:
        - kind
        - key
        - path
        - port
        - user
        - endpoint
        - graphson_v1
        - traversal_source
        - writes_per_second
    User:
      description: ''
      type: object
      x-examples:
        example-1:
          identity_provider: username_password
          display_name: Super User
          email: admin@admin.com
          admin: true
          active: true
          reset_required: false
          email_valid: false
          permissions: []
          roles: []
          id: dc286640-05c2-4c62-8468-8131c01e3473
          identity_provider_id: null
          created_at: '2021-08-09T06:00:00.000Z'
          modified_at: '2021-08-09T06:00:00.000Z'
          created_by: system
          modified_by: system
          reset_token_issued: null
          keys: []
      properties:
        identity_provider:
          type: string
          minLength: 1
        display_name:
          type: string
          minLength: 1
        email:
          type: string
          minLength: 1
        admin:
          type: boolean
        active:
          type: boolean
        reset_required:
          type: boolean
        email_valid:
          type: boolean
        permissions:
          type: array
          items:
            type: object
        roles:
          type: array
          items:
            type: object
        id:
          type: string
          minLength: 1
        identity_provider_id:
          type: string
          nullable: true
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          minLength: 1
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
        reset_token_issued:
          type: string
          nullable: true
        keys:
          type: array
          items:
            $ref: '#/components/schemas/UserKey'
      required:
        - identity_provider
        - display_name
        - email
        - admin
        - active
        - reset_required
        - email_valid
        - id
    UserKey:
      description: ''
      type: object
      properties:
        key:
          type: string
          minLength: 1
        secret_raw:
          type: string
          minLength: 1
        user_id:
          type: string
          minLength: 1
      required:
        - key
        - secret_raw
        - user_id
      x-examples:
        example-1:
          key: MzUyOWQ3ODEtYmRkYS00M2E4LThjYzItZTExOTYxMDIzZTg4
          secret_raw: NThhYTFmZmMtM2RlZS00OTAxLWI3MDgtMDM3ZWJhNTJhZDYz
          user_id: dc286640-05c2-4c62-8468-8131c01e3473
    TypeMapping:
      description: ''
      type: object
      x-examples:
        example-1:
          active: false
          id: 43ddc813-3d39-4a71-b106-9bed355d6dcc
          container_id: 6e459f9b-fa0c-47b7-ab5f-cadd2f709ca3
          data_source_id: 6ed540f2-78aa-431e-b385-9ca3be34344f
          shape_hash: 9ZH9H7c7i4EoQ+g4UWOAbawlJWxxKVod+QRPrDIDxjs=
          created_at: '2021-08-31T19:14:54.607Z'
          modified_at: '2021-08-31T19:14:54.607Z'
          sample_payload: {}
          created_by: 1e785048-5a7d-4be8-8903-73bd0e31da13
          modified_by: 1e785048-5a7d-4be8-8903-73bd0e31da13
      properties:
        active:
          type: boolean
        id:
          type: string
          minLength: 1
        container_id:
          type: string
          minLength: 1
        data_source_id:
          type: string
          minLength: 1
        shape_hash:
          type: string
          minLength: 1
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          minLength: 1
        sample_payload:
          type: object
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
        transformations:
          type: array
          items:
            $ref: '#/components/schemas/Transformation'
        resulting_metatype_name:
          type: string
          nullable: true
        resulting_metatype_relationship_name:
          type: string
          nullable: true
      required:
        - active
        - shape_hash
        - sample_payload
    Transformation:
      description: ''
      type: object
      x-examples:
        example-1:
          conditions: []
          keys: []
          id: b70b3f22-efc7-4d94-9cb4-f81f23b7b71b
          type_mapping_id: 8d24f81f-32cd-4e8d-bae7-e2e6faa6f9c6
          metatype_id: bcee5d5d-3725-4a2d-80a0-75784ce42fad
          metatype_relationship_pair_id: null
          origin_id_key: null
          destination_id_key: null
          unique_identifier_key: null
          root_array: null
          created_at: '2021-08-31T21:37:41.136Z'
          modified_at: '2021-08-31T21:37:41.136Z'
          created_by: bdc90252-b44b-46f6-afff-a1c2f6af1560
          modified_by: bdc90252-b44b-46f6-afff-a1c2f6af1560
          archived: false
          metatype_name: MachineLearningModel
          metatype_relationship_pair_name: null
          container_id: 6e459f9b-fa0c-47b7-ab5f-cadd2f709ca3
          shape_hash: 9Gl1DEOJoD8hVNS8LH8tMhxAk266y25rLge0l/ZYIrk=
          data_source_id: 6ed540f2-78aa-431e-b385-9ca3be34344f
      properties:
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/TransformationCondition'
        keys:
          type: array
          items:
            $ref: '#/components/schemas/TransformationKey'
        id:
          type: string
          minLength: 1
        type_mapping_id:
          type: string
          minLength: 1
        metatype_id:
          type: string
          minLength: 1
          nullable: true
        metatype_relationship_pair_id:
          type: string
          nullable: true
        origin_id_key:
          type: string
          nullable: true
        destination_id_key:
          type: string
          nullable: true
        unique_identifier_key:
          type: string
          nullable: true
        root_array:
          type: string
          nullable: true
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          minLength: 1
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
        archived:
          type: boolean
        metatype_name:
          type: string
          minLength: 1
          nullable: true
        metatype_relationship_pair_name:
          type: string
          nullable: true
        container_id:
          type: string
          minLength: 1
        shape_hash:
          type: string
          minLength: 1
        data_source_id:
          type: string
          minLength: 1
      required:
        - conditions
        - keys
        - archived
    TransformationKey:
      description: ''
      type: object
      properties:
        key:
          type: string
          minLength: 1
        metatype_key_id:
          type: string
          minLength: 1
      required:
        - key
        - metatype_key_id
      x-examples:
        example-1:
          key: file name
          metatype_key_id: a1cdc78f-01be-4d06-a7e7-6981e67d6678
    ImportModel:
      description: ''
      type: object
      x-examples:
        example-1:
          errors: null
          data_source_config:
            kind: standard
            data_type: json
          id: 39
          data_source_id: 6ed540f2-78aa-431e-b385-9ca3be34344f
          import_id: 013112d6-ab2b-4f71-81ec-3a5a38b21afc
          data: {}
          inserted_at: '2021-08-31T23:23:18.712Z'
          created_at: '2021-08-31T23:22:30.354Z'
          shape_hash: 3uiJ0SgkA/jG6IQ8dSFBtMmQShvRsKlBRXDCwMkws3c=
          container_id: 6e459f9b-fa0c-47b7-ab5f-cadd2f709ca3
      properties:
        errors:
          type: string
          nullable: true
        data_source_config:
          $ref: '#/components/schemas/DataSourceConfig'
        id:
          type: string
        data_source_id:
          type: string
          minLength: 1
        import_id:
          type: string
          minLength: 1
        data:
          type: object
        inserted_at:
          type: string
          minLength: 1
        created_at:
          type: string
          minLength: 1
        shape_hash:
          type: string
          minLength: 1
        container_id:
          type: string
          minLength: 1
      required:
        - data_source_id
        - import_id
    Event:
      description: ''
      type: object
      x-examples:
        example-1:
          active: true
          id: 18c8de75-c551-4dbe-9a1f-ee0ffabf69a4
          app_name: Example
          app_url: 'http://0.0.0.0:5001/event'
          data_source_id: fc218b62-5917-4e52-b7a7-25f399a25811
          container_id: null
          event_type: data_ingested
          created_at: '2021-08-09T20:21:22.589Z'
          modified_at: '2021-08-09T20:21:22.589Z'
          created_by: 16fa1d29-a13f-4783-b56d-cdf9c4946cb4
          modified_by: 16fa1d29-a13f-4783-b56d-cdf9c4946cb4
      properties:
        id:
          type: string
        container_id:
          type: string
          nullable: true
        data_source_id:
          type: string
          nullable: true
        event_type:
          type: string
        event_config:
          type: object
        event:
          type: object
        processed:
          type: boolean
        created_at:
          type: string
        created_by:
          type: string
      required:
        - event_type
        - event
    DataStaging:
      description: ''
      type: object
      x-examples:
        example-1:
          data_source_id: dataSourceID
          import_id: importRecordID
          data: {}
          shape_hash: test_hash
      properties:
        data_source_id:
          type: string
          minLength: 1
        import_id:
          type: string
          minLength: 1
        data:
          type: object
        shape_hash:
          type: string
          minLength: 1
        id:
          type: string
        errors:
          type: string
        inserted_at:
          type: string
        created_at:
          type: string
      required:
        - import_id
    TypeMappingExportPayload:
      title: TypeMappingExportPayload
      type: object
      properties:
        mapping_ids:
          type: array
          items:
            type: string
        target_data_source:
          type: string
      required:
        - mapping_ids
    ContainerInvite:
      title: ContainerInvite
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        origin_user:
          type: string
        token:
          type: string
        issued:
          type: string
        container:
          $ref: '#/components/schemas/Container'
    Container:
      description: ''
      type: object
      x-examples:
        example-1:
          name: Test Container 4
          description: Test Container Description
          id: 07b1e35e-0a7c-476d-ada8-5906b16da1b8
          archived: false
          created_at: '2021-08-06T21:17:49.545Z'
          modified_at: '2021-08-06T21:17:49.545Z'
          created_by: fa3c2cc0-2c4e-441c-aa78-cf77f8af8cd1
          modified_by: fa3c2cc0-2c4e-441c-aa78-cf77f8af8cd1
          config: null
          active_graph_id: 0cc62f41-ceaa-4a68-8f1c-7856525c2668
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        id:
          type: string
          minLength: 1
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          minLength: 1
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
        config:
          $ref: '#/components/schemas/ContainerConfig'
        deleted_at:
          type: string
      required:
        - name
        - description
    ContainerConfig:
      description: ''
      type: object
      properties:
        data_versioning_enabled:
          type: boolean
    NotFound404:
      description: ''
      type: object
      x-examples:
        example-1:
          isError: true
          error:
            errorCode: 404
            error: unable to find user
      properties:
        isError:
          type: boolean
        error:
          $ref: '#/components/schemas/ErrorModel'
      required:
        - isError
        - error
    ErrorModel:
      title: ErrorModel
      type: object
      properties:
        error:
          type: string
        errorCode:
          type: number
    RSAInitRequest:
      title: RSAInitRequest
      type: object
      properties:
        subjectName:
          type: string
        securID:
          type: string
      required:
        - subjectName
    RSAVerifyRequest:
      title: RSAVerifyRequest
      type: object
      properties:
        subjectName:
          type: string
        securID:
          type: string
        authnAttemptId:
          type: string
        inResponseTo:
          type: string
      required:
        - securID
        - authnAttemptId
        - inResponseTo
    RSAStatusRequest:
      title: RSAStatusRequest
      type: object
      properties:
        authnAttemptId:
          type: string
        removeAttemptId:
          type: boolean
      required:
        - authnAttemptId
    RSACancelRequest:
      title: RSACancelRequest
      type: object
      properties:
        authnAttemptId:
          type: string
        removeAttemptId:
          type: boolean
      required:
        - authnAttemptId
    RSAResponse:
      title: RSAResponse
      type: object
      properties:
        value:
          type: object
          properties:
            attemptResponseCode:
              type: string
            attemptReasonCode:
              type: string
            challengeMethods:
              type: object
              properties:
                challenges:
                  type: array
                  items:
                    type: object
                    properties:
                      methodSetId:
                        type: string
                      requiredMethods:
                        type: array
                        items:
                          type: object
                          properties:
                            methodId:
                              type: string
                            priority:
                              type: string
                            versions:
                              type: array
                              items:
                                type: object
                                properties:
                                  versionId:
                                    type: string
                                  methodAttributes:
                                    type: array
                                    items:
                                      type: string
                                  valueRequired:
                                    type: boolean
                                  referenceId:
                                    type: string
                                  prompt:
                                    type: object
                                    properties:
                                      promptResourceId:
                                        type: string
                                      defaultText:
                                        type: string
                                      formatRegex:
                                        type: string
                                      defaultValue:
                                        type: string
                                      valueBeingDefined:
                                        type: boolean
                                      sensitive:
                                        type: boolean
                                      minLength:
                                        type: string
                                      maxLength:
                                        type: string
                                      promptArgs:
                                        type: array
                                        items:
                                          type: string
            credentialValidationResults:
              type: array
              items:
                type: object
                properties:
                  methodId:
                    type: string
                  methodResponseCode:
                    type: string
                  methodReasonCode:
                    type: string
                  authnAttributes:
                    type: array
                    items:
                      type: string
            context:
              type: object
              properties:
                authnAttemptId:
                  type: string
                messageId:
                  type: string
                inResponseTo:
                  type: string
        isError:
          type: boolean
    RSAStatusResponse:
      title: RSAStatusResponse
      type: object
      properties:
        attemptResponseCode:
          type: string
        attemptReasonCode:
          type: string
        subjectName:
          type: string
        authnPolicyId:
          type: string
        sessionAttributes:
          type: array
          items:
            type: string
        successfulMethods:
          type: array
          items:
            type: string
        attemptExpires:
          type: string
    ListTasksResponse:
      title: ListTasksResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        isError:
          type: boolean
    Task:
      title: Task
      type: object
      properties:
        id:
          type: string
        container_id:
          type: string
        task_type:
          type: string
        status:
          type: string
        query:
          type: string
        data:
          type: object
        config:
          $ref: '#/components/schemas/TaskConfig'
        status_message:
          type: string
        created_at:
          type: string
        modified_at:
          type: string
        created_by:
          type: string
        modified_by:
          type: string
    TaskConfig:
      title: TaskConfig
      type: object
      properties:
        kind:
          type: string
        user:
          $ref: '#/components/schemas/User'
      required:
        - kind
    CreateTaskResponse:
      title: CreateTaskResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Task'
        isError:
          type: boolean
    UpdateTaskResponse:
      title: UpdateTaskResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Task'
        isError:
          type: boolean
    GetTaskResponse:
      title: GetTaskResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/Task'
        isError:
          type: boolean
    EventAction:
      title: EventAction
      type: object
      properties:
        id:
          type: string
        container_id:
          type: string
        data_source_id:
          type: string
        event_type:
          type: string
        action_type:
          type: string
        action_config:
          type: object
        destination:
          type: string
        destination_data_source_id:
          type: string
        active:
          type: boolean
        created_at:
          type: string
        modified_at:
          type: string
        deleted_at:
          type: string
        created_by:
          type: string
        modified_by:
          type: string
      required:
        - event_type
        - action_type
    EventActionStatus:
      title: EventActionStatus
      type: object
      properties:
        id:
          type: string
        event_action_id:
          type: string
        status:
          type: string
        status_message:
          type: string
          nullable: true
        created_at:
          type: string
        modified_at:
          type: string
          nullable: true
        modified_by:
          type: string
          nullable: true
        event:
          $ref: '#/components/schemas/Event'
      required:
        - event_action_id
    CreateEventRequest:
      title: CreateEventRequest
      type: object
      properties:
        container_id:
          type: string
        data_source_id:
          type: string
        event_type:
          type: string
        event_config:
          type: object
        event:
          type: object
      required:
        - event_type
        - event
    ListEventActionResponse:
      title: ListEventActionResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/EventAction'
        isError:
          type: boolean
    CreateEventActionRequest:
      title: CreateEventActionRequest
      type: object
      properties:
        container_id:
          type: string
        data_source_id:
          type: string
        event_type:
          type: string
        action_type:
          type: string
        action_config:
          type: object
        destination:
          type: string
        destination_data_source_id:
          type: string
        active:
          type: boolean
      required:
        - event_type
        - action_type
    CreateEventActionResponse:
      title: CreateEventActionResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/EventAction'
        isError:
          type: boolean
    GetEventActionResponse:
      title: GetEventActionResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/EventAction'
        isError:
          type: boolean
    UpdateEventActionResponse:
      title: UpdateEventActionResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/EventAction'
        isError:
          type: boolean
    ListEventActionStatusResponse:
      title: ListEventActionStatusResponse
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/EventActionStatus'
        isError:
          type: boolean
    GetEventActionStatusResponse:
      title: GetEventActionStatusResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/EventActionStatus'
        isError:
          type: boolean
    UpdateEventActionStatusRequest:
      title: UpdateEventActionStatusRequest
      type: object
      properties:
        status:
          type: string
        status_message:
          type: string
    UpdateEventActionStatusResponse:
      title: UpdateEventActionStatusResponse
      type: object
      properties:
        value:
          $ref: '#/components/schemas/EventActionStatus'
        isError:
          type: boolean
    ValidateMetatypePropertiesRequest:
      title: ValidateMetatypePropertiesRequest
      type: object
      properties:
        property_name_here:
          type: string
    ServiceUser:
      title: ServiceUser
      type: object
      properties:
        identity_provider:
          type: string
          minLength: 1
        display_name:
          type: string
          minLength: 1
        email:
          type: string
          minLength: 1
        admin:
          type: boolean
        active:
          type: boolean
        reset_required:
          type: boolean
        email_valid:
          type: boolean
        permissions:
          type: array
          minItems: 1
          items:
            properties: {}
        roles:
          type: array
          minItems: 1
          items:
            properties: {}
        id:
          type: string
          minLength: 1
        identity_provider_id:
          type: string
          minLength: 1
        created_at:
          type: string
          minLength: 1
        modified_at:
          type: string
          minLength: 1
        created_by:
          type: string
          minLength: 1
        modified_by:
          type: string
          minLength: 1
        reset_token_issued:
          type: string
          minLength: 1
        keys:
          type: array
          minItems: 1
          items:
            required:
              - key
              - secret_raw
              - user_id
            properties:
              key:
                type: string
                minLength: 1
              secret_raw:
                type: string
                minLength: 1
              user_id:
                type: string
                minLength: 1
      required:
        - identity_provider
        - display_name
        - email
        - admin
        - active
        - reset_required
        - email_valid
        - id
        - identity_provider_id
        - created_at
        - modified_at
        - created_by
        - modified_by
        - reset_token_issued
      x-examples:
        example-1:
          identity_provider: string
          display_name: string
          email: string
          admin: true
          active: true
          reset_required: true
          email_valid: true
          permissions:
            - {}
          roles:
            - {}
          id: string
          identity_provider_id: string
          created_at: string
          modified_at: string
          created_by: string
          modified_by: string
          reset_token_issued: string
          keys:
            - key: string
              secret_raw: string
              user_id: string
    ListServiceUserResponse:
      title: ListServiceUserResponse
      type: object
      properties:
        value:
          type: array
          items:
            type: object
        isError:
          type: boolean
    CreateServiceUser:
      title: CreateServiceUser
      type: object
      properties:
        display_name:
          type: string
      required:
        - display_name
    CreateServiceUserResponse:
      title: CreateServiceUserResponse
      type: object
      properties:
        value:
          type: object
        isError:
          type: boolean
    ImportDataTypeMappingsRequest:
      title: ImportDataTypeMappingsRequest
      oneOf:
        - properties:
            value:
              type: array
              items:
                type: object
        - properties:
            file:
              type: string
              format: binary
              required:
                - file
      type: object
  responses: {}
