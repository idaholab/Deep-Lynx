export default {
    en: {
        languages: {
            english: 'English',
            spanish: 'Spanish',
            language: 'Language',
        },
        help: {
            annotation: 'Location of annotation in relation to data point',
            attachStaging: 'Toggle whether or not this data source will preserve data indefinitely and display original data records for nodes and edges',
            attachmentParams: 'These parameters dictate which nodes should display this timeseries data. More information can be found on the wiki.',
            chooseContainer:
                'Please choose an initial container to get started. A container is like a project, and it consists of an ontology and the data stored under that ontology.',
            chunkInterval: 'Help Deciding Chunk Interval',
            classEdgeParam: 'Choose the Class that the parent or child record belongs to.',
            classSearch: 'Select the Class this data transformation will result in',
            columnNameRegex:
                'Column Names must start with a lowercase letter or underscore and contain only lowercase letters, numbers and underscores. Spaces are not allowed and it must be between 2 and 30 characters in length.',
            conditions: 'Your transformation will only be applied to the data when these conditions are met.',
            tellUs: 'Tell Us!',
            dataRetention:
                'This controls how many days DeepLynx will retain the raw data you import. A value of 0 will retain no raw data after processing and a value of -1 will retain raw data indefinitely.',
            dateFormatString: 'Formatting your date/time - if you do not include a timezone, we will assume UTC time.',
            dateFormatStringSmall: 'Format Help - assumes UTC time if no timezone given.',
            dataSourceCard:
                'Data Sources allow DeepLynx to retrieve or be sent data from outside sources. Managing Data Sources is essential to successful usage of DeepLynx. Manage your Data Sources by clicking below.',
            dataSourceEdgeParam: 'Choose the Data Source the parent or child record belongs to.',
            deprecatedParams:
                'These refer to transformations whose types and keys no longer use the current ontology version. Any data resulting from these transformations will refer to a previous ontology version and not the current one. Consider updating them.',
            dragNode: 'Drag a node towards other nodes to create new edges.',
            edgeDistance: 'Higher values move the edges farther apart',
            edgeInfo: 'View edge information: Left click edge (hover to see relationship type & edge ID)',
            enumOptions: 'This value represents the valid options if the enumeration data type is choosen. This is not required on any other data type.',
            exportDataSource: 'Selects all non-archived data sources to be exported to your container file.',
            exportDestination: 'The type of database or data source your data will be exported to',
            exportEndpoint: 'The HTTP/S endpoint of your Gremlin enabled destination.',
            exportOntology: 'Selects the entire ontology to be exported to your container file.',
            exportPassword: "User's password or access key as specified by your destination",
            exportPath: 'Optional path to include after the root endpoint.',
            exportPort: 'Port on which to contact the Gremlin enabled destination.',
            exportProtocol: 'The communication protocol DeepLynx will use to export the data to the destination.',
            exportTraversal: "Name of the primary traversal source to export to, typically 'g' for Graph Traversal Source",
            exportTypeMapping: 'Selects all type mappings in the container to be exported to your container file.',
            exportUsername: 'Gremlin username or username as specified by your destination',
            exportWrites: 'This determines how many times DeepLynx can write to the Gremlin enabled destination each second.',
            foundBugs: 'Run into some bugs?',
            findHelp: 'Find help',
            graphCenter: 'Center on node: Double click node',
            graphColor: 'Node color is automatically set based on class name or data source.',
            graphHighlight: 'Highlight node/edge and related nodes/edges: Hover over node or edge',
            graphHover: 'Hover over the blue "+" icon in the top left of the graph view to find graph edit tools!',
            graphLabels: 'Node labels show the "name" property (if present) or else the node ID.',
            graphMove: 'Move node: Left click and drag node',
            graphNearby: 'New graph of nearby nodes: Right click node',
            graphPan: 'Pan : Left click drag on open area of graph',
            graphZoom: 'Zoom : Mousewheel scroll',
            help: 'Need Help? Learn more on our ',
            importDataSource: 'Imports new or updated data sources from the supplied container file.',
            importOntology: 'Imports a new ontology from the supplied container file.',
            importTypeMapping: 'Imports new or updated type mappings from the supplied container file.',
            mapKey: 'Key on original payload to which the operator will be applied',
            mapping:
                'Mapping allows you to specify what kind of record this transformation should produce. Each transformation can produce either a relationship or node. Further information will be requested as you work through the form.',
            max: 'Maximum matches',
            metadataMapping:
                'Select any additional relevant payload keys to be included as supplementary data. These are properties that may not fit into the ontology but are still important to hold on to.',
            min: 'Minimum matches',
            nameRegex:
                'Names must start with a letter or underscore and contain only letters, numbers and underscores. Spaces are not allowed and it must be between 2 and 30 characters in length.',
            needHelp: 'Need Help? Details on creating or updating a container via an ontology file can be found on our',
            nodeDistance: 'Higher values move the nodes closer together',
            nodeInfo: 'View node information: Left click node (hover to see class & node ID)',
            ontologyVersioning: 'Toggle whether or not this container will maintain historical versions of the ontology.',
            operator: 'Operators denote a logical operation',
            owlFile: 'An .owl file - used to auto-populate the ontology',
            owlUrl: 'A URL to an .owl file - used to auto-populate the ontology',
            parentChildKeys:
                'By selecting a Parent Key you determine that this record is a child of the value of that Parent Key, opposite is true of selecting a Child Key.',
            postgresDate: 'Date String should be in postgres datetime format',
            propertyMapping: 'Select the payload keys which correspond with the resulting class or relationship properties',
            propertyName: 'This is the JSON compliant property name your data will be stored under inside the database schema.',
            queryAlt: 'In the results window you can hold down the "Alt" key and click on the arrow for an object or array to fully expand the contents.',
            queryAutocomplete:
                'While writing your query, hit "Ctrl-Space" to bring up the autocompletion menu. \nThis menu provides some of the available schema from which to query.',
            queryComments: 'Be sure to remove any comments and replace text in CAPS before running the query!',
            queryDocs: 'Need help writing your query? Consult the detailed documentation',
            querySample: 'To get started, try selecting one of the sample query templates below.',
            regex: 'Enter a valid regular expression for matching against future value',
            releaseNode: 'Release the node once the desired edge is indicated to bring up the dialog for edge creation.',
            relationshipSearch: 'Select the Relationship this data transformation will result in',
            rootArray: 'Selecting a root array means this transformation will be applied for every object contained in the selected root array.',
            samplePayload: 'This is an example of the data this transformation will be applied to.',
            selectChangelist:
                'Select or create a changelist in order to use edit mode. Note that newly created changelists may take a few minutes to generate fully before they are able to be selected.',
            selectNodeInfo: 'Select Node for more information',
            stopNodes:
                'Ignored Properties tell DeepLynx what JSON properties, CSV columns, or XML types to ignore when creating the type mapping. For example if you have a two identical payloads, but one has an additional field, you could tell DeepLynx to ignore the additional field and the resulting type mapping would continue to match.',
            strftimeDate: 'Date String should be in strftime datetime format',
            subexpressions:
                'Subexpressions allow for more complicated conditions to be created by enabling the use of AND/OR expressions when applying conditions.',
            timeseriesTableDesign: 'You must design a database table in which to store this timeseries data. More information can be found on our wiki.',
            transformationConfig: 'Transformation configuration options, generally how to deal with errors on key mapping and conversion.',
            typeMapping:
                'The Type Mapping record and Transformation records are the workhorses of the type mapping system. A Type Mapping contains information as to which container and data source the type mapping belongs, a shape hash which is used to determine which objects to apply the type mapping to, and information denoting status. A Transformation belongs to a Type Mapping, and a Type Mapping can have as many Transformations as it wants. These are the individual actions that DeepLynx should perform on an object matching a certain Type Mapping. Transformations are applied to an object to produce either a node or edge record, ready to be inserted into the DeepLynx database.',
            uniqueID: 'The payload key which denotes an ID or otherwise unique identifier for the created node/edge',
            valueNodes:
                "Property Value vs. Type tells DeepLynx that a JSON property, CSV column, or XML type should have it's value examined as well as examining its type. This allows you to send in identical payload structures but create a different type mapping depending on the value of a property. ",
            welcomeCard:
                'DeepLynx is a unique data warehouse designed to provide easy collaboration on large projects. DeepLynx allows users to define an ontology and then store data under it. Find more information on our wiki below.',
            createdAtMapping:
                'Select a property key to use the corresponding value to set "created at", or leave blank to use the import time as the "created at" value',
            createdAtManual: 'Select "Default" to use the import time as the "created at" value, or set the time manually',
            removedForSecurity: '(Removed for Security)',
        },
        links: {
            timeseriesQuickStart: 'https://github.com/idaholab/Deep-Lynx/wiki/Timeseries-Quick-Start-Guide',
            chunkInterval: 'https://docs.timescale.com/use-timescale/latest/hypertables/about-hypertables/#hypertable-partitioning',
            rustTime: 'https://docs.rs/chrono/0.4.24/chrono/format/strftime/index.html',
            postgresTime: 'https://www.postgresql.org/docs/current/functions-formatting.html#FUNCTIONS-FORMATTING-DATETIME-TABLE',
            wiki: 'https://github.com/idaholab/Deep-Lynx/wiki/',
            importOntology: 'https://github.com/idaholab/Deep-Lynx/wiki/Creating-an-Ontology#importing-an-ontology',
            createOntology: 'https://github.com/idaholab/Deep-Lynx/wiki/creating-an-ontology',
            jsTime: 'https://date-fns.org/v2.28.0/docs/parse',
            graphQL: 'https://github.com/idaholab/Deep-Lynx/wiki/Querying-Data-With-GraphQL',
            email: 'mailto:GRP-deeplynx-team@inl.gov',
        },
        errors: {
            errorCommunicating: 'Error communicating with DeepLynx: ',
            statusCode: 'Request unsuccessful. Status Code ',
            error: 'Error',
            containerCreation: 'Container creation unsuccessful.',
            nameError: 'A container with this name has already been created by the current user.',
            checkLogs: 'Please see the logs for additional detail.',
            owlError: 'Please select either an ontology file or valid URL to an ontology (.owl) file',
            loadOntology:
                'Container created successfully but unable to load ontology from OWL file or OWL file URL. Navigate to your container and attempt to upload the ontology again, or delete the newly created container and use this dialog again. Error:',
            endDate: 'Please enter an end date that is greater than the start date',
            xCol: 'Please select an x column',
            timestampType: 'Some data could not be displayed due to incompatible primary timestamp types. Type selected:',
            unrecognizedTimestamp: 'Unrecognized primary timestamp type',
            importMappings: 'Errors importing type mappings: check type mapping file or logs for more information',
            deleteMappings:
                'This mapping has transformations attached to it! You will not be able to delete this mapping until all transformations are removed.',
            downloadExportError: 'Unable to download exported type mappings',
            onConversion: 'On Conversion Errors',
            onExtraction: 'On Key Extration Errors',
            graphQL: 'There is a problem with the GraphQL query or server error. Please see the result tab.',
            matrix: 'Results Length Varies, Cannot Show Correlation Matrix',
        },
        warnings: {
            deleteContainer:
                'Everything associated with this container - such as data, mappings and ontology versions - will be completely removed. This cannot be undone. Please verify that all users of the container are ready for its deletion.',
            changelist:
                'Changelist creation may take upwards of 5 minutes to complete. Your changelist will have a status of "generating" until it is ready to be edited. Please be patient.',
            className: "If you edit a Class's name, it may appear as if you created a new Class, as we can no longer match it to the original ontology.",
            relName:
                "If you edit a Relationship Type's name, it may appear as if you created a new Relationship Type, as we can no longer match it to the original ontology.",
            reprocessSource:
                'This will initiate a reprocessing of all data ingested by this data source. All previously ingested data from this source will be archived so as not to cause conflicts.',
            deleteSource:
                'Deleting a Data Source means it will be unrecoverable to even administrative users. Only delete Data Sources you know are no longer needed or that were created in error. When in doubt, please archive your Data Source instead. Archiving a Data Source maintains all data imported and all type mappings created with associations to the source. It is generally the preferred action.',
            forceDeleteSource:
                'ATTENTION: This Data Source has data, type mappings, or pending imports associated with it. Deleting this Data Source may adversely affect your container - force deletion at your own risk, this cannot be reversed.',
            archiveSource:
                'Archiving a Data Source will stop all data collection that it might currently be performing. Data collected by this source and mappings created in response to that data will not be affected.',
            dataDeleteSource:
                'Data may have already been ingested for this Data Source. We will remove this data by default so as to avoid "orphaned" data, or data that we cannot trace back to an individual Data Source. If you would like to keep this data and orphan it, please uncheck the box below.',
            upgradeMapping:
                'Upgrading type mappings will automatically attempt to convert all mappings and their transformations to use classes and relationships from the current ontology vs. the one under which they were originally created. Please make sure this is what you want before you attempt to upgrade.',
            deleteMapping:
                'Deleting this mapping will permanently remove it from the system - even administrators cannot undo this. A reminder that mappings are auto-generated by Data Sources as they see unique data structures - this mapping may be generated again automatically after deletion.',
            deleteTransformation:
                'Deleting a Transformation means it will be unrecoverable, even to administrative users. Only delete transformations you know are no longer needed or that were created in error. When in doubt, please archive your Transformation instead. Archiving a Transformation will maintain all data created from it, while stopping all new data generation. It is generally the preferred action.',
            forceDeleteTransformation:
                'ATTENTION: This Transformation has data associated with it. Deleting this Transformation may adversely affect your container - force deletion at your own risk, this cannot be reversed.',
            dataDeleteTransformation:
                'Data may have already been generated using this Transformation. We will remove this data by default so as to avoid "orphaned" data, or data that we cannot trace back to an individual Transformation. If you would like to keep this data and orphan it, please uncheck the box below.',
            archiveTransformation:
                'Archiving a Transformation will not affect any data that has been generated using it. No future data will be generated using this Transformation, and you will not be able to edit it after archiving.',
            reprocessImport:
                'This will initiate a reprocessing of all data in this import. All previously ingested data from this import will be archived so as not to cause conflicts.',
            deleteImport:
                'Deleting an Import might have unintended consequences, especially if you are deleting data generated from that import. This action cannot be undone, even by an admin.',
            stopExport:
                "DeepLynx will attempt to stop this currently processing export. However, this action is not instant and you may see some records exported even after you've stopped the process. Give the action 5-10 minutes to fully stop before either contacting support or attempting to stop the process again.",
            resetExport:
                'This will completely reset this export, meaning that all data currently in the container will be re-queued up for export. THIS DOES NOT ERASE ANY DATA THAT MIGHT HAVE ALREADY BEEN EXPORTED. Please ensure that your export destination is empty prior to restarting the export.',
            deleteExport:
                'Deleting an Export WILL NOT DELETE ANY DATA ON EXPORT TARGET. Ensure that your destination also removes any data that may have been exported before this export request is deleted. This will also have no affect on current data stored in this container',
            graphqlComments: 'Please remove all comments before submitting the query',
            deleteServiceUser:
                "Removing this external application will invalidate all generated API Key/Secret pairs, terminating this application's access to DeepLynx. Only remove applications you are sure are no longer in use, or who you wish to terminate their access.",
            deleteApiKey:
                'Deleting this key will cause any integration which uses it to no longer be able to authenticate with DeepLynx. Only delete a key that you know is not in use or has been compromised. Deleting a key/pair cannot be undone.',
            deleteEvent:
                'Deleting an Event Action means it will be unrecoverable to even administrative users. Only delete Event Actions you know are no longer needed or that were created in error.',
            importContainer:
                'Note that importing type mappings requires also importing data sources, and type mappings may require certain ontology elements in order to transfer completely.',
            inactiveMappings: 'Please note that any data sources or type mappings imported are set as inactive.',
            rootClass: 'Please note that this will create a root class with no parent class.',
        },
        general: {
            default: 'Default',
            viewEdit: 'View/Edit',
            viewDelete: 'View/Delete',
            size: 'Size',
            mayBeEmpty: 'may be empty',
            current: 'Current',
            value: 'Value',
            cancel: 'Cancel',
            save: 'Save',
            delete: 'Delete',
            remove: 'Remove',
            close: 'Close',
            name: 'Name',
            wiki: 'Wiki',
            actions: 'Actions',
            returnToLogin: 'Return to Login',
            logout: 'Logout',
            login: 'Login to DeepLynx',
            rows: 'Rows',
            limit: 'Limit',
            search: 'Search',
            noResults: 'No Results',
            columnName: 'Column Name',
            type: 'Type',
            start: 'Start',
            end: 'End',
            archived: 'Archived',
            id: 'ID',
            active: 'Active',
            send: 'Send',
            success: 'Request was successful!',
            statusMessage: 'Status Message',
            status: 'Status',
            dateCreated: 'Date Created',
            enable: 'Enable',
            description: 'Description',
            beta: 'BETA',
            view: 'View',
            edit: 'Edit',
            created: 'Created',
            edited: 'Edited',
            removed: 'Removed',
            copyID: 'Click to copy ID',
            dataType: 'Data Type',
            options: 'Options',
            defaultValue: 'Default Value',
            modifiedAt: 'Date Modified',
            update: 'Update',
            email: 'Email',
            key: 'Key',
            note: 'Note',
            secret: 'Secret',
            inl: 'Idaho National Laboratory',
            here: 'Here',
            needHelp: 'Need Help?',
            typeToAdd: 'Type and hit Enter to add',
            deepLynxID: 'DeepLynx ID',
            originalID: 'Original Data ID',
            createdAt: 'Created At',
            createdAtFormatString: 'Created At Format String (blank for ISO)',
            createdBy: 'Created By',
            typeToSearch: 'Type and hit Enter to Search',
            deepLynx: 'DeepLynx',
            latest: 'Latest',
            never: 'Never',
            list: 'List',
            json: 'JSON',
            upload: 'Upload',
            create: 'Create',
            showOptional: 'Show Optional Fields',
            alterCreatedAt: 'Alter Created At',
            comingSoon: 'Coming Soon',
            ok: 'OK',
            username: 'Username',
            password: 'Password',
            endpoint: 'Endpoint',
            projectName: 'Project Name',
            projectID: 'Project ID',
            port: 'Port',
            path: 'Path',
            noData: 'No Data',
            processedAt: 'Processed At',
            errors: 'Errors',
            completed: 'Completed',
            done: 'Done',
            rawData: 'Raw Data',
            reprocess: 'Reprocess',
            or: 'OR',
            and: 'AND',
            optional: 'Optional',
            authorize: 'Authorize',
            settings: 'Settings',
            constant: 'Constant Value',
            addColumn: 'Add Column',
            keys: 'Keys',
            date: 'Date',
            dateFormatString: 'Date Format String (blank for ISO)',
            add: 'Add',
            config: 'Configuration',
            reset: 'Reset',
            review: 'Review',
            successful: 'Successful',
            endReview: 'End Review',
            enabled: 'Enabled',
            forceDelete: 'Force Delete',
            jsonFile: '.json File',
            token: 'Authentication Token',
            timeout: 'Timeout (ms)',
            unique: 'Unique',
            dashboard: 'Dashboard',
            dataManagement: 'Data Management',
            deepLynxAdministration: 'DeepLynx Administration',
            accessManagement: 'Access Management',
            welcome: 'Welcome to DeepLynx!',
            database: 'Database',
            archive: 'Archive',
            parent: 'Parent',
        },
        validation: {
            validEmail: 'Email must be valid',
            required: 'Required',
            validation: 'Validation',
            regex: 'Regular Expression',
            max: 'Max # of Matches',
            min: 'Min # of Matches',
            failOnRequired: 'Fail on Required',
            fail: 'Fail',
            ignore: 'Ignore',
            nan: 'Not a Number',
            selectOne: 'Please Select One',
            positive: 'Please enter a Positive Number',
        },
        operators: {
            equals: 'equals',
            notEquals: 'not equals',
            lessThan: 'less than',
            like: 'like',
            greaterThan: 'greater than',
            contains: 'contains',
            lte: 'less than or equal to',
            gte: 'greater than or equal to',
            exists: 'exists',
            in: 'in',
            operators: 'Operators',
            operator: 'Operator',
            select: 'Select Operator',
        },
        statistics: {
            migrations: 'Migrations',
            recordCounts: 'Record Counts',
            longRunningTransactions: 'Long Running Transactions',
            meanExecutionTime: 'Mean Execution Time',
            pid: 'PID',
            username: 'User Name',
            duration: 'Duration',
            dbID: 'Database ID',
        },
        containers: {
            roles: 'Container Roles',
            settings: 'Container Level Settings',
            settingsDescription: "This page allows you to make changes to your currently selected container. Note that you cannot change your container's name",
            settingsSaved: 'Settings saved successfully',
            containers: 'Containers',
            container: 'Container',
            description: 'Manage Containers',
            overviewGraph: 'DeepLynx Container Overview',
            viewData: 'View Data',
            edit: 'Edit Container',
            permanentlyDelete: 'Permanently Delete Container',
            delete: 'Delete Container',
            createNew: 'Create New Container',
            new: 'New Container',
            select: 'Select Container',
            acknowledgeAlert: 'Acknowledge Alert',
            adminAlert: 'Only Container Administrators can dismiss alerts. Please contact your administrator to remove this alert.',
            invite: 'Invite User to Container',
            inviteUsers: 'Invite Users to Your Container',
            inviteEmail: 'Email of user to invite',
            sendInvite: 'Send Invite',
            acceptInviteLong: 'Accept Invitation to Join Container',
            acceptInvite: 'Accept Invitation',
            acceptDescription: 'By clicking the button below you are accepting an invitation to be a part of the container ',
            loginToAccept: 'Login to Accept Invitation',
            acceptSuccess: 'Invitation Accepted Successfully',
            chooseNow: 'You may now choose this container from the container selection screen',
            selection: 'Container Selection',
            administration: 'Container Administration',
            import: 'Import Container',
            export: 'Export Container',
            change: 'Change Container',
        },
        ontology: {
            ontology: 'Ontology',
            description:
                'An ontology is an essential part of DeepLynx. It is a collection of classes, their properties, and their relationships to other classes. Learn how to manage your ontology in our wiki, or experiment as you will.',
            loading: 'Loading an Ontology',
            manage: 'Manage Ontology',
            versioningTitle: 'Ontology Versioning',
            versioningSubtitle: 'Manage Version and Changelists',
            versioningDescription:
                "Use this page to manage your Ontology's versioning and changelist system. You can browse your published versions, as well as manage pending and approved changelists for publishing.",
            versions: 'Ontology Versions',

            rollbackDescription: 'Rollback to this Ontology Version (creates changelist for further approval)',
            publishedAt: 'Published At',
            rollbackStarted: 'Ontology Rollback Started - Check Changelists',
            updateTitle: 'Update Ontology',
            updateDescription: 'Update via Ontology File',
            mode: 'Ontology Versioning Mode',
            activeChangelist: 'Active Changelist',
            version: 'Ontology Version',
            newChangelist: 'Create New Changelist',
            urlOwlFile: 'URL to .owl File',
            owlFile: '.owl File',
            versioningEnabled: 'Ontology Versioning Enabled',
            generating: 'Generating Ontology',
        },
        changelists: {
            apply: 'Apply Changelist',
            send: 'Send Changelist for Approval',
            approve: 'Approve Changelist',
            delete: 'Delete Changelist',
            changelists: 'Changelists',
            reject: 'Reject Changelist',
            applied: 'Changelist Successfully Applied',
            updated: 'Changelist Successfully Updated',
            deleted: 'Changelist Successfully Deleted',
            approved: 'Changelist Successfuly Approved',
        },
        classes: {
            class: 'Class',
            classes: 'Classes',
            description: 'Modify Classes and Class Properties',
            createdSuccessfully: 'Class Created Successfully',
            searchName: 'Search by Class Name',
            searchDescription: 'Search by Class Description',
            remove: 'Remove Class',
            restore: 'Restore removed Class',
            edit: 'Edit Class',
            createNew: 'Create New Class',
            new: 'New Class',
            choose: 'Choose Class',
            select: 'Select Resulting Class',
            filter: 'Filter by Class',
            view: 'View Class',
            search: 'Type to search available Classes',
            id: 'Class ID',
            name: 'Class Name',
            selectProperty: 'Select Class Property',
            selectParentHelp: 'Select a class to be the parent or leave blank for a root class',
            createChild: 'Create Child Class',
            editProperty: 'Edit Class Property',
            newProperty: 'New Class Property',
            searchProperty: 'Type to search available Class Properties',
        },
        relationships: {
            createdSuccessfully: 'Relationship Created Successfully',
            relationships: 'Relationships',
            description: 'Modify Relationships',
            searchName: 'Search by Relationship Name',
            searchDescription: 'Search by Relationship Description',
            remove: 'Remove Relationship',
            restore: 'Restore removed Relationship',
            create: 'Create Relationship',
            new: 'New Relationship',
            cardinality: 'Cardinality',
            edit: 'Edit Relationship',
            view: 'View Relationship',
            select: 'Select Resulting Relationship',
            choose: 'Choose Relationship',
            relationship: 'Relationship',
            search: 'Type to search available Relationships',
            editProperty: 'Edit Relationship Property',
            viewProperty: 'View Relationship Property',
            newProperty: 'New Relationship Property',
        },
        relationshipTypes: {
            createdSuccessfully: 'Relationship Type Created Successfully',
            relTypes: 'Relationship Types',
            description: 'Modify Relationship Types',
            searchName: 'Search by Relationship Type',
            searchDescription: 'Search by Type Description',
            remove: 'Remove Relationship Type',
            restore: 'Restore removed Relationship Type',
            edit: 'Edit Relationship Type',
            create: 'Create Relationship Type',
            new: 'New Relationship Type',
            view: 'View Relationship Type',
            relType: 'Relationship Type',
        },
        nodes: {
            edit: 'Edit Node',
            create: 'Create Node',
            id: 'Node ID',
            node: 'Node',
            selected: 'Selected Node',
            delete: 'Delete Node',
            info: 'Node Information',
            history: 'Node History',
        },
        edges: {
            create: 'Create Edge',
            edge: 'Edge',
            history: 'Edge History',
            info: 'Edge Information',
            delete: 'Delete Edge',
            originID: 'Origin ID',
            destinationID: 'Destination ID',
            originClass: 'Origin Class',
            destinationClass: 'Destination Class',
            edges: 'Edges',
            origin: 'Origin',
            destination: 'Destination',
            outgoing: 'Outgoing',
            incoming: 'Incoming',
            originClassSearch: 'Search by Origin Class',
            destinationClassSearch: 'Search by Destination Class',
        },
        properties: {
            properties: 'Properties',
            mapping: 'Property Mapping',
            name: 'Property Name',
            raw: 'Raw Properties',
            property: 'Property',
            add: 'Add Property',
            selected: ' Properties Selected',
        },
        dataSources: {
            dataSource: 'Data Source',
            timeseries: 'Timeseries Data Sources',
            description: 'Configure Data Sources',
            formTitle: 'New Data Source',
            dataSources: 'Data Sources',
            adapterType: 'Adapter Type',
            id: 'Data Source ID',
            attachStaging: 'Enable Staging Record Attachment',
            select: 'Select Data Source',
            createNew: 'Create New Data Source',
            new: 'New Data Source',
            selectType: 'Select Data Source Type',
            standardName: 'Standard',
            standardDescription:
                'This is the standard, passive data source for DeepLynx. Data is uploaded to this data source either manually or from external programs.',
            jazzName: 'Jazz',
            jazzDescription: 'This is the Jazz/Doors Next Generation data source. This allows you to pull in artifacts automatically from the Jazz/DNG server.',
            p6Name: 'P6',
            p6Description: 'This is a wrapper over the standard data source, but contains Oracle Primavera P6 specific configuration values.',
            httpName: 'HTTP Poller',
            httpDescription:
                'This data source is an active poller against a user provided HTTP endpoint. Each poll will take the response and create an import for it, passing a query parameter with the last successful poll time.',
            avevaName: 'Aveva',
            avevaDescription: 'This is a wrapper over the standard data source, but contains Aveva Everything3D specific configuration values.',
            authMethod: 'Authentication Method',
            useHttps: 'Use HTTPS',
            pollInterval: 'Poll Interval (in minutes)',
            jazzArtifacts: 'Artifact Types for Retrieval',
            recordsPerCall: 'Records Per Call Limit',
            ignoredDBtypes: 'Ignored Database Types',
            ignoredElements: 'Ignored Element Types',
            ifcTypes: 'Element Types for IFC Generation',
            ifcSettings: {
                title: 'IFC Settings',
                format: 'IFC Format',
                dataLevel: 'Data Level',
                logLevel: 'Log Level',
                arcTolerance: 'Arc Tolerance',
                componentLevel: 'Component Level',
                tube: 'Tube',
                cl: 'CL',
                insuTranslucency: 'Insular Translucency',
                obstTranslucency: 'Obstruction Translucency',
                root: 'Root',
                pipe: 'Pipe',
                nozzle: 'Nozzle',
                structure: 'Structure',
                cable: 'Cable',
            },
            p6: {
                selectConfig: 'Select a P6 Source Configuration',
                defaultAdapter: 'Default P6 Adapter',
                defaultConfig: 'P6 Default Configurations',
                configDescription:
                    'Configure a default server address and project ID to help container users more easily set up P6. This config can be selected from a dropdown when creating a new P6 datasource.',
            },
            dataRetentionDays: 'Raw Data Retention Policy (days)',
            advanced: 'Advanced Settings',
            stopNodes: 'Ignored Properties',
            valueNodes: 'Property Value vs. Type',
            edit: 'Edit Data Source',
            alias: 'Source Alias',
            delete: 'Delete Data Source',
            deletePermanently: 'Delete Data Source Permanently',
            archive: 'Archive Data Source',
            deleteWithData: 'Delete all data ingested by Data Source',
            addConfigured: 'Add New Configured Source',
            newConfigured: 'New Configured Source',
            editConfigured: 'Edit Configured Source',
            deleteConfigured: 'Delete Configured Source',
            deleteConfiguredConfirm: 'Would you like to delete this pre-set Data Source configuration?',
            selectEnabled: 'Select Enabled Data Source Types',
            reprocess: 'Reprocess Data Source',
            selected: 'Selected Data Sources',
        },
        timeseries: {
            fastloadEnabled: 'Fast Load Enabled',
            enableFastload: 'Enable Fastload Ingestion',
            timeseries: 'Timeseries',
            interval: 'Interval',
            annotation: 'Annotation',
            description:
                'This data source is built specifically for timeseries data. Users must design a timeseries data table and set attachment parameters prior to successful creation. Users upload timeseries data directly to this source, bypassing the standard type mapping system.',
            colNameUnique: 'Column Name must be Unique',
            primaryTimestamp: 'Primary Timestamp',
            tableDesign: 'Table Design',
            nodeExplanation: 'Each entry in this table represents a different structure of timeseries data attached to the node',
            view: 'View Timeseries Data',
            analysis: 'Exploratory Data Analysis',
            sourceShapes: 'Data Source Shapes',
            timestamp: 'Timestamp',
            index: 'Index',
            selectDate: 'Select Date...',
            limitHint: 'Enter 0 for unlimited results (may impact performance)',
            replayOrStream: 'Replay or Live Stream',
            recordsPer: 'Records per',
            stopStream: 'Stop Stream',
            chartType: 'Chart Type',
            colorScale: 'Color Scale',
            addTrace: 'Add Trace',
            boxPlot: 'Box Plot',
            correlationPlot: 'Correlation Plot',
            startIndex: 'Start Index',
            endIndex: 'End Index',
            trace: 'Trace',
            data: 'Timeseries Data',
            attachmentParams: 'Node Attachment Parameters - optional',
            chunkInterval: 'Chunk Interval',
            indexType: 'Index Type',
        },
        typeMappings: {
            mappingsMaybePlural: 'Mapping(s)',
            keyOrValue: 'Payload Key or Static Value',
            typeMapping: 'Type Mapping',
            typeMappings: 'Type Mappings',
            needsTransformations: 'Needs Transformations',
            deprecatedParams: 'DEPRECATED, CONVERT TO PARAMETERS',
            transformations: 'Type Mappings and Transformations',
            mapping: 'Mapping',
            mappings: 'Mappings',
            successfullyImported: 'Mappings Successfully Imported',
            description: 'Manage Data Mappings',
            current: 'Current Mappings',
            viewSamplePayload: 'View Sample Payload',
            upgradeAll: 'Upgrade All Mappings',
            samplePayload: 'Sample Payload',
            resultingName: 'Class/Relationship Name',
            successfullyExported: 'Mappings Successfully Exported',
            delete: 'Delete Type Mapping',
            exportAll: 'Export All Mappings',
            export: 'Export Type Mappings',
            enable: 'Enable Type Mapping',
            import: 'Import Type Mappings',
            importFromFile: 'Import Mappings from File',
        },
        transformations: {
            transformations: 'Transformations',
            conditions: 'Condition(s)',
            expression: 'Expression',
            transformation: 'Transformation',
            createNew: 'Create New Transformation',
            edit: 'Edit Transformation',
            viewArchived: 'View Archived Transformation',
            currentDataSet: 'Current Data Set',
            newOptions: 'New Transformation Options',
            rootArray: 'Root Array',
            resulting: 'Resulting Data Type',
            uniqueID: 'Unique Identifier Key',
            parentInfo: 'Parent Information',
            parentID: 'Parent ID Key',
            parentParams: 'Parent Connection Parameters',
            childInfo: 'Child Information',
            childID: 'Child ID Key',
            childParams: 'Child Connection Parameters',
            convertParams: 'Convert to Parameters',
            typeSelectKey: 'Type or Select Payload Key',
            autopopulate: 'Autopopulate Keys',
            mapPayloadKey: 'Map Payload Key',
            metadata: 'Supplementary Data Mapping',
            arrayAvailable: ' Array Properties available',
            metadataHint: 'Select Additional Properties as Supplementary Data',
            subexpressions: 'Subexpressions',
            saveCondition: 'Save Condition',
            deprecated: 'Deprecated Transformation',
            delete: 'Delete Transformation',
            deletePermanently: 'Delete Transformation Permanently',
            archive: 'Archive Transformation',
            deleteWithData: 'Delete all data associated with Transformation',
        },
        imports: {
            import: 'Import',
            imports: 'Imports',
            data: 'Import Data',
            description: 'Manage Imported Data',
            timeseriesDescription: 'View and Manage Imported Timeseries Data',
            totalErrors: '# of Errors',
            percentageProcessed: '% Processed',
            deleteError: 'Unable to delete data that has already been inserted',
            containerTitle: 'Import Container from File',
            containerDescription: 'Use this page to import your container and its various parts from a file that was generated by a previous container export.',
            fromFile: 'Import from File',
            containerError: 'Unable to import container',
            reprocessTitle: 'Reprocess Import',
            reprocessDescription: 'Reprocess Data from Import',
            dataDescription: 'Import Data (csv, json, and xml accepted)',
            fileTypes: '.json, .xml, .csv',
            deleteTitle: 'Delete Import',
            deleteData: 'Delete all data generated from Import',
            successfullyDeleted: 'Data Successfully Deleted',
            status: 'Import Status',
        },
        exports: {
            export: 'Export',
            graph: 'Graph Export',
            graphDescription: 'Export your Graph Data',
            stop: 'Stop Export',
            reset: 'Reset Export',
            resetConfirm: 'I Understand, Reset Export',
            delete: 'Delete Export',
            deleteConfirm: 'I Understand, Delete Export',
            destinationType: 'Destination Type',
            create: 'Create Export',
            createNew: 'Create New Export',
            protocol: 'Protocol',
            gremlinConfiguration: 'Gremlin Protocol Configuration',
            traversal: 'Traversal Source',
            wps: 'Writes-per-second',
            neptune: 'AWS Neptune',
            neo4j: 'Neo4J',
            cosmo: 'CosmosDB',
            janus: 'JanusGraph',
            tinkerPop: 'TinkerPop Enabled System',
            containerTitle: 'Export Container to File',
            containerDescription:
                'Use this page to export your container and its various parts out to a file. This file can then be uploaded into a new or existing DeepLynx container.',
            toFile: 'Export to File',
            downloadError: 'Unable to download exported container',
            toDataSource: 'Export to Data Source',
        },
        graph: {
            graph: 'Graph',
            legend: 'Legend',
            depth: 'Depth',
            reset: 'Reset Graph',
            help: 'Help & Display',
            display: 'Graph Display',
            nodeDistance: 'Node Distance',
            edgeDistance: 'Edge Distance',
            update: 'Update Graph',
            zoom: 'Zoom',
            minZoom: 'Min Zoom',
            maxZoom: 'Max Zoom',
            updateZoom: 'Update Zoom',
            resetZoom: 'Reset Zoom',
            controls: 'Controls',
            nthDepth: 'Number of hops to travel from selected Node',
            toggleEdge: 'Enable/Disable Edge Creation',
            pointInTime: 'View Graph at Point in Time',
            toggleEdgeLabels: 'Toggle Edge labels',
            extendNodeLabels: 'Extend Node labels',
            groupNodeColor: 'Choose how to group Node color',
        },
        query: {
            query: 'Query',
            filterType: 'Filter Type',
            metadataProperty: 'Supplementary Data Property',
            previous: 'Previous Queries',
            noneToDisplay: 'No Queries to Display',
            results: 'result(s)',
            builder: 'Query Builder',
            rawEditor: 'Raw Query Editor',
            reset: 'Reset Query',
            new: 'New Query',
            includeRaw: 'Include Unprocessed Data Staging Records in Query (may impact performance)',
            clickToAdd: 'Click to Add Filter',
            clickToAddProperty: 'Click to Add Property Filter',
            run: 'Run Query',
            rerun: 'Re-run Query',
            resultsDisplayedHere: 'Results will be displayed here',
            sample: 'Sample Query',
            sampleSelect: 'Select a Sample Query to load a template',
            sampleClass: 'Class Query',
            sampleRelationship: 'Relationship Query',
            sampleIntrospect: 'Introspection Query',
            sampleGraph: 'Graph Query',
            sampleGraphSimple: 'Simple Graph Query',
            selectFilter: 'Select Filter Type',
            limitOntology: 'Limit results to current Ontology version',
            includeHistoricalRaw: 'Include Historical Records in Search (may impact performance)',
            metadataProperties: 'Supplementary Data',
            rawData: 'Unmapped Data',
            earliestDate: 'Earliest Date: ',
            showOptional: 'Show Optional Fields',
            nameMissing: 'Name Missing',
            nodeContaining: "Node containing Label '",
            labelNotFound: "' not found",
            viewer: 'Data Viewer',
            viewerDescription: 'Query and Edit Data',
            // the following are component names and are dynamically translated,
            // which is why they are capitalized
            FilterDataSource: 'Filter by Data Source',
            FilterID: 'Filter by DeepLynx ID(s)',
            FilterMetadata: 'Filter by Supplementary Data',
            FilterMetatype: 'Filter by Class',
            FilterProperty: 'Filter by Class Property',
            FilterOriginalID: 'Filter by Original Data ID(s)',
            FilterRawData: 'Filter by Unprocessed Data Record',
        },
        tags: {
            name: 'Tag Name',
            update: 'Update Tag',
            attached: 'Attached Tags',
            add: 'Add Tag',
            select: 'Select Tag',
            tags: 'Tags',
        },
        files: {
            update: 'Update File',
            new: 'New File',
            deleteSet: 'Delete File Set',
            delete: 'Delete File',
            newSet: 'New File Set',
            createSet: 'Create New File Set',
            webGL: 'WebGL Files',
            attached: 'Attached Files',
            add: 'Add File',
            selectToUpload: 'Select File(s) to Upload',
            name: 'File Name',
            downloadError: 'Unable to download File',
            file: 'File',
            fileSize: 'File Size (KB)',
            files: 'Files',
        },
        modelExplorer: {
            title: '2D/3D Model Explorer',
            description: 'View and Manage 2D/3D Models',
            viewIn3d: 'View in 3D',
            viewIfc: 'View IFC files',
            ifcWarn:
                'Loading an IFC file into the browser can be a resource and time consuming process. If the file is large, or your connection to DeepLynx is slow, it may take several minutes for the file to load and render. Please be patient.',
            loadIfc: 'Load IFC File',
            resetIfc: 'Reset IFC File',
            fileDeleteWarn: 'Are you sure you want to delete this file? If it is associated with a WebGL build, it may break the ability to view the 3D model.',
            models3D: '3D Models',
            model: 'Model',
        },
        users: {
            users: 'Users',
            role: 'Role',
            admin: 'Admin',
            permissions: 'Permissions',
            manage: 'Manage Users',
            title: 'Users',
            description: 'Manage All Users',
            edit: 'Edit User',
            assignRole: 'Assign Role',
            containerTitle: 'Container Users',
            containerDescription: 'Manage Container Users',
            invited: 'User Successfully Invited',
            assigned: 'Role Successfully Assigned',
            owner: 'owner',
            editContainerRoles: 'Edit Roles in Container',
            remove: 'Remove User from Container',
            id: 'User ID',
        },
        apiKeys: {
            create: 'Generate New API Key/Secret',
            success: 'WRITE DOWN YOUR SECRET - this is the only time you will be able to see it.',
            userKey:
                'The API Key/Secret pair you generate here will have all the same permissions as your user. It is NOT tied to this current container and users of this key/secret pair will have access to all containers and data you have permission for. Please use these keys cautiously.',
            serviceKey:
                "The API Key/Secret pair you generate here will have all the same permissions you've assigned the application. It is tied to this current container. Please use these keys cautiously.",
            personalKeys: 'Personal API Keys',
            description: 'Generate and Manage API Keys',
            delete: 'Permanently Delete API Key/Secret Pair',
            manage: 'Manage API Keys',
        },
        serviceUsers: {
            title: 'Application API Keys',
            description: 'External Application Access',
            create: 'Add External Application',
            createDescription:
                'Creating an external application will give you the ability to generate API key/secret pairs and manage permissions for external applications which communicate with DeepLynx. Please keep in mind that newly created applications have no permissions by default, you should attempt to assign permissions as you see fit. Permissions can be edited after creation.',
            managePermissions: 'Manage Permissions',
            delete: 'Remove External Application',
            containers: 'Container Permissions',
            containersDescription:
                'These permissions dictate which container-level actions an application can perform. Generally administrative tasks such as editing container settings and editing or removing the container entirely.',
            ontology: 'Ontology Permissions',
            ontologyDescription:
                'These permissions dictate the actions an application can perform regarding the ontology. These permissions allow an application to view and edit the ontology.',
            data: 'Data Permissions',
            dataDescription:
                'These permissions dictate the actions an application can perform regarding the data and data sources. These permissions allow a user to view and edit the data stored in the graph as well as manage data sources and the type mapping system.',
            users: 'User Permissions',
            usersDescription:
                "These permissions dictate the actions an application can perform regarding the container's users. This allows the application to manage a user's permissions inside the container, as well as allowing them to remove and add users to the container.",
        },
        events: {
            title: 'Event System',
            actionDescription: 'Manage and Edit Event Actions',
            eventType: 'Event Type',
            actionType: 'Action Type',
            newAction: 'New Event Action',
            createAction: 'Create Event Action',
            destinationDataSource: 'Destination Data Source',
            dataImported: 'Data Imported',
            dataIngested: 'Data Ingested',
            fileCreated: 'File Created',
            fileModified: 'File Modified',
            dataSourceCreated: 'Data Source Created',
            dataSourceModified: 'Data Source Modified',
            dataExported: 'Data Exported',
            manual: 'Manual',
            sendData: 'Send Data',
            emailUser: 'Email User',
            destinationEmail: 'Destination Email Address',
            editAction: 'Edit Event Action',
            deleteAction: 'Delete Event Action',
            sendAction: 'Send Event Action',
            confirmSend: 'Are you sure you would like to send this Event Action?',
            statusTitle: 'Event Action Status',
            actionID: 'Event Action ID',
            event: 'Event',
        },
    },
    es: {
        languages: {
            english: 'Inglés',
            spanish: 'Español',
            language: 'Idioma',
        },
        home: {
            domainSelect: 'Seleccionar Dominio',
            selectContainer: 'Seleccionar Contenedor',
            taxonomy: 'Taxonomia',
            metatypes: 'Clases',
            metatypesDescription: 'Modificar clase y propietarios',
            metatypeRelationships: 'Relaciones',
            metatypeRelationshipsDescription: 'Modificar relaciones entre clases',
            metatypeRelationshipPairs: 'Pares de clase / relación',
            metatypeRelationshipPairsDescription: 'Modificar pares de clase / relación',
            import: 'Importar',
            data: 'Data',
            dataSources: 'Orígenes de datos',
            dataSourcesDescription: 'Configurar orígenes de datos',
            dataExplorer: 'Explorar',
            dataExplorerDescription: 'Datos interactivo',
            dataMapping: 'Mapeo de clase',
            dataMappingDescription: 'Manejar asignaciones entre clases y datos.',
            dataExport: 'Exportar',
            dataExportDescription: 'Manejar exportaciones de dato',
            settings: 'Configuraciones',
            settingsDescription: 'Configuraciones de application',
            dataImports: 'Datos importados',
            dataImportsDescription: 'Manejar datos importados',
            containerAdministration: 'Administracion de contenedores',
            containerUsers: 'Usarios de contenedores',
            containerUsersDescription: 'Manjear usarios de contenedores',
            administration: 'Administracion de applicacion',
            users: 'Usarios',
            usersDescription: 'Manejar usarios',
            containers: 'Contenedores',
            containersDescription: 'Manejar Contenedores',
            language: 'Idioma',
        },
        metatypes: {
            metatypes: 'Metatypes',
            search: 'Search',
        },
        dataSources: {
            formTitle: 'New Data Source',
        },
        login: {
            username: 'Correo Electrónico',
            password: 'Contraseña',
            login: 'Iniciar',
            windows: 'Iniciar con Windows',
        },
        users: {
            title: 'Manage Users',
            newUser: 'New User',
            name: 'Name',
            email: 'Email',
            admin: 'Admin',
            actions: 'Actions',
            password: 'Password',
            confirmPassword: 'Confirm Password',
            assignRole: 'Assign Role',
            role: 'Role',
            users: 'Users',
            containers: 'Containers',
            assignContainerRoles: 'Container Roles',
            editUserTitle: 'Edit User',
        },
    },
};
