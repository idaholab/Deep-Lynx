export default {
    en: {
        beta: 'BETA',
        comingSoon: 'coming soon',
        deprecatedParams: 'DEPRECATED, CONVERT TO PARAMETERS',
        ontology: {
            optionsHelp: 'This value represents the valid options if the enumeration data type is choosen. This is not required on any other data type.',
            propertyName: 'This is the JSON compliant property name your data will be stored under inside the database schema.',
        },
        home: {
            migrations: 'Migrations',
            recordCounts: 'Record Counts',
            longRunningTransactions: 'Long Running Transactions',
            meanExecutionTime: 'Mean Execution Time',
            pid: 'PID',
            userName: 'User Name',
            databaseName: 'Database',
            query: 'Query',
            duration: 'Duration',
            userID: 'User ID',
            databaseID: 'Database ID',
            meanExecTime: 'Mean Exec Time',
            upload: 'Upload',
            deleteUser: 'Remove User From Container',
            editUser: 'Edit User Roles In Container',
            bugs: 'Ran into some bugs?',
            contactUs: 'Tell Us!',
            beta: 'beta',
            id: 'ID',
            dashboard: 'Dashboard',
            relationships: 'Relationships',
            accessManagement: 'Access Management',
            apiKeys: 'Personal API Keys',
            apiKeysDescription: 'Generate and Manage API Keys',
            domainSelect: 'Select Domain',
            selectContainer: 'Select Container',
            taxonomy: 'Ontology',
            metatypes: 'Metatypes',
            metatypesDescription: 'Modify Metatypes and Metatype Keys',
            metatypeRelationships: 'Relationship Types',
            metatypeRelationshipsDescription: 'Modify Relationship Types',
            metatypeRelationshipPairs: 'Relationships',
            metatypeRelationshipPairsDescription: 'Modify Relationships',
            ontologyUpdate: 'Update Ontology',
            ontologyUpdateDescription: 'Update via Ontology File',
            import: 'Import',
            imported: 'Data Imported',
            dataManagement: 'Data Management',
            dataQuery: 'Data Viewer',
            dataQueryDescription: 'Query and Edit Data',
            dataSources: 'Data Sources',
            dataSourcesDescription: 'Configure Data Import Sources',
            dataExplorer: 'Explorer',
            dataExplorerDescription: 'Interactive Data Explorer',
            dataMapping: 'Type Mapping',
            dataMappingDescription: 'Manage Data Mappings',
            dataExport: 'Graph Export',
            dataExportDescription: 'Manage Data Export',
            dataEditor: 'Data Editor',
            dataEditorDescription: 'Create and Manage Datasets',
            fileManager: '3D File Manager',
            fileManagerDescription: 'Manage WebGL File Sets',
            settings: 'Settings',
            settingsDescription: 'Container Level Settings',
            dataImports: 'Import Data',
            dataImportsDescription: 'Manage Imported Data',
            containerAdministration: 'Container Administration',
            containerUsers: 'Container Users',
            containerUsersDescription: 'Manage Container Users',
            administration: 'DeepLynx Administration',
            users: 'Users',
            usersDescription: 'Manage All Users',
            containers: 'Containers',
            containersDescription: 'Manage Containers',
            language: 'Language',
            accessKeys: 'Access Keys',
            accessKeysDescription: 'Manage API Access Keys',
            logout: 'Logout',
            cancel: 'Cancel',
            save: 'Save',
            create: 'Create',
            delete: 'Delete',
            update: 'Update',
            changeContainer: 'Change Container',
            welcomeCardTitle: 'Welcome to Deep Lynx!',
            welcomeCardText:
                'Deep Lynx is a unique data warehouse designed to provide easy collaboration on large projects. Deep Lynx allows users to define an ontology and then store data under it. Find more information on our wiki below.',
            welcomeCardLinkText: 'Wiki',
            welcomeCardLink: 'https://github.com/idaholab/Deep-Lynx/wiki/',
            ontologyCardTitle: 'Ontology',
            ontologyCardText:
                'An ontology is an essential part of Deep Lynx. It is a collection of classes, their properties, and their relationships to other classes. Learn how to manage your ontology in our wiki, or experiment as you will.',
            ontologyCardLinkText1: 'Loading an Ontology',
            ontologyCardLinkText2: 'Manage Ontology',
            ontologyCardLink1: 'https://github.com/idaholab/Deep-Lynx/wiki/creating-an-ontology',
            setupDataSourceCardTitle: 'Data Sources',
            setupDataSourceCardText:
                'Data Sources allow Deep Lynx to retrieve or be sent data from outside sources. Managing Data Sources is essential to successful usage of Deep Lynx. Manage your Data Sources by clicking below.',
            setupDataSourceCardLinkText: 'Manage Data Sources',
            inviteUserCardTitle: 'Invite Users to Your Container',
            inviteUserCardText: "Don't go alone! Invite others to help manage your ontology and data.",
            inviteUserCardLinkText: 'Manage Users',
            ontologyVersioning: 'Ontology Versioning',
            ontologyVersioningDescription: 'Manage Version and Changelists',
            ontologyVersioningLongDescription:
                "Use this page to manage your Ontology's versioning and changelist system. You can browse your published versions, as well as manage pending and approved changelists for publishing.",
            serviceUsers: 'Application API Keys',
            serviceUsersDescription: 'External Application Access',
            containerExport: 'Export Container',
            containerExportDescription: 'Export Container to File',
            containerImport: 'Import Container',
            containerImportDescription: 'Import Container from File',
            eventAction: 'Event System',
            eventActionDescription: 'Manage and Edit Event Actions',
        },
        containerExport: {
            pageTitle: 'Export Container to File',
            pageDescription:
                "Use this page to export your container and it's various parts out to file. This file can then be uploaded into an existing or new DeepLynx container.",
            exportOntology: 'Ontology',
            exportOntologyHelp: 'Selects the entire ontology to be exported to your container file.',
            exportDataSources: 'Data Sources',
            exportDataSourceHelp: 'Selects all non-archived data sources to be exported to your container file.',
            exportTypeMappings: 'Type Mappings and Transformations',
            export: 'Export to File',
        },
        containerImport: {
            pageTitle: 'Import Container from File',
            pageDescription: "Use this page to import your container and it's various parts from a file that was generated by a previous container export.",
            importOntology: 'Ontology',
            importOntologyHelp: 'Imports a new ontology from the supplied container file.',
            importDataSources: 'Data Sources',
            importDataSourceHelp: 'Imports new or updated data sources from the supplied container file.',
            importTypeMappings: 'Type Mappings and Transformations',
            import: 'Import from File',
        },
        containerAlert: {
            acknowledge: 'Acknowledge Alert',
            generatingOntology: 'Generating Ontology',
            containerAdminAcknowledge: 'Only Container Administrators can dismiss alerts. Please contact your administrator to remove this alert.',
            authorize: 'Authorize',
        },
        apiKeys: {
            note: 'Note',
            title: 'Current API Keys',
            key: 'Key',
            actions: 'Actions',
        },
        deleteApiKey: {
            deleteTitle: 'Permanently Delete API Key/Secret Pair',
            deleteWarning:
                'Deleting this key will cause any integration which uses it to no longer be able to authenticate with Deep Lynx. Only delete a key that you know is not in use or has been compromised. Deleting a key/pair cannot be undone.',
            cancel: 'Cancel',
            delete: 'Delete',
        },
        timeseries: {
            name: 'Name',
            explanation: 'Each entry in this table represents a different structure of timeseries data attached to the node',
            actions: 'View',
            searchView: 'View Timeseries Data',
            searchTimeRange: 'Search Time Range (UTC)',
            start: 'Start',
            end: 'End',
            runSearch: 'Search',
            visualization: 'Visualization',
            chooseVisualization: 'Choose Visualization',
            chooseColumns: 'Choose Columns',
            render: 'Render Visualization',
            return: 'return',
            startIndex: 'Start Index',
            endIndex: 'End Index',
            indexRange: 'Index Range',
            columnName: 'Column Name',
            dataSource: 'Data Source',
            type: 'Type',
            trace: 'Trace',
            resultLimit: 'Result Limit',
        },
        dataQuery: {
            deleteNode: 'Delete Node',
            deleteEdge: 'Delete Edge',
            nodeFiles: 'Files',
            nodeTimeseries: 'Timeseries Data',
            rawData: 'Raw Data',
            noRawDataAvailable: 'No Raw Data Available',
            rawDataKey: 'Raw Data Property Key',
            metadataKey: 'Metadata Property Key',
            metadataProperties: 'Metadata Properties',
            name: 'Name',
            value: 'Value',
            dataQuery: 'Data Query',
            results: 'Results',
            queryData: 'Query and Edit Data',
            list: 'List',
            json: 'JSON',
            graph: 'Graph',
            nodeInformation: 'Node Information',
            edgeInformation: 'Edge Information',
            selectNode: 'Select Node for more information',
            noResults: 'No Results',
            id: 'ID',
            metatypeName: 'Metatype',
            viewProperties: 'Properties',
            files: 'Files',
            copyID: 'Click to Copy ',
            createdAt: 'Created At',
            nodeID: 'ID',
            edgeID: 'ID',
            nodeType: 'Type',
            nodeProperties: 'Properties',
            edgeProperties: 'Properties',
            relType: 'Relationship',
            nodeHistory: 'Node History',
            edgeHistory: 'Edge History',
            originMetatype: 'Origin Metatype',
            destinationMetatype: 'Destination Metatype',
            linkType: 'Type',
            edges: 'Edges',
            nodeTags: 'Tags',
        },
        nodeTags: {
            id: 'ID',
            tagName: 'Tag Name',
            actions: 'Actions',
            attachedTags: 'Attached Tags',
            addTag: 'Add Tag',
            copyID: 'Click to Copy ID',
            selectTag: 'Select Tag',
        },
        edgeTags: {
            id: 'ID',
            tagName: 'Tag Name',
            actions: 'Actions',
            attachedTags: 'Attached Tags',
            addTag: 'Add Tag',
            copyID: 'Click to Copy ID',
            selectTag: 'Select Tag',
        },
        nodeFiles: {
            id: 'ID',
            fileName: 'File Name',
            fileSize: 'Size (KB)',
            lastModified: 'Last Modified',
            actions: 'Actions',
            copyID: 'Click to Copy ID',
            attachedFiles: 'Attached Files',
            addFile: 'Add File',
            selectFile: 'Select File to Upload',
        },
        ifcViewer: {
            rawProperties: 'Raw Properties',
            name: 'Name',
            close: 'Close',
            description: 'Description',
            loadWarning:
                'Loading an IFC file into the browser can be a resource and time consuming process. If the file is large, or your connection to Deep Lynx slow, it may take several minutes for the file to load and render. Please be patient.',
            loadModel: 'Load IFC File',
            resetModel: 'Reset IFC File',
            Model: 'Model',
            Properties: 'Properties',
        },
        exportMapping: {
            title: 'Export Type Mappings',
            export: 'Export',
            exportAll: 'Export All Mappings',
            cancel: 'Cancel',
            exportToFile: 'Export to File',
            exportToDataSource: 'Export to Data Source',
            selectContainer: 'Select Container',
            selectDataSource: 'Select Data Source',
        },
        createApiKey: {
            note: 'Note - optional',
            close: 'Close',
            formTitle: 'Generate New API Key/Secret',
            description:
                'The API Key/Secret pair you generate here will have all the same permissions as your user. It is NOT tied to this current container and users of this key/secret pair will have access to all containers and data you have permission for. Please use these keys cautiously.',
            successfullyCreated: 'WRITE DOWN YOUR SECRET - this is the only time you will be able to see it.',
            key: 'Key',
            secret: 'Secret',
            create: 'Generate',
            cancel: 'Cancel',
            createApiKey: 'Generate API Key',
            descriptionService:
                "The API Key/Secret pair you generate here will have all the permissions you've assigned the application. It is tied to this current container. Please use these keys cautiously.",
        },
        importMapping: {
            importMappings: 'Import Type Mappings',
            title: 'Import Type Mappings From File',
            cancel: 'Cancel',
            importFromFile: 'Import Mappings From File',
        },
        metatypes: {
            restoreMetatype: 'Restore removed Metatype',
            removeMetatype: 'Remove Metatype',
            created: 'Created',
            edited: 'Edited',
            removed: 'Removed',
            legendNote: "If you edit a Metatype's name, it may appear as if you created the metatype as we can no longer match it to the original ontology",
            metatypes: 'Metatypes',
            search: 'Search',
            create: 'Create',
            formTitle: 'New Metatype',
            name: 'Name',
            nameRequired: 'name required',
            description: 'Description',
            descriptionRequired: 'description required',
            actions: 'Actions',
            searchName: 'Search Name',
            searchDescription: 'Search Description',
            metatypeSuccessfullyCreated: 'Metatype created successfully',
            id: 'ID',
            copyID: 'Click to Copy ',
            listCreated: 'Created',
            listEdited: 'Edited',
            listDeleted: 'Deleted',
        },
        viewMetatype: {
            editMetatype: 'Edit Metatype',
            edit: 'Edit',
            name: 'Name',
            nameRequired: 'name required',
            description: 'Description',
            descriptionRequired: 'description required',
            close: 'Close',
            errorUpdatingAPI: 'Error communicating with Deep Lynx:',
            keys: 'Properties',
            actions: 'Actions',
            keyName: 'Name',
            keyDescription: 'Description',
            keyType: 'Data Type',
            keyActions: 'Actions',
            requiredField: 'Required Field',
            propertyName: 'Property Name',
            dataType: 'Data Type',
            defaultValue: 'Default Value',
        },
        viewMetatypeKey: {
            name: 'Name',
            propertyName: 'Property Name',
            dataType: 'Data Type',
            close: 'Close',
        },
        editMetatype: {
            editMetatype: 'Edit Metatype',
            edit: 'Edit',
            name: 'Name',
            nameRequired: 'name required',
            description: 'Description',
            descriptionRequired: 'description required',
            save: 'Save',
            cancel: 'Cancel',
            errorUpdatingAPI: 'Error communicating with Deep Lynx:',
            keys: 'Properties',
            actions: 'Actions',
            keyName: 'Name',
            keyDescription: 'Description',
            keyType: 'Data Type',
            keyActions: 'Actions',
            requiredField: 'Required Field',
        },
        editMetatypeRelationship: {
            close: 'Close',
            editMetatypeRelationship: 'Edit Metatype Relationship',
            edit: 'Edit',
            name: 'Name',
            nameRequired: 'name required',
            descriptionRequired: 'description required',
            description: 'Description',
            save: 'Save',
            cancel: 'Cancel',
            errorUpdatingAPI: 'Error communicating with Deep Lynx:',
            keys: 'Properties',
            actions: 'Actions',
            keyName: 'Name',
            keyDescription: 'Description',
            keyType: 'Data Type',
            keyActions: 'Actions',
            requiredField: 'Required Field',
        },
        createServiceUser: {
            description:
                'Creating an external application will give you the ability to generate API key/secret pairs and manage permissions for external applications which communicate with DeepLynx. Please keep in mind that newly created applications have no permissions by default, you should attempt to assign permissions as you see fit. Permissions can be edited after creation.',
            nameMissing: 'Name required',
            permissions: 'Permissions',
            createServiceUser: 'Add External Application',
            createTitle: 'Add External Application',
            name: 'Name',
            cancel: 'Cancel',
            save: 'Save',
            requiredField: 'Required Field',
        },
        deleteServiceUser: {
            deleteTitle: 'Remove External Application',
            cancel: 'Cancel',
            delete: 'Remove',
            in: 'in',
            warning:
                "Removing this external application will invalidate all generated API Key/Secret pairs, terminating this application's access to Deep Lynx. Only remove applications you are sure are no longer in use, or who you wish to terminate their access.",
        },
        serviceUserPermissions: {
            title: 'Manage Permissions',
            containers: 'Container Permissions',
            containersDescription:
                'These permissions dictate which container level actions an application can perform. Generally administrative tasks such as editing container settings and editing or removing the container entirely.',
            ontology: 'Ontology Permissions',
            ontologyDescription:
                'These permissions dictate the actions an application can perform regarding the ontology. These permissions allow an application to view and edit the ontology.',
            data: 'Data Permissions',
            dataDescription:
                'These permissions dictate the actions an application can perform regarding the data and data sources. These permissions allow a user to view and edit the data stored in the graph as well as manage data sources and the type mapping system.',
            users: 'User Permissions',
            usersDescription:
                "These permissions dictate the actions an application can perform regarding the container's users. This allows the application to manage a user's permissions inside the container, as well as allowing them to remove and add users to the container.",
        },
        viewMetatypeRelationship: {
            close: 'Close',
            editMetatypeRelationship: 'Edit Metatype Relationship',
            edit: 'Edit',
            name: 'Name',
            nameRequired: 'name required',
            descriptionRequired: 'description required',
            description: 'Description',
            save: 'Save',
            cancel: 'Cancel',
            errorUpdatingAPI: 'Error communicating with Deep Lynx:',
            keys: 'Properties',
            actions: 'Actions',
            keyName: 'Name',
            keyDescription: 'Description',
            keyType: 'Data Type',
            keyActions: 'Actions',
            requiredField: 'Required Field',
        },
        editMetatypeKey: {
            edit: 'Edit',
            name: 'Name',
            nameRequired: 'name required',
            propertyNameRequired: 'property name required',
            dataTypeRequired: 'data type required',
            descriptionRequired: 'description required',
            propertyName: 'Property Name',
            propertyNameHelp: 'JSON compatible property name',
            description: 'Description',
            dataType: 'Data Type',
            required: 'Required',
            requiredSmall: 'required',
            validation: 'Validation',
            regex: 'Regular Expression',
            regexHelp: 'Enter a valid regular expression for matching against future value',
            max: 'Max # of Matches',
            maxHelp: 'Maximum matches',
            min: 'Min # of Matches',
            minHelp: 'Minimum matches',
            defaultValue: 'Default Value',
            options: 'Options',
            save: 'Save',
            cancel: 'Cancel',
            errorUpdatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        createMetatypeKey: {
            newKey: 'New Property',
            name: 'Name',
            nameRequired: 'name required',
            propertyNameRequired: 'property name required',
            dataTypeRequired: 'data type required',
            descriptionRequired: 'description required',
            propertyName: 'Property Name',
            propertyNameHelp: 'JSON compatible property name',
            description: 'Description',
            dataType: 'Data Type',
            required: 'Required',
            requiredSmall: 'required',
            validation: 'Validation',
            regex: 'Regular Expression',
            regexHelp: 'Enter a valid regular expression for matching against future value',
            max: 'Max # of Matches',
            maxHelp: 'Maximum matches',
            min: 'Min # of Matches',
            minHelp: 'Minimum matches',
            defaultValue: 'Default Value',
            options: 'Options',
            create: 'Create',
            cancel: 'Cancel',
            errorUpdatingAPI: 'Error communicating with Deep Lynx:',
            errorCreatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        editMetatypeRelationshipKey: {
            edit: 'Edit',
            name: 'Name',
            nameRequired: 'name required',
            propertyNameRequired: 'property name required',
            dataTypeRequired: 'data type required',
            descriptionRequired: 'description required',
            propertyName: 'Property Name',
            propertyNameHelp: 'JSON compatible property name',
            description: 'Description',
            dataType: 'Data Type',
            required: 'Required',
            requiredSmall: 'required',
            validation: 'Validation',
            regex: 'Regular Expression',
            regexHelp: 'Enter a valid regular expression for matching against future value',
            max: 'Max # of Matches',
            maxHelp: 'Maximum matches',
            min: 'Min # of Matches',
            minHelp: 'Minimum matches',
            defaultValue: 'Default Value',
            options: 'Options',
            save: 'Save',
            cancel: 'Cancel',
            errorUpdatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        viewMetatypeRelationshipKey: {
            close: 'Close',
            edit: 'Edit',
            name: 'Name',
            nameRequired: 'name required',
            propertyNameRequired: 'property name required',
            dataTypeRequired: 'data type required',
            descriptionRequired: 'description required',
            propertyName: 'Property Name',
            propertyNameHelp: 'JSON compatible property name',
            description: 'Description',
            dataType: 'Data Type',
            required: 'Required',
            requiredSmall: 'required',
            validation: 'Validation',
            regex: 'Regular Expression',
            regexHelp: 'Enter a valid regular expression for matching against future value',
            max: 'Max # of Matches',
            maxHelp: 'Maximum matches',
            min: 'Min # of Matches',
            minHelp: 'Minimum matches',
            defaultValue: 'Default Value',
            options: 'Options',
            save: 'Save',
            cancel: 'Cancel',
            errorUpdatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        createMetatypeRelationshipKey: {
            newKey: 'New Property',
            name: 'Name',
            nameRequired: 'name required',
            propertyNameRequired: 'property name required',
            dataTypeRequired: 'data type required',
            descriptionRequired: 'description required',
            propertyName: 'Property Name',
            propertyNameHelp: 'JSON compatible property name',
            description: 'Description',
            dataType: 'Data Type',
            required: 'Required',
            requiredSmall: 'required',
            validation: 'Validation',
            regex: 'Regular Expression',
            regexHelp: 'Enter a valid regular expression for matching against future value',
            max: 'Max # of Matches',
            maxHelp: 'Maximum matches',
            min: 'Min # of Matches',
            minHelp: 'Minimum matches',
            defaultValue: 'Default Value',
            options: 'Options',
            create: 'Create',
            cancel: 'Cancel',
            errorUpdatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        createMetatype: {
            createMetatype: 'Create Metatype',
            newMetatype: 'New Metatype',
            name: 'Name',
            nameRequired: 'name required',
            description: 'Description',
            descriptionRequired: 'description required',
            save: 'Save',
            cancel: 'Cancel',
            errorCreatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        createMetatypeRelationship: {
            createMetatypeRelationship: 'Create Metatype Relationship',
            newMetatypeRelationship: 'New Metatype Relationship',
            name: 'Name',
            nameRequired: 'name required',
            description: 'Description',
            descriptionRequired: 'description required',
            save: 'Save',
            cancel: 'Cancel',
            errorCreatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        createMetatypeRelationshipPair: {
            createMetatypeRelationshipPair: 'Create Metatype Relationship Pair',
            formTitle: 'New Metatype Relationship Pair',
            name: 'Name',
            description: 'Description',
            nameRequired: 'name required',
            descriptionRequired: 'description required',
            originRequired: 'origin metatype required',
            relationshipRequired: 'relationship required',
            requiredSmall: 'required',
            originMetatype: 'Origin Metatype',
            relationship: 'Relationship',
            destinationMetatype: 'Destination Metatype',
            relationshipType: 'RelationshipType',
            cancel: 'Cancel',
            save: 'Save',
            relationshipTypeRequired: 'relationship required',
            destinationRequired: 'destination metatype required',
            errorCreatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        editMetatypeRelationshipPair: {
            editMetatypeRelationshipPair: 'Edit Metatype Relationship Pair',
            formTitle: 'Edit Metatype Relationship Pair',
            name: 'Name',
            nameRequired: 'name required',
            descriptionRequired: 'description required',
            description: 'Description',
            requiredSmall: 'required',
            originMetatype: 'Origin Metatype',
            relationship: 'Relationship',
            destinationMetatype: 'Destination Metatype',
            relationshipType: 'RelationshipType',
            cancel: 'Cancel',
            save: 'Save',
            relationshipTypeRequired: 'relationship required',
            originRequired: 'origin metatype required',
            destinationRequired: 'destination metatype required',
            relationshipRequired: 'relationship required',
            errorEditingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        viewMetatypeRelationshipPair: {
            editMetatypeRelationshipPair: 'Edit Metatype Relationship Pair',
            formTitle: 'Edit Metatype Relationship Pair',
            name: 'Name',
            nameRequired: 'name required',
            descriptionRequired: 'description required',
            description: 'Description',
            requiredSmall: 'required',
            originMetatype: 'Origin Metatype',
            relationship: 'Relationship',
            destinationMetatype: 'Destination Metatype',
            relationshipType: 'RelationshipType',
            close: 'Close',
            relationshipTypeRequired: 'relationship required',
            originRequired: 'origin metatype required',
            destinationRequired: 'destination metatype required',
            relationshipRequired: 'relationship required',
            errorEditingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        metatypeRelationships: {
            relationshipSuccessfullyCreated: 'Metatype Relationship created successfully',
            metatypeRelationships: 'Metatype Relationships',
            formTitle: 'New Relationship',
            newRelationship: 'New Relationship',
            name: 'Name',
            description: 'Description',
            actions: 'Actions',
            searchName: 'Search Name',
            searchOrigin: 'Search Origin Metatype',
            searchDestination: 'Search Destination Metatype',
            searchDescription: 'Search Description',
            id: 'ID',
            copyID: 'Click to Copy ',
        },
        metatypeRelationshipPairs: {
            formTitle: 'New Relationship Pair',
            name: 'Name',
            description: 'Description',
            actions: 'Actions',
            searchName: 'Search Name',
            searchDescription: 'Search Description',
            originMetatype: 'Search Origin Metatype',
            originName: 'Origin',
            destinationMetatype: 'Search Destination Metatype',
            destinationName: 'Destination',
            relationship: 'Search Relationship',
            pairSuccessfullyCreated: 'Successfully Created Metatype Relationship Pair',
            id: 'ID',
            copyID: 'Click to Copy ',
        },
        ontologyUpdate: {
            formTitle: 'Update Taxonomy via Ontology File',
        },
        dataSources: {
            dataSources: 'Data Sources',
            timeseriesDatasources: 'Timeseries Data Sources',
            copyID: 'Copy ID to clipboard ',
            id: 'ID',
            create: 'Create',
            formTitle: 'New Data Source',
            title: 'Data Sources',
            name: 'Name',
            adapterType: 'Adapter Type',
            active: 'Active',
            actions: 'Actions',
            archived: 'archived',
        },
        createDataSource: {
            timeout: 'Timeout (ms)',
            value: 'Value',
            key: 'Key',
            chunkInterval: 'Chunk Interval',
            chunkIntervalHelp: 'Help Deciding Chunk Interval',
            propertyName: 'Property Name',
            timeseries: 'Timeseries',
            unique: 'Unique',
            aveva: 'Aveva',
            p6: 'P6',
            description: 'Description',
            jazz: 'Jazz',
            http: 'HTTP Poller',
            standard: 'Standard',
            standardDescription:
                'This is the standard, passive data source for DeepLynx. Data is uploaded to this data source either manually or from external programs.',
            httpDescription:
                'This data source is an active poller against a user provided HTTP endpoint. Each poll will take the response and create an import for it, passing a query parameter with the last successful poll time.',
            jazzDescription: 'This is the Jazz/Doors Next Generation data source. This allows you to pull in artifacts automatically from the Jazz/DNG server.',
            avevaDescription: 'This is a wrapper over the standard data source, but contains Aveva Everything3D specific configuration values.',
            p6Description: 'This is a wrapper over the standard data source, but contains Oracle Primavera P6 specific configuration values.',
            timeseriesDescription:
                'This data source is built specifically for timeseries data. Users must design a timeseries data table and set attachment parameters prior to successful creation. Users upload timeseries data directly to this source, bypassing the standard type mapping system. You can find more information and help ',
            here: 'here',
            tableDesignHelpLink: 'https://github.com/idaholab/Deep-Lynx/wiki/Timeseries-Data-Sources',
            newDataSource: 'New Data Source',
            formTitle: 'Create New Data Source',
            name: 'Name',
            sourceType: 'Select Data Source Type',
            dataType: 'Return Data Type',
            authMethod: 'Authentication Method',
            pollInterval: 'Poll Interval (in minutes)',
            create: 'Create',
            cancel: 'Cancel',
            enable: 'Enable',
            username: 'Username',
            password: 'Password',
            token: 'Authentication Token',
            projectName: 'Project Name',
            secure: 'Use HTTPS',
            ignoreDBs: 'Ignored Database Types',
            ignoreElements: 'Ignored Element Types',
            recordLimit: 'Records Per Call Limit',
            artifactTypes: 'Artifact Types for Retrieval',
            endpoint: 'HTTP(S) Endpoint',
            typeToAdd: 'Type and hit "Enter" to add entry',
            ifcElementTypes: 'Element Types for IFC Generation',
            ifcSettingsTitle: 'IFC Settings',
            stopNodes: 'Ignored Properties',
            stopNodesHelp:
                'Ignored Properties tell DeepLynx what JSON properties, CSV columns, or XML types to ignore when creating the type mapping. For example if you have a two identical payloads, but one has an additional field, you could tell DeepLynx to ignore the additional field and the resulting type mapping would continue to match.',
            valueNodes: 'Property Value vs. Type',
            valueNodesHelp:
                "Property Value vs. Type tells DeepLynx that a JSON property, CSV column, or XML type should have it's value examined as well as examining its type. This allows you to send in identical payload structures but create a different type mapping depending on the value of a property. ",
            dangerZone: 'Advanced Settings',

            dangerZoneWarning:
                'These settings are either experimental or highly technically and could adversely affect the operation of your Data Source. Modify these settings only if you know what you are doing',
            ifcSettings: {
                format: 'IFC Format',
                dataLevel: 'Data Level',
                logLevel: 'Log Level',
                arcTolerance: 'Arc Tolerance',
                componentLevel: 'Component Level',
                tube: 'Tube',
                cl: 'CL',
                insuTranslucency: 'Insular Translucency',
                obstTranslucency: 'Obstruction Translucency',
                root: 'Root',
                pipe: 'Pipe',
                nozzle: 'Nozzle',
                structure: 'Structure',
                cable: 'Cable',
            },
            p6endpoint: 'P6 Endpoint',
            p6projectID: 'P6 Project ID',
            p6alias: 'Source Alias',
            p6defaultConfig: 'P6 Default Configurations',
            p6defaultConfigDescription:
                'Configure a default server address and project ID to help container users more easily set up P6. This config can be selected from a dropdown when creating a new P6 datasource.',
            addConfiguration: 'Create New Configuration',
            customP6config: 'Select a P6 source configuration',
            dataRetentionDays: 'Raw Data Retention Policy (days)',
            dataRetentionHelp:
                'This controls how many days Deep Lynx will retain the raw data you import. A value of 0 will retain no raw data after processing and a value of -1 will retain raw data indefinitely.',
        },
        editDataSource: {
            timeout: 'Timeout (ms)',
            p6: 'P6',
            aveva: 'Aveva',
            jazz: 'Jazz',
            http: 'HTTP Poller',
            standard: 'Standard',
            newDataSource: 'New Data Source',
            formTitle: 'Edit Data Source',
            name: 'Name',
            sourceType: 'Select Data Source Type',
            dataType: 'Return Data Type',
            authMethod: 'Authentication Method',
            pollInterval: 'Poll Interval (in minutes)',
            create: 'Save',
            cancel: 'Cancel',
            enable: 'Enable',
            username: 'Username (blank for security)',
            password: 'Password (blank for security)',
            token: 'Authentication Token (blank for security)',
            projectName: 'Project Name',
            secure: 'Use HTTPS',
            ignoreDBs: 'Ignored Database Types',
            ignoreElements: 'Ignored Element Types',
            recordLimit: 'Records Per Call Limit',
            artifactTypes: 'Artifact Types for Retrieval',
            endpoint: 'HTTP(S) Endpoint',
            typeToAdd: 'Type and hit "Enter" to add entry',
            ifcElementTypes: 'Element Types for IFC Generation',
            ifcSettingsTitle: 'IFC Settings',
            stopNodes: 'Stop Nodes',
            valueNodes: 'Value Nodes',
            dangerZone: 'Advanced Settings',

            dangerZoneWarning:
                'These settings are either experimental or highly technically and could adversely affect the operation of your Data Source. Modify these settings only if you know what you are doing',
            ifcSettings: {
                format: 'IFC Format',
                dataLevel: 'Data Level',
                logLevel: 'Log Level',
                arcTolerance: 'Arc Tolerance',
                componentLevel: 'Component Level',
                tube: 'Tube',
                cl: 'CL',
                insuTranslucency: 'Insular Translucency',
                obstTranslucency: 'Obstruction Translucency',
                root: 'Root',
                pipe: 'Pipe',
                nozzle: 'Nozzle',
                structure: 'Structure',
                cable: 'Cable',
            },
            p6endpoint: 'P6 Endpoint',
            p6projectID: 'P6 Project ID',
            dataRetentionDays: 'Raw Data Retention Policy (days)',
            dataRetentionHelp:
                'This controls how many days Deep Lynx will retain the raw data you import. A value of 0 will retain no raw data after processing and a value of -1 will retain raw data indefinitely.',
        },
        deleteDataSource: {
            deleteDataSource: 'Delete Data Source',
            deleteTitle: 'Delete Data Source Permanently',
            archiveTitle: 'Archive Data Source',
            deleteWarning:
                'Deleting a Data Source means it will be unrecoverable to even administrative users. Only delete Data Sources you know are no longer needed or that were created in error. When in doubt, please archive your Data Source instead. Archiving a Data Source maintains all data imported and all type mappings created with associations to the source. It is generally the preferred action.',
            forceDeleteWarning:
                'ATTENTION: This Data Source has data, type mappings, or pending imports associated with it. Deleting this Data Source may adversely affect your container - force deletion at your own risk, this cannot be reversed.',
            archiveWarning:
                'Archiving a Data Source will stop all data collection that it might currently be performing. Data collected by this source and mappings created in response to that data will not be affected.',
            cancel: 'Cancel',
            archive: 'Archive',
            delete: 'Delete',
            forceDelete: 'Force Delete',
            in: 'in',
            withData: 'Delete all data ingested by Data Source',
            withDataWarning:
                'Data may have already been ingested for this Data Source. We will remove this data by default so as to avoid "orphaned" data, or data that we cannot trace back to an individual Data Source. If you would like to keep this data and orphan it, please uncheck the box below.',
        },
        configuredSource: {
            addNew: 'Add New Configured Source',
            new: 'New Configured Source',
            edit: 'Edit Configured Source',
            delete: 'Delete Configured Source',
            confirmDelete: 'Would you like to delete this pre-set Data Source configuration?',
        },
        deleteContainer: {
            deleteContainer: 'Delete Container',
            deleteTitle: 'Permanently Delete Container',
            warning:
                'Everything associated with this container - such as data, mappings and ontology versions - will be completely removed. This cannot be undone. Please verify that all users of the container are ready for its deletion',
            cancel: 'Cancel',
            delete: 'Permanently Delete Container',
            in: 'in',
        },
        deleteDataImport: {
            deleteTitle: 'Delete Import',
            deleteWarning:
                'Deleting an Import might have unintended consequences, especially if you are deleting data generated from that import. This action cannot be undone, even by an admin',
            cancel: 'Cancel',
            delete: 'Delete',
            in: 'in',
            withData: 'Delete All Data Generated From Import',
        },
        reprocessDataImport: {
            title: 'Reprocess Import',
            warning:
                'This will initiate a reprocessing of all data in this import. All previously ingested data from this import will be archived so as not to cause conflicts.',
            cancel: 'Cancel',
            reprocess: 'Reprocess',
            in: 'in',
            tooltip: 'Reprocess Data from Import',
        },
        reprocessDataSource: {
            title: 'Reprocess Data Source',
            warning:
                'This will initiate a reprocessing of all data ingested by this data source. All previously ingested data from this source will be archived so as not to cause conflicts.',
            cancel: 'Cancel',
            reprocess: 'Reprocess',
            in: 'in',
            tooltip: 'Reprocess Data from Data Source',
        },
        refreshData: {
            reprocess: 'Reprocess Data',
            updateAlert: 'You have just updated your type mappings. Would you like to reprocess your data or continue editing your type mappings?',
            later: 'Remind Me Later',
            continue: 'Continue Mapping',
            reprocessWarning:
                'Clicking the reprocess button will reprocess all data in this datasource. Please ensure all type mappings are up to date and enabled before reprocessing.',
            cancel: 'Cancel',
        },
        deleteTransformation: {
            deleteTransformation: 'Delete Transformation',
            deleteTitle: 'Delete Transformation Permanently',
            archiveTitle: 'Archive Transformation',
            deleteWarning:
                'Deleting a Transformation means it will be unrecoverable to even administrative users. Only delete transformations you know are no longer needed or that were created in error. When in doubt, please archive your Transformation instead. Archiving a Transformation will maintain all data created from it, while stopping all new data generation. It is generally the preferred action.',
            forceDeleteWarning:
                'ATTENTION: This Transformation has data associated with it. Deleting this Transformation may adversely affect your container - force deletion at your own risk, this cannot be reversed.',
            archiveWarning:
                'Archiving a Transformation will not affect any data that has been generated using it. No future data will be generated using this Transformation, and you will not be able to edit it after archiving.',
            cancel: 'Cancel',
            archive: 'Archive',
            delete: 'Delete',
            forceDelete: 'Force Delete',
            in: 'in',
            withData: 'Delete all data associated with Transformation',
            withDataWarning:
                'Data may have already been generated using this Transformation. We will remove this data by default so as to avoid "orphaned" data, or data that we cannot trace back to an individual Transformation. If you would like to keep this data and orphan it, please uncheck the box below.',
        },
        dataMapping: {
            keysOrValues: 'Payload key or static value',
            parentParameters: 'Parent Connection Parameters',
            childParameters: 'Child Connection Parameters',
            convertToParameters: 'Convert to Parameters',
            chooseMetatypeKey: 'Select Property',
            here: 'here',
            mappingHelp:
                'Mapping allows you to specify what kind of record this transformation should produce. Each transformation can produce either a relationship or node. Further information will be requested as you work through the form.',
            nodeAttachmentParameters: 'Node Attachment Parameters - optional',
            nodeAttachmentParametersHelp:
                'These parameters dictate which nodes should display this timeseries data. More information can be found on the wiki.',
            type: 'Filter Type',
            operators: 'Operators',
            chunkInterval: 'Chunk Interval',
            chunkIntervalHelp: 'Help Deciding Chunk Interval',
            nameRequirements:
                'Names must start with a letter and contain only letters, numbers and underscores. Spaces are not allowed and it must be between 2 and 30 characters in length.',
            isPrimaryTimestamp: 'Primary Timestamp',
            columnNameRequirements:
                'Column names must start with a letter and must contain only lowercase letters, numbers and underscores - must be between 2 and 30 characters in length.',
            tabularData: 'Time-series Data',
            deprecated: 'Deprecated Transformation',
            deprecatedTooltip:
                "These refer to transformations who's types and keys no longer use the current ontology versions. Any data resulting from these transformations will refer to a previous ontology version and not the current. Consider updating them",
            parentInformation: 'Parent Information',
            childInformation: 'Child Information',
            dataSourceRelationshipHelp: 'Choose the Data Source the parent and child record belong to.',
            metatypeRelationshipHelp: 'Choose the Metatype that the parent and child records belong to.',
            mapping: 'Mapping',
            configuration: 'Configuration',
            onConversionError: 'On Conversion Errors',
            onKeyExtractionError: 'On Key Extraction Errors',
            fail: 'Fail All Keys',
            failOnRequired: 'Fail Required Keys Only',
            ignore: 'Ignore',
            autopopulate: 'Autopopulate Keys',
            viewArchivedTransformation: 'View Archived Transformation',
            importedSuccessfully: 'Import Status',
            mappingsImported: 'Mappings Successfully Imported',
            record: 'Node',
            relationship: 'Relationship',
            typeMapping: 'Type Mapping',
            resultingTypeName: 'Metatype/Metatype Relationship/Name',
            applicableToCurrentData: 'Applicable To Sample',
            metatypePropertyMapping: 'Property Mapping',
            metatypeRelationshipPropertyMapping: 'Relationship Property Mapping',
            expression: 'Expression',
            actions: 'Actions',
            newTransformationButton: 'Create New Transformation',
            editTransformation: 'Edit Transformation',
            and: 'AND',
            or: 'OR',
            name: 'Name',
            subexpressions: 'Subexpressions',
            subexpressionsHelp:
                'Subexpressions allow for more complicated conditions to be created by enabling the use of AND/OR expressions when applying conditions.',
            chooseRelationship: 'Choose Relationship',
            createNewTransformation: 'Create New Transformation',
            optional: 'optional',
            editingTimeseriesDisabled:
                'Currently it is not possible for you to edit the table generated as part of this transformation. If you require a different structure, create a new transformation.',
            rootArray: 'Root Array',
            rootArrayHelp: 'Selecting a root array means this transformation will be applied for every object contained in the selected root array.',
            conditions: 'Condition(s)',
            conditionsHelp: 'Your transformation will only be applied to the data when these conditions are met.',
            key: 'Key',
            keys: 'Keys',
            operator: 'Operator',
            value: 'Value',
            addCondition: 'Save Condition',
            keyHelp: 'Key on original payload to which the operator will be applied',
            operatorHelp: 'Operators denote a logical operation',
            uniqueIdentifierHelp: 'The payload key which denotes an ID or otherwise unique identifier for the created node/edge',
            onConflictHelp: 'What Deep Lynx should do if the result of the transformation creates a node/edge that already exists in the system.',
            mapPayloadKey: 'type or select payload key',
            required: 'required',
            create: 'Create',
            edit: 'Save',
            reset: 'Reset',
            cancel: 'Cancel',
            viewSamplePayload: 'View Sample Payload',
            samplePayloadHelp: 'This is an example of the data this transformation will be applied to.',
            constantValue: 'constant value',
            selectDataSource: 'Select Data Source',
            currentMappings: 'Current Mappings',
            needsTransformations: 'Needs Transformations',
            resultingDataType: 'Resulting Data Type',
            chooseMetatype: 'Choose Metatype',
            typeToSearch: 'Type to Search Available Metatypes',
            typeToSearchRelationships: 'Type to Search Available Metatype Relationship Pairs',
            typeKey: 'Type Key',
            uniqueIdentifierKey: 'Unique Identifier Key',
            propertyMapping: 'Property Mapping',
            payloadKey: "Payload's Key",
            samplePayload: 'Sample Payload',
            metatype: 'Metatype',
            onConflict: 'On Conflict',
            metatypeRelationship: 'Relationship',
            mix: 'Metatype & Relationship',
            originKey: 'Parent ID Key',
            destinationKey: 'Child ID Key',
            originDestinationKeyHelp:
                'By selecting a Parent Key you determine that this record is a child of the value of that Parent Key, opposite is true of selecting a Child Key.',
            active: 'Enable Type Mapping',
            transformationsTableTitle: 'Transformations',
            typeMappingHelp:
                'The Type Mapping record and Transformation records are the workhorses of the type mapping system. A Type Mapping contains information as to which container and data source the type mapping belongs, a shape hash which is used to determine which objects to apply the type mapping to, and information denoting status. A Transformation belongs to a Type Mapping, and a Type Mapping can have as many Transformations as it wants. These are the individual actions that Deep Lynx should perform on an object matching a certain Type Mapping. Transformations are applied to an object to produce either a node or edge record, ready to be inserted into the Deep Lynx database.',
            currentDataSet: 'Current Data Set',
            chooseResultingMetatype: 'Choose Resulting Metatype',
            chooseResultingRelationship: 'Choose Resulting Metatype Relationship Pair',
            typeToSearchRelationship: 'Type to Search Available Metatype Relationship Pairs',
            enabled: 'Enabled',
            createdAt: 'Created At',
            resultingTypes: 'Metatype/Metatype Relationship/Name',
            requiredField: 'Required Field',
            dateFormatString: 'Date Format String(blank for ISO)',
            dateFormatStringHelp: 'Formatting your date/time - if you do not include a timezone, we will assume UTC time.',
            selectNodeID: 'Target Node',
            selectNodeIDHelp: 'These fields allow you to select which node this time series data should be attached to.',
            nodeIDKey: 'Node ID Key',
            nodeID: 'Original Node ID',
            tableDesign: 'Table Design',
            tableDesignHelp: 'You must design a database table in which to store this time series data. More information can be found on our wiki.',
            columnName: 'Column Name',
            columnDataType: 'Column Data Type',
            dataType: 'Data Type',
            addColumn: 'Add Column',
            configurationHelp: 'Transformation configuration options, generally how to deal with errors on key mapping and conversion.',
            done: 'Done',
            metadataMappingTitle: 'Metadata Property Mapping',
            metadataMappingHelp:
                'Select any additional relevant payload keys to be included as metadata. These are properties that may not fit into the ontology but are still important to hold on to.',
            metadataMappingKey: 'Select Additional Properties as Metadata',
        },
        deleteTypeMapping: {
            deleteTypeMapping: 'Delete Type Mapping',
            deleteTitle: 'Delete Data Type Mapping',
            deleteWarning:
                'Deleting this mapping will permanently remove it from the system - even administrators cannot undo this. A reminder that mappings are auto-generated by Data Sources as they see unique data structures - this mapping may be generated again automatically after deletion.',
            unableToDelete:
                'This mapping has transformations attached to it! You will not be able to delete this mapping until all transformations are removed.',
            cancel: 'Cancel',
            delete: 'Delete',
            in: 'in',
        },
        typeTransformation: {
            existingTransformationTitle: 'Transformation:',
            newTransformationTitle: 'New Transformation Options',
            newTransformationButton: 'Create New Transformation',
            formTitle: 'New Transformation',
            currentDataSet: 'Current Data Set',
        },
        dataManagement: {
            nodeTableTitle: 'Nodes',
            edgeTableTitle: 'Edges',
            metatype: 'Metatype',
            name: 'Name',
            properties: 'Properties',
            originNode: 'Origin Node',
            destinationNode: 'Destination Node',
            relationship: 'Relationship',
            relationshipType: 'Relationship Type',
            createdAt: 'Created At',
            id: 'ID',
            viewDeleteData: 'Actions',
            successfullyDeleted: 'Data Successfully Deleted',
        },
        createNode: {
            createNode: 'Create Node',
            formTitle: 'Create Node',
            metatype: 'Metatype',
            metatypeRequired: 'metatype required',
            properties: 'Properties',
            save: 'Save',
            cancel: 'Cancel',
            errorCreatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        editNode: {
            formTitle: 'Properties',
            keyName: 'Name',
            value: 'Value',
            type: 'Type',
            editNode: 'Edit Node',
            edit: 'Edit',
            name: 'Name',
            nameRequired: 'name required',
            description: 'Description',
            descriptionRequired: 'description required',
            save: 'Save',
            cancel: 'Cancel',
            errorUpdatingAPI: 'Error communicating with Deep Lynx:',
            keys: 'Properties',
            actions: 'Actions',
            keyDescription: 'Description',
            keyType: 'Data Type',
            keyActions: 'Actions',
            requiredField: 'Required Field',
            addProperty: 'Add Property',
        },
        createEdge: {
            createEdge: 'Create Edge',
            formTitle: 'Create Edge',
            originNode: 'Origin Node',
            originNodeRequired: 'origin node required',
            destinationNode: 'Destination Node',
            destinationNodeRequired: 'destination node required',
            relationship: 'Relationship',
            relationshipRequired: 'relationship required',
            save: 'Save',
            cancel: 'Cancel',
            errorCreatingAPI: 'Error communicating with Deep Lynx:',
            requiredField: 'Required Field',
        },
        login: {
            username: 'Email',
            password: 'Password',
            login: 'Login',
            windows: 'Login with Windows',
            deepLynx: 'Login with Deep Lynx',
            needAccount: 'Need an Account?',
            forgotPassword: 'Forgot Password?',
        },
        register: {
            title: 'Register for Account',
            name: 'Name',
            email: 'Email',
            password: 'Password',
            confirmPassword: 'Confirm Password',
            submit: 'Register',
            home: 'Return to Login',
            successful:
                'User created successfully. An email will be sent to validate your account. Please return to the Login screen to begin using Deep Lynx.',
        },
        resetPassword: {
            title: 'Reset Password',
            email: 'Email',
            emailConfirm: 'Confirm Email',
            submit: 'Submit',
            validEmail: 'Email must be valid',
            successful: 'Successful: If a user with this email exists they will receive a password containing instructions on how to reset their password.',
            home: 'Return to Login',
            password: 'Enter New Password',
            confirmPassword: 'Confirm New Password',
        },
        ontologyToolbar: {
            mode: 'Ontology Versioning Mode',
            beta: 'beta',
            selectChangelist:
                'Select or create a changelist in order to use edit mode. Note that newly created changelists may take a few minutes to generate fully before they are able to be selected.',
            viewMode: 'View',
            editMode: 'Edit',
            activeChangelist: 'Active Changelist',
            current: 'current',
            ontologyVersion: 'Ontology Version',
        },
        createChangelist: {
            formTitle: 'Create New Changelist',
            name: 'Name',
            description: 'Description',
            cancel: 'Cancel',
            save: 'Save',
            newChangelistButton: 'New Changelist',
            creationNote:
                'Changelist creation may take upwards of 5 minutes to complete. Your changelist will have a status of "generating" until it is ready to be edited. Please be patient.',
        },
        ontologyVersioning: {
            ontologyVersions: 'Ontology Versions',
            changelists: 'Changelists',
            id: 'ID',
            name: 'Name',
            description: 'Description',
            actions: 'Actions',
            status: 'Status',
            publishedAt: 'Published At',
            approveChangelist: 'Approve Changelist',
            deleteChangelist: 'Delete Changelist',
            sendApproval: 'Send Changelist for Approval',
            applyChangelist: 'Apply Changelist',
            revokeApproval: 'Reject Changelist',
            rollbackOntology: 'Rollback to this Ontology Version (creates changelist for further approval)',
        },
        containers: {
            savedSuccessfully: 'Settings saved successfully',
            or: 'Or',
            title: 'Manage Containers',
            name: 'Name',
            description: 'Description',
            newContainerButton: 'Create New Container',
            editContainersTitle: 'Edit Container',
            actions: 'Actions',
            formTitle: 'Create New Container',
            owlUrlHelp: 'A URL to an .owl file - used to auto-populate the ontology',
            owlFileHelp: 'An .owl file - used to auto-populate the ontology',
            urlOwlFile: 'URL to .owl File',
            optional: 'optional',
            owlFile: '.owl File',
            importHelp: 'Need Help? Details on creating or updating a container via an ontology file can be found on our',
            importWikiLink: 'https://github.com/idaholab/Deep-Lynx/wiki/Creating-an-Ontology#importing-an-ontology',
            ontologyVersioningEnabled: 'Ontology Versioning Enabled',
            rawRetentionEnabled: 'Raw Data Preservation Enabled',
            ontologyVersioningHelp: 'Toggle whether or not this container will maintain historical versions of the ontology.',
            rawRetentionHelp: 'Toggle whether or not this data source will preserve data indefinitely and display original data records for nodes and edges',
        },
        containerSelect: {
            container: 'Container',
            or: 'or',
            continue: 'Continue',
            choose: 'Please choose an initial container to get started. A container is like a project, and it consists of an ontology and the data stored under that ontology',
            logout: 'Logout',
            acceptInvite: 'Accept Invite',
            acceptInviteLong: 'Accept Invitation to a Container',
            needHelp: 'Need Help? Learn more on our',
            wiki: 'Wiki.',
            wikiLink: 'https://github.com/idaholab/Deep-Lynx/wiki/',
        },
        users: {
            createdAt: 'Created At',
            title: 'Manage Users',
            newUser: 'New User',
            name: 'Name',
            email: 'Email',
            admin: 'Admin',
            actions: 'Actions',
            password: 'Password',
            confirmPassword: 'Confirm Password',
            users: 'Users',
            containers: 'Containers',
            assignContainerRoles: 'Container Roles',
            editUserTitle: 'Edit User',
            assignRole: 'Assign Role',
            role: 'Role',
            cancel: 'Cancel',
        },
        containerUsers: {
            successfullyInvited: 'User successfully  invited',
            title: 'Manage Users',
            newUser: 'New User',
            name: 'Name',
            email: 'Email',
            admin: 'Admin',
            actions: 'Actions',
            password: 'Password',
            confirmPassword: 'Confirm Password',
            users: 'Users',
            containers: 'Containers',
            assignContainerRoles: 'Container Roles',
            editUserTitle: 'Edit User',
            assignRole: 'Assign Role',
            role: 'Role',
            cancel: 'Cancel',
            close: 'Close',
            successfullySetRole: 'Role Assigned Successfully',
        },
        settings: {
            accessKeyDescription: 'Generate and remove API access keys for your user.',
            key: 'Key',
            accessKeyTitle: 'Manage Access Keys',
            generateKey: 'Generate New Key',
            accessKeyFormTitle: 'Generate New Key',
            actions: 'Actions',
            title: 'Container Settings',
            explanation: "This page allows you to make changes to your currently selected container. Note that you cannot change your container's name",
        },
        dataImports: {
            upgradeMappingsWarning:
                'Upgrading type mappings will automatically attempt to convert all mappings and their transformations to use metatypes and metatype relationships from the current ontology vs. the one under which they were originally created. Please make sure this is what you want before you attempt to upgrade.',
            copyID: 'Click to copy ID',
            tableTitle: 'Imports',
            dataView: 'Import Data',
            importTableTitle: 'Import Data',
            viewData: 'Raw Data',
            editTypeMapping: 'Type Mapping',
            createdAt: 'Created At',
            percentageProcessed: '% Processed',
            status: 'Status',
            message: 'Last Message',
            viewEditData: 'View/Edit',
            id: 'ID',
            processedAt: 'Processed At',
            errors: 'Errors',
            typeMapping: 'Type Mapping',
            viewDeleteData: 'View/Delete',
            successfullyDeleted: 'Data Successfully Deleted',
            completed: 'completed',
            noData: 'no data',
            done: 'Done',
            mapping: 'Type Mapping',
            totalErrors: '# of Errors',
            toTypeMapping: 'Mapping',
        },
        containerInvite: {
            button: 'Invite User to Container',
            formTitle: 'Invite User to Container',
            email: 'Email of user to invite',
            cancel: 'Cancel',
            sendInvite: 'Send Invite',
            acceptInvite: 'Accept Invitation',
            acceptTitle: 'Accept Invitation to Join Container',
            acceptDescription: 'By clicking the button below you are accepting an invitation to be a part of the container ',
            loginToAccept: 'Login to Accept Invitation',
            inviteSuccessful: 'Invitation Accepted Successfully',
            inviteSuccessfulDescription: 'You may now choose this container from the container selection screen',
            containerSelect: 'Container Selection',
        },
        exports: {
            title: 'Export Container Data',
            destinationType: 'Destination Type',
            adapter: 'Adapter',
            status: 'Status',
            statusMessage: 'Message',
            actions: 'Actions',
            warningStopTitle: 'Stop Export',
            warningStopBody:
                "Deep Lynx will attempt to stop this currently processing export. However, this action is not instant and you may see some records exported even after you've stopped the process. Give the action 5-10 minutes to fully stop before either contacting support or attempting to stop the process again.",
            ok: 'Ok',
            warningResetTitle: 'Reset Export',
            warningResetBody:
                'This will completely reset this export, meaning that all data currently in the container will be re-queued up for export. This DOES NOT ERASE ANY DATA THAT MIGHT HAVE ALREADY BEEN EXPORTED. Please insure that your export destination is empty prior to restarting the export.',
            cancel: 'Cancel',
            understandReset: 'I Understand, Reset Export',
            warningDeleteTitle: 'Delete Export',
            warningDeleteBody:
                'Deleting an Export WILL NOT DELETE ANY DATA ON EXPORT TARGET. Insure that your destination also removes any data that might have been exported before this export request is deleted. This will also have no affect on current data stored in this container',
            understandDelete: 'I Understand, Delete Export',
            createdAt: 'Created At',
        },
        createExport: {
            createExport: 'Create Export',
            formTitle: 'Create New Export',
            destinationType: 'Destination Type',
            destinationHelp: 'The type of database or data source the data will be exported to.',
            adapter: 'Adapter',
            adapterHelp: 'The communication protocol Deep Lynx will use to export the data to the destination.',
            gremlinConfiguration: 'Gremlin Adapter Configuration',
            traversalSource: 'Traversal Source',
            traversalSourceHelp: "Name of the primary traversal source to export to, typically 'g'",
            user: 'User',
            userHelp: 'Gremlin user or as specified by your destination',
            key: 'Key/Password',
            keyHelp: "User's password or access key as specified by your destination",
            endpoint: 'Endpoint',
            endpointHelp: 'The HTTP/S endpoint of your Gremlin enabled destination.',
            port: 'Port',
            portHelp: 'Port on which to contact the Gremlin enabled destination.',
            path: 'Path',
            pathHelp: 'Optional path to include after the root endpoint.',
            writes: 'Writes-per-second',
            writesHelp: 'This determines how many times Deep Lynx can write to the Gremlin enabled destination each second.',
            cancel: 'Cancel',
            create: 'Create',
            requiredField: 'Required Field',
        },
        queryBuilder: {
            limitOntology: 'Limit results to current Ontology version',
            includeRawDataHistory: 'Include raw data history in search',
            recordLimit: 'Limit',
            previousQueries: 'Previous Queries',
            queryBuilder: 'Query Builder',
            rawEditor: 'Raw Query Editor',
            dataSource: 'Data Source',
            DataSourceFilter: 'Filter by Data Source',
            clickToAdd: 'Click to add filter',
            clickToAddProperty: 'Click to add Property filter',
            runQuery: 'Run Query',
            includeRawMetadata: 'Include Raw Metadata in Query (may impact performance)',
            selectFilterType: 'Select Filter Type',
            MetatypeFilter: 'Filter by Metatype',
            IDFilter: 'Filter by ID(s)',
            OriginalIDFilter: 'Filter by Original ID',
            RawDataFilter: 'Filter by Raw data property',
            MetadataFilter: 'Filter by Metadata property',
            metatype: 'Metatype',
            propertyKey: 'Property Key',
            typeToAdd: 'Type and hit Enter to add',
            originalDataID: 'Original Data ID',
            selectOperator: 'Select Operator',
            deepLynxID: 'Deep Lynx ID',
            resubmitQuery: 'Re-Run Query',
            resetQuery: 'Reset Query',
            newQuery: 'New Query',
            PropertyFilter: 'Property Filter',
            results: 'result(s)',
            createdBy: 'Created By',
        },
        eventAction: {
            formTitle: 'Create New Event Action',
            title: 'Event Actions',
            copyID: 'Copy ID to clipboard ',
            id: 'ID',
            dataSourceID: 'Data Source ID',
            eventType: 'Event Type',
            actionType: 'Action Type',
            destination: 'Destination',
            destinationID: 'Destination Data Source ID',
            actionConfig: 'Action Config',
            create: 'Create',
            active: 'Active',
            actions: 'Actions',
            archived: 'archived',
        },
        createEventAction: {
            newEvent: 'New Event Action',
            formTitle: 'Create Event Action',
            dataSource: 'Data Source',
            eventType: 'Event Type',
            actionType: 'Action Type',
            destination: 'Destination',
            destinationSource: 'Destination Data Source',
            actionConfig: 'Action Config',
            enable: 'Enable',
            dataImported: 'Data Imported',
            dataIngested: 'Data Ingested',
            fileCreated: 'File Created',
            fileModified: 'File Modified',
            dataSourceCreated: 'Data Source Created',
            dataSourceModified: 'Data Source Modified',
            dataExported: 'Data Exported',
            manual: 'Manual',
            default: 'Default',
            sendData: 'Send Data',
            emailUser: 'Email User',
            emailAddress: 'Destination Email Address',
        },
        editEventAction: {
            formTitle: 'Edit Event Action',
            dataSource: 'Data Source',
            eventType: 'Event Type',
            actionType: 'Action Type',
            destination: 'Destination',
            destinationSource: 'Destination Data Source',
            actionConfig: 'Action Config',
        },
        deleteEventAction: {
            deleteEventAction: 'Delete Event Action',
            formTitle: 'Delete Event Action',
            deleteWarning: 'Deleting an Event Action means it will be unrecoverable to even administrative users. Only delete Events you know are no longer needed or that were created in error.',
        },
        sendEventAction: {
            formTitle: 'Send Event Action',
            send: 'Send',
            sendQuestion: 'Are you sure you would like to send this Event Action?',
            yes: 'Yes',
            no: 'No',
        },
        eventActionStatus: {
            formTitle: 'Event Action Status',
            id: 'ID',
            eventAction: 'Event Action ID',
            status: 'Status',
            statusMessage: 'Status Message',
            dateCreated: 'Date Created',
            eventBody: 'Event',
        },
        fileManager: {
            newFileSet: 'New File Set',
            createFileSet: 'Create New File Set',
            id: 'File ID',
            tagName: 'Tag Name',
            file: 'File',
            fileSize: 'File Size (KB)',
            filesRequired: 'One or more files are required',
            tagRequired: 'Please provide a tag name',
            deleteFileSet: 'Delete File Set',
            modifiedAt: 'Modified At',
            deleteTitle: 'Delete File',
            deleteWarning: 'Are you sure you want to delete this file? If it is associated with a WebGL build, it may break the ability to view the 3D model.',
            fileManager3DViewer: 'View in 3D',
            updateFile: 'Update File',
            newFile: 'New File',
            updateTag: 'Update Tag',
        },
    },
    es: {
        home: {
            domainSelect: 'Seleccionar Dominio',
            selectContainer: 'Seleccionar Contenedor',
            taxonomy: 'Taxonomia',
            metatypes: 'Clases',
            metatypesDescription: 'Modificar clase y propietarios',
            metatypeRelationships: 'Relaciones',
            metatypeRelationshipsDescription: 'Modificar relaciones entre clases',
            metatypeRelationshipPairs: 'Pares de clase / relación',
            metatypeRelationshipPairsDescription: 'Modificar pares de clase / relación',
            import: 'Importar',
            data: 'Data',
            dataSources: 'Orígenes de datos',
            dataSourcesDescription: 'Configurar orígenes de datos',
            dataExplorer: 'Explorar',
            dataExplorerDescription: 'Datos interactivo',
            dataMapping: 'Mapeo de clase',
            dataMappingDescription: 'Manejar asignaciones entre clases y datos.',
            dataExport: 'Exportar',
            dataExportDescription: 'Manejar exportaciones de dato',
            settings: 'Configuraciones',
            settingsDescription: 'Configuraciones de application',
            dataImports: 'Datos importados',
            dataImportsDescription: 'Manejar datos importados',
            containerAdministration: 'Administracion de contenedores',
            containerUsers: 'Usarios de contenedores',
            containerUsersDescription: 'Manjear usarios de contenedores',
            administration: 'Administracion de applicacion',
            users: 'Usarios',
            usersDescription: 'Manejar usarios',
            containers: 'Contenedores',
            containersDescription: 'Manejar Contenedores',
            language: 'Idioma',
        },
        metatypes: {
            metatypes: 'Metatypes',
            search: 'Search',
            create: 'Create',
        },
        dataSources: {
            create: 'Create',
            formTitle: 'New Data Source',
        },
        login: {
            username: 'Correo Electrónico',
            password: 'Contraseña',
            login: 'Iniciar',
            windows: 'Iniciar con Windows',
        },
        users: {
            title: 'Manage Users',
            newUser: 'New User',
            name: 'Name',
            email: 'Email',
            admin: 'Admin',
            actions: 'Actions',
            password: 'Password',
            confirmPassword: 'Confirm Password',
            assignRole: 'Assign Role',
            role: 'Role',
            users: 'Users',
            containers: 'Containers',
            assignContainerRoles: 'Container Roles',
            editUserTitle: 'Edit User',
        },
    },
};
