{
	"info": {
		"_postman_id": "077a41f7-3c91-47fb-b34f-868a61e1954d",
		"name": "Deep Lynx",
		"description": "The construction of megaprojects has consistently demonstrated challenges for project managers in regard to meeting cost, schedule, and performance requirements. Megaproject construction challenges are common place within megaprojects with many active projects in the United States failing to meet cost and schedule efforts by significant margins. Currently, engineering teams operate in siloed tools and disparate teams where connections across design, procurement, and construction systems are translated manually or over brittle point-to-point integrations. The manual nature of data exchange increases the risk of silent errors in the reactor design, with each silent error cascading across the design. These cascading errors lead to uncontrollable risk during construction, resulting in significant delays and cost overruns. Deep Lynx allows for an integrated platform during design and operations of mega projects.\n\nThe Deep Lynx Core API delivers a few main features.\n\n1. Core provides a set of methods and endpoints for manipulating data in an object oriented database. This allows use to store complex datatypes as records and then to compile them into actual, modifiable objects at run-time. Users can store taxonomies or ontologies in a readable format.\n\n2. Core provides methods for storing and retrieving data in a graph database. This data is structured and validated against the aformentioned object oriented database before storage.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Containers",
			"item": [
				{
					"name": "Create",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Container\",\n    \"description\": \"Test Container Description\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": "{{baseURL}}/containers",
						"description": "Creates a new container object. Containers are the root level object and are considered to contain both the ontology(in form of Metatypes, Metatype Keys, and MetatypeRelationships) as well as the data stored under that ontology.\n\nEndpoint will accept both a single container request object, or an array of container request objects"
					},
					"response": []
				},
				{
					"name": "Update",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"description\": \"Final Test Description\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container-id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								}
							]
						},
						"description": "Updates the container. This will fail if a container already exists with the proposed updated name."
					},
					"response": []
				},
				{
					"name": "Batch Update",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test Container\",\n    \"description\": \"Test Container New Description\",\n    \"id\": \"\"\n}",
							"options": {
								"raw": {}
							}
						},
						"url": "{{baseURL}}/containers",
						"description": "Accepts an array of container objects - will attempt to update all of them in a single transaction. If the update fails, none of them will go through."
					},
					"response": []
				},
				{
					"name": "Fetch by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers/:container-id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								}
							]
						},
						"description": "Fetch container by ID."
					},
					"response": []
				},
				{
					"name": "List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers?offset=0&limit=100",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers"
							],
							"query": [
								{
									"key": "offset",
									"value": "0"
								},
								{
									"key": "limit",
									"value": "100"
								}
							]
						},
						"description": "List all containers. MUST include the limit/offset query parameters as of 3/26/2020."
					},
					"response": []
				},
				{
					"name": "Archive",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers/:container-id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								}
							]
						},
						"description": "Archives a Container. This is preferred over deletion as deletion has a cascading effect on the deleted type's keys, relationships, and relationship keys. When in doubt, archive over delete. We'd rather have tombstones than cremating the type."
					},
					"response": []
				},
				{
					"name": "Import",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "",
									"type": "file",
									"src": "/Users/browjm2/Developer/de-lynx-admin-gui/diamond.owl"
								},
								{
									"key": "name",
									"value": "DIAMOND",
									"type": "text"
								},
								{
									"key": "description",
									"value": "obo:IAO_0000115",
									"type": "text"
								},
								{
									"key": "path",
									"value": "https://raw.githubusercontent.com/idaholab/DIAMOND/master/diamond.owl",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/import",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								"import"
							],
							"query": [
								{
									"key": "dryrun",
									"value": "true",
									"disabled": true
								}
							]
						},
						"description": "An optional query param \"dryrun\" may be included with a value of \"true\" in order to return a HTML formatted string explaining the name and description of the container along with the number of metatypes, metatype relationships, and metatype keys to be created. This request uses a form-data body which requires a field \"name\". A \"description\" may also be provided. If the ontology to be imported is being referenced via url, provide the url via a \"path\" field. Otherwise a local file may be provided. A file takes precedence over a \"path\" value if both are provided."
					},
					"response": []
				},
				{
					"name": "Repair Permissions",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/permissions",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"permissions"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								}
							]
						},
						"description": "Repairs a container's permission set"
					},
					"response": []
				}
			],
			"description": "Containers are considered a root object with only users and organizations as potential parents. Containers separate object defintions (as declared in Metatypes) from each other and allow for versioning and access control. ",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "cc6348d9-d22c-4a90-93a9-e00bd506b19c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "d021593e-bb07-4763-a55b-688e9393d874",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Data Query",
			"item": [
				{
					"name": "Query Graph",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    nodes {\r\n        id\r\n        metatype{id}\r\n        archived\r\n    }\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/query",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"query"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								}
							]
						},
						"description": "Fetch container by ID."
					},
					"response": []
				},
				{
					"name": "Query Files",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    files(where: {\r\n        AND: [{file_name: \"like archive.json\"}]\r\n    }) {\r\n        id\r\n        \r\n    }\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/query",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"query"
							],
							"variable": [
								{
									"key": "container-id",
									"value": "c807a9f9-148d-4bb6-afae-cb8dff71c0b9"
								}
							]
						},
						"description": "Fetch container by ID."
					},
					"response": []
				}
			],
			"description": "Deep Lynx gives you the ability to query data using a GraphQL enabled endpoint. Please see the documentation on GraphQL and run a schema query to learn more about what search methods, query arguments, and fields are available to you.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a5b416dc-af80-4814-acf0-cbaaa0f229bf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e436263d-705b-4af6-8769-92aebf2d464d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Graph",
			"item": [
				{
					"name": "Create Or Update Nodes",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"container_id\": \"required\",\r\n    \"original_data_id\": \"optional - but required if planning on being able to update the node from this endpoint\",\r\n    \"data_source_id\": \"required\",\r\n    \"data_type_mapping_id\": \"optional\",\r\n    \"metatype_id\": \"required\",\r\n    \"modified_at\": \"optional - set to update node along with the original data id to update if it exists\",\r\n    \"properties\": {}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container_id/graphs/nodes",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container_id",
								"graphs",
								"nodes"
							],
							"variable": [
								{
									"key": "container_id",
									"value": ""
								}
							]
						},
						"description": "This endpoint will either create new nodes or update nodes if a \"modified_at\" property with a valid DateTime is passed."
					},
					"response": []
				},
				{
					"name": "Retrieve Node",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"container_id\": \"required\",\r\n    \"original_data_id\": \"optional\",\r\n    \"data_source_id\": \"required\",\r\n    \"data_type_mapping_id\": \"optional\",\r\n    \"metatype_id\": \"required\",\r\n    \"modified_at\": \"optional - set to update node if it exists\",\r\n    \"properties\": {}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container_id/graphs/nodes/:node_id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container_id",
								"graphs",
								"nodes",
								":node_id"
							],
							"variable": [
								{
									"key": "container_id",
									"value": ""
								},
								{
									"key": "node_id",
									"value": ""
								}
							]
						},
						"description": "Retrieve a single node from storage."
					},
					"response": []
				},
				{
					"name": "List Nodes",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"container_id\": \"required\",\r\n    \"original_data_id\": \"optional\",\r\n    \"data_source_id\": \"required\",\r\n    \"data_type_mapping_id\": \"optional\",\r\n    \"metatype_id\": \"required\",\r\n    \"modified_at\": \"optional - set to update node if it exists\",\r\n    \"properties\": {}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container_id/graphs/nodes?limit=100&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container_id",
								"graphs",
								"nodes"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								},
								{
									"key": "offset",
									"value": "0"
								}
							],
							"variable": [
								{
									"key": "container_id",
									"value": ""
								}
							]
						},
						"description": "List Nodes from storage"
					},
					"response": []
				},
				{
					"name": "List Nodes by Metatype ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"container_id\": \"required\",\r\n    \"original_data_id\": \"optional\",\r\n    \"data_source_id\": \"required\",\r\n    \"data_type_mapping_id\": \"optional\",\r\n    \"metatype_id\": \"required\",\r\n    \"modified_at\": \"optional - set to update node if it exists\",\r\n    \"properties\": {}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container_id/graphs/nodes/metatype/:metatype_id?limit=100&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container_id",
								"graphs",
								"nodes",
								"metatype",
								":metatype_id"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								},
								{
									"key": "offset",
									"value": "0"
								}
							],
							"variable": [
								{
									"key": "container_id",
									"value": ""
								},
								{
									"key": "metatype_id",
									"value": ""
								}
							]
						},
						"description": "List Nodes from storage, filter by MetatypeID"
					},
					"response": []
				},
				{
					"name": "Archive Node",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"container_id\": \"required\",\r\n    \"original_data_id\": \"optional\",\r\n    \"data_source_id\": \"required\",\r\n    \"data_type_mapping_id\": \"optional\",\r\n    \"metatype_id\": \"required\",\r\n    \"modified_at\": \"optional - set to update node if it exists\",\r\n    \"properties\": {}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container_id/graphs/nodes/:node_id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container_id",
								"graphs",
								"nodes",
								":node_id"
							],
							"variable": [
								{
									"key": "container_id",
									"value": ""
								},
								{
									"key": "node_id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Or Update Edges",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"container_id\": \"required\",\r\n    \"original_data_id\": \"required\",\r\n    \"data_source_id\": \"required\",\r\n    \"origin_node_id\": \"required (if origin_node_original_id not set)\",\r\n    \"destination_node_id\": \"required (if destination_node_original_id not set)\",\r\n    \"origin_node_original_id\": \"create edge based on original ID of node, not Deep Lynx ID\",\r\n    \"destination_node_original_id\": \"create edge based on original ID of node, not Deep Lynx ID\",\r\n    \"relationship_pair_id\": \"required\",\r\n    \"modified_at\": \"will attempt to update edge if exists\",\r\n    \"properties\": {}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container_id/graphs/nodes",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container_id",
								"graphs",
								"nodes"
							],
							"variable": [
								{
									"key": "container_id",
									"value": ""
								}
							]
						},
						"description": "This endpoint will either create new edges or update nodes if a \"modified_at\" property with a valid DateTime is passed."
					},
					"response": []
				},
				{
					"name": "List Edges",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"container_id\": \"required\",\r\n    \"original_data_id\": \"optional\",\r\n    \"data_source_id\": \"required\",\r\n    \"data_type_mapping_id\": \"optional\",\r\n    \"metatype_id\": \"required\",\r\n    \"modified_at\": \"optional - set to update node if it exists\",\r\n    \"properties\": {}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container_id/graphs/edges?limit=100&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container_id",
								"graphs",
								"edges"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								},
								{
									"key": "offset",
									"value": "0"
								}
							],
							"variable": [
								{
									"key": "container_id",
									"value": ""
								}
							]
						},
						"description": "List Nodes from storage"
					},
					"response": []
				},
				{
					"name": "Archive Edge",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"container_id\": \"required\",\r\n    \"original_data_id\": \"optional\",\r\n    \"data_source_id\": \"required\",\r\n    \"data_type_mapping_id\": \"optional\",\r\n    \"metatype_id\": \"required\",\r\n    \"modified_at\": \"optional - set to update node if it exists\",\r\n    \"properties\": {}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container_id/graphs/edges/:edge_id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container_id",
								"graphs",
								"edges",
								":edge_id"
							],
							"variable": [
								{
									"key": "container_id",
									"value": ""
								},
								{
									"key": "edge_id",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "These endpoints give you the ability to add nodes and edges to the graph manually as well as perform some basic queries. For all advanced queries, please use the GraphQL query endpoint.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Metatypes",
			"item": [
				{
					"name": "Metatypes",
					"item": [
						{
							"name": "New Type",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Equipment\",\n\t\"description\": \"Physical piece of equipement\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatypes",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatypes"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										}
									]
								},
								"description": "Create a new meta type. Pass in an array for bulk creation."
							},
							"response": []
						},
						{
							"name": "Get Type",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatypes/:type-id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatypes",
										":type-id"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										},
										{
											"key": "type-id",
											"value": ""
										}
									]
								},
								"description": "Retrieves a single Type."
							},
							"response": []
						},
						{
							"name": "List Types",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatypes?limit=100&offset=0&name=",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatypes"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "name",
											"value": ""
										}
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										}
									]
								},
								"description": "List all types that current container has access to. MUST include the limit/offset query parameters as of 3/26/2020"
							},
							"response": []
						},
						{
							"name": "Update Type",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Updated Metatype Name\",\n\t\"description\": \"Final Description\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatypes/:type-id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatypes",
										":type-id"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										},
										{
											"key": "type-id",
											"value": ""
										}
									]
								},
								"description": "Update a single Metatype in storage. Will fail if the updated name has already been taken."
							},
							"response": []
						},
						{
							"name": "Archive Type",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatypes/:type-id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatypes",
										":type-id"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										},
										{
											"key": "type-id",
											"value": ""
										}
									]
								},
								"description": "Archives the current meta type. This is preferred over deletion as deletion has a cascading effect on the deleted type's keys, relationships, and relationship keys. When in doubt, archive over delete. We'd rather have tombstones than cremating the type."
							},
							"response": []
						}
					],
					"description": "Metatypes only consist of a name and a description. While this might change, the bulk of information about a type should reside in its keys and relationships. Metatypes can be considered as \"classes\" when referring to web ontology.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2d994e09-10b1-49fd-a871-5a17684964e6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1280360a-8cdd-49f8-a937-900fd522f2a9",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Metatype Keys",
					"item": [
						{
							"name": "New Type Key",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"File Name\",\n\t\"required\": true,\n\t\"property_name\": \"fileName\",\n\t\"description\":\"File Upload Name\",\n\t\"data_type\": \"string\",\n\t\"cardinality\": 1,\n\t\"validation\": {\n\t\t\"regex\": \"\",\n\t\t\"min\": 0,\n\t\t\"max\": 0\n\t},\n\t\"unique\": true,\n\t\"options\": [\"\"],\n\t\"defaultValue\": \"can be any type\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatypes/:type-id/keys",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatypes",
										":type-id",
										"keys"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										},
										{
											"key": "type-id",
											"value": ""
										}
									]
								},
								"description": "Creates a new key for a type. Keys consist of a unique key name (unique to the type not as a whole), key type, default values, and allowed values. Of those, only the first two are required.\n\nThe `dataType` field accepts only one of the following values: number, string, date, boolean, enumeration. \n\nThe fields `defaultValue` and `options` will only accept an array of the following types: string, boolean, number, float.\n\nPass in an array for bulk creation.\n\nCurrently the validation and cardinality functionality of keys are NOT checked at data insertion."
							},
							"response": []
						},
						{
							"name": "List Type's Keys",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatypes/:type-id/keys",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatypes",
										":type-id",
										"keys"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										},
										{
											"key": "type-id",
											"value": ""
										}
									]
								},
								"description": "Lists all currently valid and available keys for the type. The response includes the key name, its types, allowed values, and default value if present. MUST include the limit/offset query parameters as of 3/26/2020"
							},
							"response": []
						},
						{
							"name": "Get Type Key",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatypes/:type-id/keys/:key-id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatypes",
										":type-id",
										"keys",
										":key-id"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										},
										{
											"key": "type-id",
											"value": ""
										},
										{
											"key": "key-id",
											"value": ""
										}
									]
								},
								"description": "Lists all currently valid and available keys for the type. The response includes the key name, its types, allowed values, and default value if present."
							},
							"response": []
						},
						{
							"name": "Update Type Key",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Updated String\",\n\t\"property_name\": \"string\",\n\t\"description\": \"sting\",\n\t\"data_type\": \"string\",\n\t\"default_value\": \"optional - data structure here is dependent on dataType value\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatypes/:type-id/keys/:key-id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatypes",
										":type-id",
										"keys",
										":key-id"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										},
										{
											"key": "type-id",
											"value": ""
										},
										{
											"key": "key-id",
											"value": ""
										}
									]
								},
								"description": "Updates a single key for a type."
							},
							"response": []
						},
						{
							"name": "Archive Type Key",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatypes/:type-id/keys/:key-id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatypes",
										":type-id",
										"keys",
										":key-id"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										},
										{
											"key": "type-id",
											"value": ""
										},
										{
											"key": "key-id",
											"value": ""
										}
									]
								},
								"description": "Archiving the type key prevents any new types from implementing the key. It *does not remove key/value pairs on existing types*. We highly recommend you archive type keys instead of deleting them so that previous data is not affected."
							},
							"response": []
						}
					],
					"description": "Keys represent a Metatype's properties, and in the future, its methods. This information allows for a user to modify and compile a complex object type/class and store it in a readable format. Inserted data is then validated against a Metatype's declared keys/properties.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8e93c339-0e25-4437-8354-8d3e75ebbd32",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "65aaf775-e323-4a80-9c29-76118204e18d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a3e3e73d-9e09-418b-bbbf-4da3618de564",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3ac58882-2e86-421a-a5db-a239e8beeaa8",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Metatype Relationships",
			"item": [
				{
					"name": "Metatype Relationships",
					"item": [
						{
							"name": "New Type Relationship",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Relationhip Test\",\n\t\"description\": \"string\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatype_relationships",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatype_relationships"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										}
									]
								},
								"description": "Create a new Type Relationship. Describes the connection that could exist between two types and acts as a vehicle for relationship specific keys.\n\nPass in an array for bulk creation."
							},
							"response": []
						},
						{
							"name": "Get Type Relationship",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatype_relationships/:relationship-id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatype_relationships",
										":relationship-id"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										},
										{
											"key": "relationship-id",
											"value": ""
										}
									]
								},
								"description": "Retrieve a single Type Relationship."
							},
							"response": []
						},
						{
							"name": "List Container Type Relationships",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatype_relationships?offset=0&limit=100",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatype_relationships"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										}
									]
								},
								"description": "Create a new Type relationship pair. Describes the connection between two types and acts as a vehicle for relationship specific keys."
							},
							"response": []
						},
						{
							"name": "Update Type Relationship",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Update Test\",\n\t\"description\": \"Final Test Description\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatype_relationships/:relationship-id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatype_relationships",
										":relationship-id"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										},
										{
											"key": "relationship-id",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Archive Type Relationship",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatype_relationships/:relationship-id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatype_relationships",
										":relationship-id"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										},
										{
											"key": "relationship-id",
											"value": ""
										}
									]
								},
								"description": "Archive the type relationship key. This does not affect any instances of the parent relationship type."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1f76f323-36fb-4e2e-bfc1-47ad7c48c811",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "057a5b66-0a5d-4ace-959d-00480cb2b580",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Metatype Relationship Keys",
					"item": [
						{
							"name": "New Type Relationship Key",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"File Name\",\n\t\"required\": true,\n\t\"property_name\": \"fileName\",\n\t\"description\":\"File Upload Name\",\n\t\"data_type\": \"string\",\n\t\"cardinality\": 1,\n\t\"validation\": {\n\t\t\"regex\": \"\",\n\t\t\"min\": 0,\n\t\t\"max\": 0\n\t},\n\t\"unique\": true,\n\t\"options\": [\"\"],\n\t\"defaultValue\": \"can be any type\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatype_relationships/:relationship-id/keys",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatype_relationships",
										":relationship-id",
										"keys"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										},
										{
											"key": "relationship-id",
											"value": ""
										}
									]
								},
								"description": "Creates a new key for a type relationship. Keys consist of a unique key name (unique to the type not as a whole), key type, default values, and allowed values. Of those, only the first two are required.\n\nThe `dataType` field accepts only one of the following values: number, string, date, boolean, enumeration. \n\nThe fields `defaultValue` and `options` will only accept an array of the following types: string, boolean, number, float."
							},
							"response": []
						},
						{
							"name": "Get Type Relationship Key",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatype_relationships/:relationship-id/keys/:key-id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatype_relationships",
										":relationship-id",
										"keys",
										":key-id"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										},
										{
											"key": "relationship-id",
											"value": ""
										},
										{
											"key": "key-id",
											"value": ""
										}
									]
								},
								"description": "Retrieve a single key for a Type Relationship by id."
							},
							"response": []
						},
						{
							"name": "List Type Relationship Keys",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/containers/:id/metatype_relationships/:relationship-id/keys?offset=0&limit=100",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":id",
										"metatype_relationships",
										":relationship-id",
										"keys"
									],
									"query": [
										{
											"key": "offset",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": ""
										},
										{
											"key": "relationship-id",
											"value": ""
										}
									]
								},
								"description": "Retrieves all keys for a Type Relationship."
							},
							"response": []
						},
						{
							"name": "Update Type Relationship Key",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Updated Name\",\n\t\"description\": \"Updated Name Description\",\n\t\"data_type\": \"string\",\n\t\"default_value\": \"optional - data structure here is dependent on dataType value\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatype_relationships/:relationship-id/keys/:key-id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatype_relationships",
										":relationship-id",
										"keys",
										":key-id"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										},
										{
											"key": "relationship-id",
											"value": ""
										},
										{
											"key": "key-id",
											"value": ""
										}
									]
								},
								"description": "Updates a Type Relationship key. The update must follow the same format as creation."
							},
							"response": []
						},
						{
							"name": "Archive Type Relationship Key",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatype_relationships/:relationship-id/keys/:key-id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatype_relationships",
										":relationship-id",
										"keys",
										":key-id"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										},
										{
											"key": "relationship-id",
											"value": ""
										},
										{
											"key": "key-id",
											"value": ""
										}
									]
								},
								"description": "Archives a Type Relationship Key. This is preferred over deletion as deletion has a cascading effect on the deleted type's keys, relationships, and relationship keys. When in doubt, archive over delete. We'd rather have tombstones than cremating the type."
							},
							"response": []
						}
					],
					"description": "Keys represent a Metatype Relationship's properties, and in the future, its methods. This information allows for a user to modify and compile a complex object type/class relationship and store it in a readable format. Relationships declared between already inserted data will be verified against its declared Metatype Relationship.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bf5f0cea-3b96-4871-9a58-054eb5ca90cf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0dadbb5a-761c-482e-aa43-dfcbbc5e2a57",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Metatype Relationship Pairs",
					"item": [
						{
							"name": "New Type Relationship Pair",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"Relationship Pair Test\",\n\t\"description\": \"Relationship Pair Test description\",\n\t\"origin_metatype_id\": \"566e3862-6853-45af-8a45-3050576dfb9a\",\n\t\"destination_metatype_id\": \"8bcc0b06-bb44-4176-a581-aa68eafca7f3\",\n\t\"metatype_relationship_id\": \"885e3fca-5066-4be8-a720-63b3c4744e97\",\n\t\"relationship_type\": \"many:many\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatype_relationship_pairs/",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatype_relationship_pairs",
										""
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										}
									]
								},
								"description": "Create a new Type Relationship Pair. Describes the connection between two Types by connecting them using a Type Relationship and acts as a vehicle for relationship specific keys.\n\nPass in an array for bulk creation."
							},
							"response": []
						},
						{
							"name": "Get Type Relationship Pair",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatype_relationship_pairs/:pair-id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatype_relationship_pairs",
										":pair-id"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										},
										{
											"key": "pair-id",
											"value": ""
										}
									]
								},
								"description": "Retrieves a single Type Relationship Pair."
							},
							"response": []
						},
						{
							"name": "List Type Relationship Pairs",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatype_relationship_pairs?limit=100&offset=0",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatype_relationship_pairs"
									],
									"query": [
										{
											"key": "limit",
											"value": "100"
										},
										{
											"key": "offset",
											"value": "0"
										}
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										}
									]
								},
								"description": "List all Type Relationship Pairs for current container."
							},
							"response": []
						},
						{
							"name": "Archive Type Pair",
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseURL}}/containers/:container-id/metatype_relationship_pairs/:pair-id",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"containers",
										":container-id",
										"metatype_relationship_pairs",
										":pair-id"
									],
									"variable": [
										{
											"key": "container-id",
											"value": ""
										},
										{
											"key": "pair-id",
											"value": ""
										}
									]
								},
								"description": "Archives a Type Relationship Pair. This is preferred over deletion as deletion has a cascading effect on the deleted type's keys, relationships, and relationship keys. When in doubt, archive over delete. We'd rather have tombstones than cremating the type."
							},
							"response": []
						}
					],
					"description": "Metatype Relationship pairs represent the actual connection between two Metatypes. Properties of that relationship are attached to the Metatype Relationship. Again, this only represents the connection between two Metatypes.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fc21e7f8-188c-490f-9ea0-e3131156b3ad",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f87637c1-e3ae-4909-8d1b-f2cb28bf230d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "Type Relationships are stand-alone data types, despite what the name implies. A type relationship consists of a name, description, and a set of keys, or properties. This is much like a Type itself.\n\nA Type Relationship is used to join two Types together, in a Type Relationship Pair. The pair consists of the Type Relationship and its keys(properties) and two Types. This is very similar to a triple storage method where the Type Relationship fulfills of the `verb` portion of a `noun verb noun` storage and ontology pattern.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3b549d27-40ed-453d-818a-716e666772c9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7513d9a3-807b-4b70-a022-4a743937b8e3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Data Sources",
			"item": [
				{
					"name": "Create Data Source",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"testing data source\"\n\t\"adapter_type\":\"http OR manual\",\n\t\"active\": true,\n\t\"config\": { // needed only if you are using the HTTP data source\n\t\t\"endpoint\":\"\",\n        \"auth_method\":\"basic\",\n        \"username\": \"test\",\n       \"password\": \"test\"\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/import/datasources",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"import",
								"datasources"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								}
							]
						},
						"description": "Create new datasource. Currently the only supported data source \ntype is `http` "
					},
					"response": []
				},
				{
					"name": "Create Manual Import",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[{\"test\":\"test\"}]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/import/datasources/:dataSourceID/imports",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"import",
								"datasources",
								":dataSourceID",
								"imports"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								},
								{
									"key": "dataSourceID",
									"value": ""
								}
							]
						},
						"description": "Create a manual import."
					},
					"response": []
				},
				{
					"name": "Upload File",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/import/datasources/:dataSourceID/files",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"import",
								"datasources",
								":dataSourceID",
								"files"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								},
								{
									"key": "dataSourceID",
									"value": ""
								}
							]
						},
						"description": "Uploads a file and metadata to Deep Lynx. This endpoint will accept multiple files and multiple properties as form values."
					},
					"response": []
				},
				{
					"name": "Download File",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/files/:file-id/download",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"files",
								":file-id",
								"download"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								},
								{
									"key": "file-id",
									"value": ""
								}
							]
						},
						"description": "Downloads a previously uploaded file."
					},
					"response": []
				},
				{
					"name": "Get File",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/files/:file-id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"files",
								":file-id"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								},
								{
									"key": "file-id",
									"value": ""
								}
							]
						},
						"description": "Get information about a file by ID."
					},
					"response": []
				},
				{
					"name": "List Data Sources",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/import/datasources",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"import",
								"datasources"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List Imports for Data Source",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/import/datasources/:data-source-id/imports",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"import",
								"datasources",
								":data-source-id",
								"imports"
							],
							"variable": [
								{
									"key": "container-id",
									"value": "9151cb2c-7349-4e3d-9b26-263d742eed3a"
								},
								{
									"key": "data-source-id",
									"value": "ca372bc5-7b51-4ef0-9afa-b86adbf8f9aa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Data Source",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/import/datasources/:id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"import",
								"datasources",
								":id"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								},
								{
									"key": "id",
									"value": ""
								}
							]
						},
						"description": "Retrieve a single data source by ID."
					},
					"response": []
				},
				{
					"name": "Set Configuration",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"endpoint\":\"\",\n    \"auth_method\":\"basic\",\n\t\"username\": \"test\",\n\t\"password\": \"test\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/import/datasources/:id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"import",
								"datasources",
								":id"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								},
								{
									"key": "id",
									"value": ""
								}
							]
						},
						"description": "Updates a data source's configuration in storage. Note that this request body's structure must match that of the data source's adapter type."
					},
					"response": []
				},
				{
					"name": "Delete Data Source",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/import/datasources/:id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"import",
								"datasources",
								":id"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								},
								{
									"key": "id",
									"value": ""
								}
							]
						},
						"description": "Permanently remove a data source. Future development includes an option to delete all data inserted by this functionality as well."
					},
					"response": []
				},
				{
					"name": "Set Active",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/import/datasources/:id/active",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"import",
								"datasources",
								":id",
								"active"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								},
								{
									"key": "id",
									"value": ""
								}
							]
						},
						"description": "Permanently remove a data source. Future development includes an option to delete all data inserted by this functionality as well."
					},
					"response": []
				},
				{
					"name": "Set Inactive",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/import/datasources/:id/active",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"import",
								"datasources",
								":id",
								"active"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								},
								{
									"key": "id",
									"value": ""
								}
							]
						},
						"description": "Permanently remove a data source. Future development includes an option to delete all data inserted by this functionality as well."
					},
					"response": []
				}
			],
			"description": "This set of endpoints allows the user to create and manage data sources. As of 3/26/2020 only the HTTP data source type is supported, and that's still under construction. Each endpoint functions - but there is no guaranteed functionality with regards to data sources beyond this point.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7feb30a7-b5ed-451e-88ba-a9c13ac3163d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "35fc69a9-0557-4841-af84-60d092122945",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Data Export",
			"item": [
				{
					"name": "New Data Export",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"adapter\": \"gremlin\",\n    \"config\": {\n        \"traversal_source\": \"g\",\n        \"graphson_v1\": false,\n        \"user\": \"\",\n        \"key\": \"\",\n        \"endpoint\": \"localhost\",\n        \"port\": \"8182\",\n        \"path\": \"/gremlin\",\n        \"writes_per_second\": 300\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/data/export",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"data",
								"export"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								}
							]
						},
						"description": "Create a new data export with the included configuration. Configuration values may be encrypted depending on the adapter you've choosen. See the readme for the exporters for more information."
					},
					"response": []
				},
				{
					"name": "Get Data Export",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/data/export/:export-id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"data",
								"export",
								":export-id"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								},
								{
									"key": "export-id",
									"value": ""
								}
							]
						},
						"description": "Fetch a data export record by ID"
					},
					"response": []
				},
				{
					"name": "Start Data Export",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/data/export/:export-id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"data",
								"export",
								":export-id"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								},
								{
									"key": "export-id",
									"value": ""
								}
							]
						},
						"description": "Start or restart a data export by id."
					},
					"response": []
				},
				{
					"name": "Stop Data Export",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"adapter\": \"gremlin\",\n\t\"config\": {\n        \"traversal_source\": \"g\",\n        \"mime_type\": \"application/vnd.gremlin-v2.0+json\",\n        \"graphson_v1\": false,\n        \"user\": \"process.env.GREMLIN_PLUGIN_USER || \"\",\n        \"key\": \"process.env.GREMLIN_PLUGIN_KEY || \"\",\n        \"endpoint\": \"process.env.GREMLIN_PLUGIN_ENDPOINT || localhost\",\n        \"port\": \"process.env.GREMLIN_PLUGIN_PORT || 8182\",\n        \"path\": \"process.env.GREMLIN_PLUGIN_ROOT_PATH || gremlin\"\n    }\n}",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/data/export/:export-id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"data",
								"export",
								":export-id"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								},
								{
									"key": "export-id",
									"value": ""
								}
							]
						},
						"description": "Stops a data export. Please note that this just sends a \"stop\" signal. The application's export adapter determines how to handle the said signal. In some cases the export stopping might not be immediate."
					},
					"response": []
				},
				{
					"name": "Delete Data Export",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/data/export/:export-id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"data",
								"export",
								":export-id"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								},
								{
									"key": "export-id",
									"value": ""
								}
							]
						},
						"description": "Deletes a data export record. This does not guarantee the export will stop immediately."
					},
					"response": []
				}
			],
			"description": "These endpoints have to do with the export functionality. A snapshot of the contained data can be exported to numerous different data sources. However, only Gremlin enabled Graph databases are supported for export.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "32996788-7c68-4e4f-bcf0-d7454f5ddd35",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2f9c0fdb-66bd-422e-8cf9-62ec7d668f88",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "New User (Username/Password)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"identity_provider\": \"username_password\",\r\n    \"display_name\": \"Test User\",\r\n    \"email\": \"test@test.com\",\r\n    \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/users",
						"description": "Create a new user using the username_password identity type."
					},
					"response": []
				},
				{
					"name": "Keys For User",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/:user_id/keys",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								":user_id",
								"keys"
							],
							"variable": [
								{
									"key": "user_id",
									"value": ""
								}
							]
						},
						"description": "Retrieves only the active keys for supplied user. Secerts are hashed and are never revealed past initial creation."
					},
					"response": []
				},
				{
					"name": "Generate KeyPair For User",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/:user_id/keys",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								":user_id",
								"keys"
							],
							"variable": [
								{
									"key": "user_id",
									"value": ""
								}
							]
						},
						"description": "Create a new user using the username_password identity type."
					},
					"response": []
				},
				{
					"name": "Delete KeyPair For User",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/:user_id/keys/:key_id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								":user_id",
								"keys",
								":key_id"
							],
							"variable": [
								{
									"key": "user_id",
									"value": ""
								},
								{
									"key": "key_id",
									"value": ""
								}
							]
						},
						"description": "Create a new user using the username_password identity type."
					},
					"response": []
				},
				{
					"name": "Get User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers/:container_id/users/:user-id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container_id",
								"users",
								":user-id"
							],
							"variable": [
								{
									"key": "container_id",
									"value": ""
								},
								{
									"key": "user-id",
									"value": ""
								}
							]
						},
						"description": "List Users"
					},
					"response": []
				},
				{
					"name": "List Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers/:container_id/users?limit=100&offset=0",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container_id",
								"users"
							],
							"query": [
								{
									"key": "limit",
									"value": "100"
								},
								{
									"key": "offset",
									"value": "0"
								}
							],
							"variable": [
								{
									"key": "container_id",
									"value": ""
								}
							]
						},
						"description": "List Users"
					},
					"response": []
				},
				{
					"name": "List User's Roles",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers/:container_id/users/:user_id/roles",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container_id",
								"users",
								":user_id",
								"roles"
							],
							"variable": [
								{
									"key": "container_id",
									"value": ""
								},
								{
									"key": "user_id",
									"value": ""
								}
							]
						},
						"description": "List Users"
					},
					"response": []
				},
				{
					"name": "Assign Role",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"user_id\": \"fb127f5f-0318-4866-9570-10ec81a85cc2\",\n\t\"container_id\": \"2a49dc7b-cf56-4e03-85e7-14ac8f0e4b40\",\n\t\"role_name\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container_id/users/roles",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container_id",
								"users",
								"roles"
							],
							"variable": [
								{
									"key": "container_id",
									"value": ""
								}
							]
						},
						"description": "Assign a role to a user, roles must consist of role name and domain"
					},
					"response": []
				},
				{
					"name": "Validate Email",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/validate?id=&token=",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"validate"
							],
							"query": [
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "token",
									"value": ""
								}
							]
						},
						"description": "Accepts two query parameters - id and token. If that combination matches a user then the email is marked as valid in the system."
					},
					"response": []
				},
				{
					"name": "Request Password Reset",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/users/reset-password?email=",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"users",
								"reset-password"
							],
							"query": [
								{
									"key": "email",
									"value": ""
								}
							]
						},
						"description": "Accepts a user email as a query param. Will always return 200 even if the email does not exist. This is by design, so that people can't use this endpoint to validate whether or not an email is part of Deep Lynx."
					},
					"response": []
				},
				{
					"name": "Reset Password",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"token\": \"\",\r\n    \"new_password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/users/reset-password",
						"description": "Resets a user's password to the provide payload if the user requested the reset less than 4 hours ago."
					},
					"response": []
				},
				{
					"name": "Invite User to Container",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/users/invite",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"users",
								"invite"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								}
							]
						},
						"description": "Create a new user using the username_password identity type."
					},
					"response": []
				},
				{
					"name": "List Invited Users for Container",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/users/invite",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"users",
								"invite"
							],
							"variable": [
								{
									"key": "container-id",
									"value": ""
								}
							]
						},
						"description": "List all invitations to container."
					},
					"response": []
				}
			],
			"description": "These endpoints have to do with user functionality. As of 3/26/2020 there are no methods for creating new users - other than enabling and use SAML-ADFS authentication methods. Unless using this method, either request/build a feature or use Basic Authentication configuration.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b8f9e557-4a6e-4e8c-8ae9-79e01e54ad40",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8bd1825b-19d0-4c3a-93db-c32fa3eecea4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Data Type Mappings",
			"item": [],
			"description": "These are mappings for taking unknown payloads and mapping them to known data classes and structures prior to storage.",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Imports",
			"item": [
				{
					"name": "List Import's Data",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/import/imports/:import-id/data",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"import",
								"imports",
								":import-id",
								"data"
							],
							"variable": [
								{
									"key": "container-id",
									"value": "1cdabe85-78d7-4e2d-ae2e-f8521b6059db"
								},
								{
									"key": "import-id",
									"value": "b64c8873-b236-4019-a691-1e11d2b9d1a7"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Import",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/import/imports/:import-id/",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"import",
								"imports",
								":import-id",
								""
							],
							"variable": [
								{
									"key": "container-id",
									"value": "1cdabe85-78d7-4e2d-ae2e-f8521b6059db"
								},
								{
									"key": "import-id",
									"value": "b64c8873-b236-4019-a691-1e11d2b9d1a7"
								}
							]
						},
						"description": "Delete import will delete an import ONLY IF the import has not been processed."
					},
					"response": []
				},
				{
					"name": "Get Import Data",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/import/imports/:import-id/data/:data-id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"import",
								"imports",
								":import-id",
								"data",
								":data-id"
							],
							"variable": [
								{
									"key": "container-id",
									"value": "1cdabe85-78d7-4e2d-ae2e-f8521b6059db"
								},
								{
									"key": "import-id",
									"value": "b64c8873-b236-4019-a691-1e11d2b9d1a7"
								},
								{
									"key": "data-id",
									"value": "66"
								}
							]
						},
						"description": "Retrieve a single piece of data from an import."
					},
					"response": []
				},
				{
					"name": "Delete Import Data",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/containers/:container-id/import/imports/:import-id/data/:data-id",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"containers",
								":container-id",
								"import",
								"imports",
								":import-id",
								"data",
								":data-id"
							],
							"variable": [
								{
									"key": "container-id",
									"value": "1cdabe85-78d7-4e2d-ae2e-f8521b6059db"
								},
								{
									"key": "import-id",
									"value": "b64c8873-b236-4019-a691-1e11d2b9d1a7"
								},
								{
									"key": "data-id",
									"value": "65"
								}
							]
						},
						"description": "Delete a single piece of data from an import."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Health",
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseURL}}/health",
				"description": "Simple endpoint, returns 200 on call. Can be used for a simple Up monitor by an external service."
			},
			"response": []
		},
		{
			"name": "Login (Local)",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "",
							"type": "text"
						},
						{
							"key": "password",
							"value": "",
							"type": "text"
						},
						{
							"key": "redirect",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": "{{baseURL}}/login",
				"description": "This endpoint will accept a form submission with three paramters - username, password and redirect. This endpoint will log a user in and then redirect them to the redirect url passed in as part of the form. This allows a SPA like site to log users in effectively."
			},
			"response": []
		},
		{
			"name": "Login (API Key/Secret)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-api-key",
						"value": "",
						"type": "text"
					},
					{
						"key": "x-api-secret",
						"value": "",
						"type": "text"
					}
				],
				"url": "{{baseURL}}/login-token",
				"description": "Calling this endpoint with the x-api-key and x-api-secret headers will return a JWT for the user to whom the key/secert pair belongs. This exists so that a user can programmatically use Deep Lynx by making their own calls against the service instead of using the provided UI."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "931bf200-0a68-4a27-97fc-3b15cb7a6c78",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "38b07fe6-4ec9-4028-a3fa-55c68d15e323",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}