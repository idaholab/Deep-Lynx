{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Deep Lynx",
    "description": "The construction of megaprojects has consistently demonstrated challenges for project managers in regard to meeting cost, schedule, and performance requirements. Megaproject construction challenges are common place within megaprojects with many active projects in the United States failing to meet cost and schedule efforts by significant margins. Currently, engineering teams operate in siloed tools and disparate teams where connections across design, procurement, and construction systems are translated manually or over brittle point-to-point integrations. The manual nature of data exchange increases the risk of silent errors in the reactor design, with each silent error cascading across the design. These cascading errors lead to uncontrollable risk during construction, resulting in significant delays and cost overruns. Deep Lynx allows for an integrated platform during design and operations of mega projects.\n\nThe Deep Lynx Core API delivers a few main features.\n\n1. Core provides a set of methods and endpoints for manipulating data in an object oriented database. This allows use to store complex datatypes as records and then to compile them into actual, modifiable objects at run-time. Users can store taxonomies or ontologies in a readable format.\n\n2. Core provides methods for storing and retrieving data in a graph database. This data is structured and validated against the aformentioned object oriented database before storage.",
    "contact": {}
  },
  "host": "example.com",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/containers": {
      "post": {
        "description": "Creates a new container object. Containers are the root level object and are considered to contain both the ontology(in form of Metatypes, Metatype Keys, and MetatypeRelationships) as well as the data stored under that ontology.\n\nEndpoint will accept both a single container request object, or an array of container request objects",
        "summary": "Create",
        "tags": [
          "Containers"
        ],
        "operationId": "Create",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "put": {
        "description": "Accepts an array of container objects - will attempt to update all of them in a single transaction. If the update fails, none of them will go through.",
        "summary": "Batch Update",
        "tags": [
          "Containers"
        ],
        "operationId": "BatchUpdate",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/BatchUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "get": {
        "description": "List all containers. MUST include the limit/offset query parameters as of 3/26/2020.",
        "summary": "List",
        "tags": [
          "Containers"
        ],
        "operationId": "List",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}": {
      "put": {
        "description": "Updates the container. This will fail if a container already exists with the proposed updated name.",
        "summary": "Update",
        "tags": [
          "Containers"
        ],
        "operationId": "Update",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/UpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "get": {
        "description": "Fetch container by ID.",
        "summary": "Fetch by ID",
        "tags": [
          "Containers"
        ],
        "operationId": "FetchbyID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "delete": {
        "description": "Archives a Container. This is preferred over deletion as deletion has a cascading effect on the deleted type's keys, relationships, and relationship keys. When in doubt, archive over delete. We'd rather have tombstones than cremating the type.",
        "summary": "Archive",
        "tags": [
          "Containers"
        ],
        "operationId": "Archive",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/query": {
      "post": {
        "description": "Fetch container by ID.",
        "summary": "Query Graph",
        "tags": [
          "Data Query"
        ],
        "operationId": "QueryGraph",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "example": "{\r\n    nodes(where: {\r\n        AND: [\r\n            {properties: [\r\n            {key: \"notRequired\" value:\"false\" operator:\"like\"}\r\n            ]}\r\n            ]\r\n    }) {\r\n        id\r\n        metatype{id}\r\n        archived\r\n    }\r\n}",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container_id}/graphs/nodes": {
      "post": {
        "description": "This endpoint will either create new nodes or update nodes if a \"modified_at\" property with a valid DateTime is passed.",
        "summary": "Create Or Update Nodes",
        "tags": [
          "Graph"
        ],
        "operationId": "CreateOrUpdateNodes",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreateOrUpdateNodesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "get": {
        "description": "List Nodes from storage",
        "summary": "List Nodes",
        "tags": [
          "Graph"
        ],
        "operationId": "ListNodes",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "container_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container_id}/graphs/nodes/{node_id}": {
      "get": {
        "description": "Retrieve a single node from storage.",
        "summary": "Retrieve Node",
        "tags": [
          "Graph"
        ],
        "operationId": "RetrieveNode",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "delete": {
        "summary": "Archive Node",
        "tags": [
          "Graph"
        ],
        "operationId": "ArchiveNode",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "node_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ArchiveNodeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container_id}/graphs/nodes/metatype/{metatype_id}": {
      "get": {
        "description": "List Nodes from storage, filter by MetatypeID",
        "summary": "List Nodes by Metatype ID",
        "tags": [
          "Graph"
        ],
        "operationId": "ListNodesbyMetatypeID",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "container_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "metatype_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container_id}/graphs/edges": {
      "get": {
        "description": "List Nodes from storage",
        "summary": "List Edges",
        "tags": [
          "Graph"
        ],
        "operationId": "ListEdges",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "container_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container_id}/graphs/edges/{edge_id}": {
      "delete": {
        "summary": "Archive Edge",
        "tags": [
          "Graph"
        ],
        "operationId": "ArchiveEdge",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "edge_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ArchiveEdgeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/metatypes": {
      "post": {
        "description": "Create a new meta type. Pass in an array for bulk creation.",
        "summary": "New Type",
        "tags": [
          "Metatypes"
        ],
        "operationId": "NewType",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/NewTypeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "get": {
        "description": "List all types that current container has access to. MUST include the limit/offset query parameters as of 3/26/2020",
        "summary": "List Types",
        "tags": [
          "Metatypes"
        ],
        "operationId": "ListTypes",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/metatypes/{type-id}": {
      "get": {
        "description": "Retrieves a single Type.",
        "summary": "Get Type",
        "tags": [
          "Metatypes"
        ],
        "operationId": "GetType",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "type-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "put": {
        "description": "Update a single Metatype in storage. Will fail if the updated name has already been taken.",
        "summary": "Update Type",
        "tags": [
          "Metatypes"
        ],
        "operationId": "UpdateType",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "type-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/UpdateTypeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "delete": {
        "description": "Archives the current meta type. This is preferred over deletion as deletion has a cascading effect on the deleted type's keys, relationships, and relationship keys. When in doubt, archive over delete. We'd rather have tombstones than cremating the type.",
        "summary": "Archive Type",
        "tags": [
          "Metatypes"
        ],
        "operationId": "ArchiveType",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "type-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/metatypes/{type-id}/keys": {
      "post": {
        "description": "Creates a new key for a type. Keys consist of a unique key name (unique to the type not as a whole), key type, default values, and allowed values. Of those, only the first two are required.\n\nThe `dataType` field accepts only one of the following values: number, string, date, boolean, enumeration. \n\nThe fields `defaultValue` and `options` will only accept an array of the following types: string, boolean, number, float.\n\nPass in an array for bulk creation.\n\nCurrently the validation and cardinality functionality of keys are NOT checked at data insertion.",
        "summary": "New Type Key",
        "tags": [
          "Metatype Keys"
        ],
        "operationId": "NewTypeKey",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "type-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/NewTypeKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "get": {
        "description": "Lists all currently valid and available keys for the type. The response includes the key name, its types, allowed values, and default value if present. MUST include the limit/offset query parameters as of 3/26/2020",
        "summary": "List Type's Keys",
        "tags": [
          "Metatype Keys"
        ],
        "operationId": "ListType'sKeys",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "type-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/metatypes/{type-id}/keys/{key-id}": {
      "get": {
        "description": "Lists all currently valid and available keys for the type. The response includes the key name, its types, allowed values, and default value if present.",
        "summary": "Get Type Key",
        "tags": [
          "Metatype Keys"
        ],
        "operationId": "GetTypeKey",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "type-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "key-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "put": {
        "description": "Updates a single key for a type.",
        "summary": "Update Type Key",
        "tags": [
          "Metatype Keys"
        ],
        "operationId": "UpdateTypeKey",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "type-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "key-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/UpdateTypeKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "delete": {
        "description": "Archiving the type key prevents any new types from implementing the key. It *does not remove key/value pairs on existing types*. We highly recommend you archive type keys instead of deleting them so that previous data is not affected.",
        "summary": "Archive Type Key",
        "tags": [
          "Metatype Keys"
        ],
        "operationId": "ArchiveTypeKey",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "type-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "key-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/metatype_relationships": {
      "post": {
        "description": "Create a new Type Relationship. Describes the connection that could exist between two types and acts as a vehicle for relationship specific keys.\n\nPass in an array for bulk creation.",
        "summary": "New Type Relationship",
        "tags": [
          "Metatype Relationships"
        ],
        "operationId": "NewTypeRelationship",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/NewTypeRelationshipRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "get": {
        "description": "Create a new Type relationship pair. Describes the connection between two types and acts as a vehicle for relationship specific keys.",
        "summary": "List Container Type Relationships",
        "tags": [
          "Metatype Relationships"
        ],
        "operationId": "ListContainerTypeRelationships",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/metatype_relationships/{relationship-id}": {
      "get": {
        "description": "Retrieve a single Type Relationship.",
        "summary": "Get Type Relationship",
        "tags": [
          "Metatype Relationships"
        ],
        "operationId": "GetTypeRelationship",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "relationship-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "put": {
        "summary": "Update Type Relationship",
        "tags": [
          "Metatype Relationships"
        ],
        "operationId": "UpdateTypeRelationship",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "relationship-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/UpdateTypeRelationshipRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "delete": {
        "description": "Archive the type relationship key. This does not affect any instances of the parent relationship type.",
        "summary": "Archive Type Relationship",
        "tags": [
          "Metatype Relationships"
        ],
        "operationId": "ArchiveTypeRelationship",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "relationship-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/metatype_relationships/{relationship-id}/keys": {
      "post": {
        "description": "Creates a new key for a type relationship. Keys consist of a unique key name (unique to the type not as a whole), key type, default values, and allowed values. Of those, only the first two are required.\n\nThe `dataType` field accepts only one of the following values: number, string, date, boolean, enumeration. \n\nThe fields `defaultValue` and `options` will only accept an array of the following types: string, boolean, number, float.",
        "summary": "New Type Relationship Key",
        "tags": [
          "Metatype Relationship Keys"
        ],
        "operationId": "NewTypeRelationshipKey",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "relationship-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/NewTypeRelationshipKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/metatype_relationships/{relationship-id}/keys/{key-id}": {
      "get": {
        "description": "Retrieve a single key for a Type Relationship by id.",
        "summary": "Get Type Relationship Key",
        "tags": [
          "Metatype Relationship Keys"
        ],
        "operationId": "GetTypeRelationshipKey",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "relationship-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "key-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "put": {
        "description": "Updates a Type Relationship key. The update must follow the same format as creation.",
        "summary": "Update Type Relationship Key",
        "tags": [
          "Metatype Relationship Keys"
        ],
        "operationId": "UpdateTypeRelationshipKey",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "relationship-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "key-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/UpdateTypeRelationshipKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "delete": {
        "description": "Archives a Type Relationship Key. This is preferred over deletion as deletion has a cascading effect on the deleted type's keys, relationships, and relationship keys. When in doubt, archive over delete. We'd rather have tombstones than cremating the type.",
        "summary": "Archive Type Relationship Key",
        "tags": [
          "Metatype Relationship Keys"
        ],
        "operationId": "ArchiveTypeRelationshipKey",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "relationship-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "key-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{id}/metatypes_relationships/{relationship-id}/keys": {
      "get": {
        "description": "Retrieves all keys for a Type Relationship.",
        "summary": "List Type Relationship Keys",
        "tags": [
          "Metatype Relationship Keys"
        ],
        "operationId": "ListTypeRelationshipKeys",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "relationship-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/metatype_relationship_pairs": {
      "post": {
        "description": "Create a new Type Relationship Pair. Describes the connection between two Types by connecting them using a Type Relationship and acts as a vehicle for relationship specific keys.\n\nPass in an array for bulk creation.",
        "summary": "New Type Relationship Pair",
        "tags": [
          "Metatype Relationship Pairs"
        ],
        "operationId": "NewTypeRelationshipPair",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/NewTypeRelationshipPairRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "get": {
        "description": "List all Type Relationship Pairs for current container.",
        "summary": "List Type Relationship Pairs",
        "tags": [
          "Metatype Relationship Pairs"
        ],
        "operationId": "ListTypeRelationshipPairs",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/metatype_relationship_pairs/{pair-id}": {
      "get": {
        "description": "Retrieves a single Type Relationship Pair.",
        "summary": "Get Type Relationship Pair",
        "tags": [
          "Metatype Relationship Pairs"
        ],
        "operationId": "GetTypeRelationshipPair",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "pair-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "delete": {
        "description": "Archives a Type Relationship Pair. This is preferred over deletion as deletion has a cascading effect on the deleted type's keys, relationships, and relationship keys. When in doubt, archive over delete. We'd rather have tombstones than cremating the type.",
        "summary": "Archive Type Pair",
        "tags": [
          "Metatype Relationship Pairs"
        ],
        "operationId": "ArchiveTypePair",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "pair-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/import/datasources": {
      "post": {
        "description": "Create new datasource. Currently the only supported data source \ntype is `http` ",
        "summary": "Create Data Source",
        "tags": [
          "Data Sources"
        ],
        "operationId": "CreateDataSource",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "example": "{\n\t\"name\": \"testing data source\"\n\t\"adapter_type\":\"http OR manual\",\n\t\"active\": true,\n\t\"config\": { // needed only if you are using the HTTP data source\n\t\t\"endpoint\":\"\",\n        \"auth_method\":\"basic\",\n        \"username\": \"test\",\n       \"password\": \"test\"\n\t}\n}",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "get": {
        "summary": "List Data Sources",
        "tags": [
          "Data Sources"
        ],
        "operationId": "ListDataSources",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/import/datasources/{dataSourceID}/imports": {
      "post": {
        "description": "Create a manual import.",
        "summary": "Create Manual Import",
        "tags": [
          "Data Sources"
        ],
        "operationId": "CreateManualImport",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "dataSourceID",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "example": [
                {
                  "test": "test"
                }
              ],
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateManualImportRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/import/datasources/{dataSourceID}/files": {
      "post": {
        "description": "Uploads a file and metadata to Deep Lynx. This endpoint will accept multiple files and multiple properties as form values.",
        "summary": "Upload File",
        "tags": [
          "Data Sources"
        ],
        "operationId": "UploadFile",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "dataSourceID",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/files/{file-id}/download": {
      "get": {
        "description": "Downloads a previously uploaded file.",
        "summary": "Download File",
        "tags": [
          "Data Sources"
        ],
        "operationId": "DownloadFile",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "file-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/files/{file-id}": {
      "get": {
        "description": "Get information about a file by ID.",
        "summary": "Get File",
        "tags": [
          "Data Sources"
        ],
        "operationId": "GetFile",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "file-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/import/datasources/{data-source-id}/imports": {
      "get": {
        "summary": "List Imports for Data Source",
        "tags": [
          "Data Sources"
        ],
        "operationId": "ListImportsforDataSource",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "data-source-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/import/datasources/{id}": {
      "get": {
        "description": "Retrieve a single data source by ID.",
        "summary": "Get Data Source",
        "tags": [
          "Data Sources"
        ],
        "operationId": "GetDataSource",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "put": {
        "description": "Updates a data source's configuration in storage. Note that this request body's structure must match that of the data source's adapter type.",
        "summary": "Set Configuration",
        "tags": [
          "Data Sources"
        ],
        "operationId": "SetConfiguration",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/SetConfigurationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "delete": {
        "description": "Permanently remove a data source. Future development includes an option to delete all data inserted by this functionality as well.",
        "summary": "Delete Data Source",
        "tags": [
          "Data Sources"
        ],
        "operationId": "DeleteDataSource",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/import/datasources/{id}/active": {
      "post": {
        "description": "Permanently remove a data source. Future development includes an option to delete all data inserted by this functionality as well.",
        "summary": "Set Active",
        "tags": [
          "Data Sources"
        ],
        "operationId": "SetActive",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "delete": {
        "description": "Permanently remove a data source. Future development includes an option to delete all data inserted by this functionality as well.",
        "summary": "Set Inactive",
        "tags": [
          "Data Sources"
        ],
        "operationId": "SetInactive",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/data/export": {
      "post": {
        "description": "Create a new data export with the included configuration. Configuration values may be encrypted depending on the adapter you've choosen. See the readme for the exporters for more information.",
        "summary": "New Data Export",
        "tags": [
          "Data Export"
        ],
        "operationId": "NewDataExport",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/NewDataExportRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/data/export/{export-id}": {
      "get": {
        "description": "Fetch a data export record by ID",
        "summary": "Get Data Export",
        "tags": [
          "Data Export"
        ],
        "operationId": "GetDataExport",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "export-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "post": {
        "description": "Start or restart a data export by id.",
        "summary": "Start Data Export",
        "tags": [
          "Data Export"
        ],
        "operationId": "StartDataExport",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "export-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "put": {
        "description": "Stops a data export. Please note that this just sends a \"stop\" signal. The application's export adapter determines how to handle the said signal. In some cases the export stopping might not be immediate.",
        "summary": "Stop Data Export",
        "tags": [
          "Data Export"
        ],
        "operationId": "StopDataExport",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "export-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "example": "{\n\t\"adapter\": \"gremlin\",\n\t\"config\": {\n        \"traversal_source\": \"g\",\n        \"mime_type\": \"application/vnd.gremlin-v2.0+json\",\n        \"graphson_v1\": false,\n        \"user\": \"process.env.GREMLIN_PLUGIN_USER || \"\",\n        \"key\": \"process.env.GREMLIN_PLUGIN_KEY || \"\",\n        \"endpoint\": \"process.env.GREMLIN_PLUGIN_ENDPOINT || localhost\",\n        \"port\": \"process.env.GREMLIN_PLUGIN_PORT || 8182\",\n        \"path\": \"process.env.GREMLIN_PLUGIN_ROOT_PATH || gremlin\"\n    }\n}",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "delete": {
        "description": "Deletes a data export record. This does not guarantee the export will stop immediately.",
        "summary": "Delete Data Export",
        "tags": [
          "Data Export"
        ],
        "operationId": "DeleteDataExport",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "export-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/users": {
      "post": {
        "description": "Create a new user using the username_password identity type.",
        "summary": "New User (Username/Password)",
        "tags": [
          "Users"
        ],
        "operationId": "NewUser(Username/Password)",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/NewUser%28Username~1Password%29Request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/users/{user_id}/keys": {
      "get": {
        "description": "Retrieves only the active keys for supplied user. Secerts are hashed and are never revealed past initial creation.",
        "summary": "Keys For User",
        "tags": [
          "Users"
        ],
        "operationId": "KeysForUser",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      },
      "post": {
        "description": "Create a new user using the username_password identity type.",
        "summary": "Generate KeyPair For User",
        "tags": [
          "Users"
        ],
        "operationId": "GenerateKeyPairForUser",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/users/{user_id}/keys/{key_id}": {
      "delete": {
        "description": "Create a new user using the username_password identity type.",
        "summary": "Delete KeyPair For User",
        "tags": [
          "Users"
        ],
        "operationId": "DeleteKeyPairForUser",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "key_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        },
        "security": []
      }
    },
    "/containers/{container_id}/users/{user-id}": {
      "get": {
        "description": "List Users",
        "summary": "Get User",
        "tags": [
          "Users"
        ],
        "operationId": "GetUser",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "user-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container_id}/users": {
      "get": {
        "description": "List Users",
        "summary": "List Users",
        "tags": [
          "Users"
        ],
        "operationId": "ListUsers",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "container_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container_id}/users/{user_id}/roles": {
      "get": {
        "description": "List Users",
        "summary": "List User's Roles",
        "tags": [
          "Users"
        ],
        "operationId": "ListUser'sRoles",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container_id}/users/roles": {
      "post": {
        "description": "Assign a role to a user, roles must consist of role name and domain",
        "summary": "Assign Role",
        "tags": [
          "Users"
        ],
        "operationId": "AssignRole",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container_id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/AssignRoleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/import/datasources/{source-id}/mappings": {
      "post": {
        "description": "Creates a new type mapping in storage",
        "summary": "Create Data Type Mapping",
        "tags": [
          "Data Type Mappings"
        ],
        "operationId": "CreateDataTypeMapping",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "source-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/CreateDataTypeMappingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/import/datasources/{source-id}/mappings/{mappingID}": {
      "put": {
        "description": "Updates a type mapping in storage.",
        "summary": "Update Data Type Mapping",
        "tags": [
          "Data Type Mappings"
        ],
        "operationId": "UpdateDataTypeMapping",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "source-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "mappingID",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/UpdateDataTypeMappingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "get": {
        "description": "Retrieve a type mapping from storage.",
        "summary": "Get Data Type Mapping",
        "tags": [
          "Data Type Mappings"
        ],
        "operationId": "GetDataTypeMapping",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "source-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "mappingID",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      },
      "delete": {
        "description": "Permanently removes type mapping from storage.",
        "summary": "Delete Data Type Mapping",
        "tags": [
          "Data Type Mappings"
        ],
        "operationId": "DeleteDataTypeMapping",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "source-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "mappingID",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/DeleteDataTypeMappingRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/import/datasources/{id}/mappings/unmapped": {
      "get": {
        "description": "Retrieve a single unmapped payload for a data source. Use this endpoint as a foundation to build a type mapping off of. This return value will allow you to create a type mapping, and should be saved as the \"example_payload\" for any type mapping created as a result of this return.",
        "summary": "Get Unmapped Data",
        "tags": [
          "Data Type Mappings"
        ],
        "operationId": "GetUnmappedData",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/containers/{container-id}/import/datasources/{id}/mappings/unmapped/count": {
      "get": {
        "description": "Retrieve a single unmapped payload for a data source. Use this endpoint as a foundation to build a type mapping off of. This return value will allow you to create a type mapping, and should be saved as the \"example_payload\" for any type mapping created as a result of this return.",
        "summary": "Count Unmapped Data",
        "tags": [
          "Data Type Mappings"
        ],
        "operationId": "GetCountUnmappedData",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "container-id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/health": {
      "get": {
        "description": "Simple endpoint, returns 200 on call. Can be used for a simple Up monitor by an external service.",
        "summary": "Health",
        "tags": [
          "Misc"
        ],
        "operationId": "Health",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/login": {
      "post": {
        "description": "This endpoint will accept a form submission with three paramters - username, password and redirect. This endpoint will log a user in and then redirect them to the redirect url passed in as part of the form. This allows a SPA like site to log users in effectively.",
        "summary": "Login (Local)",
        "tags": [
          "Misc"
        ],
        "operationId": "Login(Local)",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "password",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "redirect",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    },
    "/login-token": {
      "get": {
        "description": "Calling this endpoint with the x-api-key and x-api-secret headers will return a JWT for the user to whom the key/secert pair belongs. This exists so that a user can programmatically use Deep Lynx by making their own calls against the service instead of using the provided UI.",
        "summary": "Login (API Key/Secret)",
        "tags": [
          "Misc"
        ],
        "operationId": "Login(APIKey/Secret)",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-api-key",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "x-api-secret",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "headers": {}
          }
        }
      }
    }
  },
  "definitions": {
    "CreateRequest": {
      "title": "CreateRequest",
      "example": {
        "name": "Test Container",
        "description": "Test Container Description"
      },
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "description"
      ]
    },
    "UpdateRequest": {
      "title": "UpdateRequest",
      "example": {
        "description": "Final Test Description"
      },
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        }
      },
      "required": [
        "description"
      ]
    },
    "BatchUpdateRequest": {
      "title": "BatchUpdateRequest",
      "example": {
        "name": "Test Container",
        "description": "Test Container New Description",
        "id": ""
      },
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "description",
        "id"
      ]
    },
    "CreateOrUpdateNodesRequest": {
      "title": "CreateOrUpdateNodesRequest",
      "example": {
        "container_id": "required",
        "original_data_id": "optional - but required if planning on being able to update the node from this endpoint",
        "data_source_id": "required",
        "data_type_mapping_id": "optional",
        "metatype_id": "required",
        "modified_at": "optional - set to update node along with the original data id to update if it exists",
        "properties": {}
      },
      "type": "object",
      "properties": {
        "container_id": {
          "type": "string"
        },
        "original_data_id": {
          "type": "string"
        },
        "data_source_id": {
          "type": "string"
        },
        "data_type_mapping_id": {
          "type": "string"
        },
        "metatype_id": {
          "type": "string"
        },
        "modified_at": {
          "type": "string"
        },
        "properties": {
          "type": "object"
        }
      },
      "required": [
        "container_id",
        "original_data_id",
        "data_source_id",
        "data_type_mapping_id",
        "metatype_id",
        "modified_at",
        "properties"
      ]
    },
    "ArchiveNodeRequest": {
      "title": "ArchiveNodeRequest",
      "example": {
        "container_id": "required",
        "original_data_id": "optional",
        "data_source_id": "required",
        "data_type_mapping_id": "optional",
        "metatype_id": "required",
        "modified_at": "optional - set to update node if it exists",
        "properties": {}
      },
      "type": "object",
      "properties": {
        "container_id": {
          "type": "string"
        },
        "original_data_id": {
          "type": "string"
        },
        "data_source_id": {
          "type": "string"
        },
        "data_type_mapping_id": {
          "type": "string"
        },
        "metatype_id": {
          "type": "string"
        },
        "modified_at": {
          "type": "string"
        },
        "properties": {
          "type": "object"
        }
      },
      "required": [
        "container_id",
        "original_data_id",
        "data_source_id",
        "data_type_mapping_id",
        "metatype_id",
        "modified_at",
        "properties"
      ]
    },
    "CreateOrUpdateEdgesRequest": {
      "title": "CreateOrUpdateEdgesRequest",
      "example": {
        "container_id": "required",
        "original_data_id": "required",
        "data_source_id": "required",
        "origin_node_id": "required (if origin_node_original_id not set)",
        "destination_node_id": "required (if destination_node_original_id not set)",
        "origin_node_original_id": "create edge based on original ID of node, not Deep Lynx ID",
        "destination_node_original_id": "create edge based on original ID of node, not Deep Lynx ID",
        "relationship_pair_id": "required",
        "modified_at": "will attempt to update edge if exists",
        "properties": {}
      },
      "type": "object",
      "properties": {
        "container_id": {
          "type": "string"
        },
        "original_data_id": {
          "type": "string"
        },
        "data_source_id": {
          "type": "string"
        },
        "origin_node_id": {
          "type": "string"
        },
        "destination_node_id": {
          "type": "string"
        },
        "origin_node_original_id": {
          "type": "string"
        },
        "destination_node_original_id": {
          "type": "string"
        },
        "relationship_pair_id": {
          "type": "string"
        },
        "modified_at": {
          "type": "string"
        },
        "properties": {
          "type": "object"
        }
      },
      "required": [
        "container_id",
        "original_data_id",
        "data_source_id",
        "origin_node_id",
        "destination_node_id",
        "origin_node_original_id",
        "destination_node_original_id",
        "relationship_pair_id",
        "modified_at",
        "properties"
      ]
    },
    "ArchiveEdgeRequest": {
      "title": "ArchiveEdgeRequest",
      "example": {
        "container_id": "required",
        "original_data_id": "optional",
        "data_source_id": "required",
        "data_type_mapping_id": "optional",
        "metatype_id": "required",
        "modified_at": "optional - set to update node if it exists",
        "properties": {}
      },
      "type": "object",
      "properties": {
        "container_id": {
          "type": "string"
        },
        "original_data_id": {
          "type": "string"
        },
        "data_source_id": {
          "type": "string"
        },
        "data_type_mapping_id": {
          "type": "string"
        },
        "metatype_id": {
          "type": "string"
        },
        "modified_at": {
          "type": "string"
        },
        "properties": {
          "type": "object"
        }
      },
      "required": [
        "container_id",
        "original_data_id",
        "data_source_id",
        "data_type_mapping_id",
        "metatype_id",
        "modified_at",
        "properties"
      ]
    },
    "NewTypeRequest": {
      "title": "NewTypeRequest",
      "example": {
        "name": "Equipment",
        "description": "Physical piece of equipement"
      },
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "description"
      ]
    },
    "UpdateTypeRequest": {
      "title": "UpdateTypeRequest",
      "example": {
        "name": "Updated Metatype Name",
        "description": "Final Description"
      },
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "description"
      ]
    },
    "NewTypeKeyRequest": {
      "title": "NewTypeKeyRequest",
      "example": {
        "name": "File Name",
        "required": true,
        "property_name": "fileName",
        "description": "File Upload Name",
        "data_type": "string",
        "cardinality": 1,
        "validation": {
          "regex": "",
          "min": 0,
          "max": 0
        },
        "unique": true,
        "options": [
          ""
        ],
        "defaultValue": "can be any type"
      },
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "property_name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "data_type": {
          "type": "string"
        },
        "cardinality": {
          "type": "integer",
          "format": "int32"
        },
        "validation": {
          "$ref": "#/definitions/Validation"
        },
        "unique": {
          "type": "boolean"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultValue": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "required",
        "property_name",
        "description",
        "data_type",
        "cardinality",
        "validation",
        "unique",
        "options",
        "defaultValue"
      ]
    },
    "Validation": {
      "title": "Validation",
      "example": {
        "regex": "",
        "min": 0,
        "max": 0
      },
      "type": "object",
      "properties": {
        "regex": {
          "type": "string"
        },
        "min": {
          "type": "integer",
          "format": "int32"
        },
        "max": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "regex",
        "min",
        "max"
      ]
    },
    "UpdateTypeKeyRequest": {
      "title": "UpdateTypeKeyRequest",
      "example": {
        "name": "Updated String",
        "property_name": "string",
        "description": "sting",
        "data_type": "string",
        "default_value": "optional - data structure here is dependent on dataType value"
      },
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "property_name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "data_type": {
          "type": "string"
        },
        "default_value": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "property_name",
        "description",
        "data_type",
        "default_value"
      ]
    },
    "NewTypeRelationshipRequest": {
      "title": "NewTypeRelationshipRequest",
      "example": {
        "name": "Relationhip Test",
        "description": "string"
      },
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "description"
      ]
    },
    "UpdateTypeRelationshipRequest": {
      "title": "UpdateTypeRelationshipRequest",
      "example": {
        "name": "Update Test",
        "description": "Final Test Description"
      },
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "description"
      ]
    },
    "NewTypeRelationshipKeyRequest": {
      "title": "NewTypeRelationshipKeyRequest",
      "example": {
        "name": "File Name",
        "required": true,
        "property_name": "fileName",
        "description": "File Upload Name",
        "data_type": "string",
        "cardinality": 1,
        "validation": {
          "regex": "",
          "min": 0,
          "max": 0
        },
        "unique": true,
        "options": [
          ""
        ],
        "defaultValue": "can be any type"
      },
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "required": {
          "type": "boolean"
        },
        "property_name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "data_type": {
          "type": "string"
        },
        "cardinality": {
          "type": "integer",
          "format": "int32"
        },
        "validation": {
          "$ref": "#/definitions/Validation"
        },
        "unique": {
          "type": "boolean"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultValue": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "required",
        "property_name",
        "description",
        "data_type",
        "cardinality",
        "validation",
        "unique",
        "options",
        "defaultValue"
      ]
    },
    "UpdateTypeRelationshipKeyRequest": {
      "title": "UpdateTypeRelationshipKeyRequest",
      "example": {
        "name": "Updated Name",
        "description": "Updated Name Description",
        "data_type": "string",
        "default_value": "optional - data structure here is dependent on dataType value"
      },
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "data_type": {
          "type": "string"
        },
        "default_value": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "description",
        "data_type",
        "default_value"
      ]
    },
    "NewTypeRelationshipPairRequest": {
      "title": "NewTypeRelationshipPairRequest",
      "example": {
        "name": "Relationship Pair Test",
        "description": "Relationship Pair Test description",
        "origin_metatype_id": "566e3862-6853-45af-8a45-3050576dfb9a",
        "destination_metatype_id": "8bcc0b06-bb44-4176-a581-aa68eafca7f3",
        "metatype_relationship_id": "885e3fca-5066-4be8-a720-63b3c4744e97",
        "relationship_type": "many:many"
      },
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "origin_metatype_id": {
          "type": "string"
        },
        "destination_metatype_id": {
          "type": "string"
        },
        "metatype_relationship_id": {
          "type": "string"
        },
        "relationship_type": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "description",
        "origin_metatype_id",
        "destination_metatype_id",
        "metatype_relationship_id",
        "relationship_type"
      ]
    },
    "CreateManualImportRequest": {
      "title": "CreateManualImportRequest",
      "example": {
        "test": "test"
      },
      "type": "object",
      "properties": {
        "test": {
          "type": "string"
        }
      },
      "required": [
        "test"
      ]
    },
    "SetConfigurationRequest": {
      "title": "SetConfigurationRequest",
      "example": {
        "endpoint": "",
        "auth_method": "basic",
        "username": "test",
        "password": "test"
      },
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "auth_method": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "endpoint",
        "auth_method",
        "username",
        "password"
      ]
    },
    "NewDataExportRequest": {
      "title": "NewDataExportRequest",
      "example": {
        "adapter": "gremlin",
        "config": {
          "traversal_source": "g",
          "graphson_v1": false,
          "user": "",
          "key": "",
          "endpoint": "localhost",
          "port": "8182",
          "path": "/gremlin",
          "writes_per_second": 300
        }
      },
      "type": "object",
      "properties": {
        "adapter": {
          "type": "string"
        },
        "config": {
          "$ref": "#/definitions/Config"
        }
      },
      "required": [
        "adapter",
        "config"
      ]
    },
    "Config": {
      "title": "Config",
      "example": {
        "traversal_source": "g",
        "graphson_v1": false,
        "user": "",
        "key": "",
        "endpoint": "localhost",
        "port": "8182",
        "path": "/gremlin",
        "writes_per_second": 300
      },
      "type": "object",
      "properties": {
        "traversal_source": {
          "type": "string"
        },
        "graphson_v1": {
          "type": "boolean"
        },
        "user": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "port": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "writes_per_second": {
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "traversal_source",
        "graphson_v1",
        "user",
        "key",
        "endpoint",
        "port",
        "path",
        "writes_per_second"
      ]
    },
    "NewUser(Username/Password)Request": {
      "title": "NewUser(Username/Password)Request",
      "example": {
        "identity_provider": "username_password",
        "display_name": "Test User",
        "email": "test@test.com",
        "password": "admin"
      },
      "type": "object",
      "properties": {
        "identity_provider": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "required": [
        "identity_provider",
        "display_name",
        "email",
        "password"
      ]
    },
    "AssignRoleRequest": {
      "title": "AssignRoleRequest",
      "example": {
        "user_id": "fb127f5f-0318-4866-9570-10ec81a85cc2",
        "container_id": "2a49dc7b-cf56-4e03-85e7-14ac8f0e4b40",
        "role_name": "admin"
      },
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "container_id": {
          "type": "string"
        },
        "role_name": {
          "type": "string"
        }
      },
      "required": [
        "user_id",
        "container_id",
        "role_name"
      ]
    },
    "CreateDataTypeMappingRequest": {
      "title": "CreateDataTypeMappingRequest",
      "example": {
        "type_key": "type",
        "type_value": "EQUIPMENT",
        "unique_identifier_key": "id",
        "metatype_id": "",
        "keys": [
          {
            "key": "RADIUS",
            "metatype_key_id": ""
          }
        ],
        "example_payload": {
          "RADIUS": 0.1
        }
      },
      "type": "object",
      "properties": {
        "type_key": {
          "type": "string"
        },
        "type_value": {
          "type": "string"
        },
        "unique_identifier_key": {
          "type": "string"
        },
        "metatype_id": {
          "type": "string"
        },
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Key"
          }
        },
        "example_payload": {
          "$ref": "#/definitions/ExamplePayload"
        }
      },
      "required": [
        "type_key",
        "type_value",
        "unique_identifier_key",
        "metatype_id",
        "keys",
        "example_payload"
      ]
    },
    "Key": {
      "title": "Key",
      "example": {
        "key": "RADIUS",
        "metatype_key_id": ""
      },
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "metatype_key_id": {
          "type": "string"
        }
      },
      "required": [
        "key",
        "metatype_key_id"
      ]
    },
    "ExamplePayload": {
      "title": "ExamplePayload",
      "example": {
        "RADIUS": 0.1
      },
      "type": "object",
      "properties": {
        "RADIUS": {
          "type": "number",
          "format": "double"
        }
      },
      "required": [
        "RADIUS"
      ]
    },
    "UpdateDataTypeMappingRequest": {
      "title": "UpdateDataTypeMappingRequest",
      "example": {
        "type_key": "type",
        "type_value": "EQUIPMENT",
        "unique_identifier_key": "id",
        "metatype_id": "",
        "keys": [
          {
            "key": "RADIUS",
            "metatype_key_id": ""
          }
        ],
        "example_payload": {
          "RADIUS": 0.1
        }
      },
      "type": "object",
      "properties": {
        "type_key": {
          "type": "string"
        },
        "type_value": {
          "type": "string"
        },
        "unique_identifier_key": {
          "type": "string"
        },
        "metatype_id": {
          "type": "string"
        },
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Key"
          }
        },
        "example_payload": {
          "$ref": "#/definitions/ExamplePayload"
        }
      },
      "required": [
        "type_key",
        "type_value",
        "unique_identifier_key",
        "metatype_id",
        "keys",
        "example_payload"
      ]
    },
    "DeleteDataTypeMappingRequest": {
      "title": "DeleteDataTypeMappingRequest",
      "example": {
        "type_key": "type",
        "type_value": "EQUIPMENT",
        "unique_identifier_key": "id",
        "metatype_id": "",
        "keys": [
          {
            "key": "RADIUS",
            "metatype_key_id": ""
          }
        ],
        "example_payload": {
          "RADIUS": 0.1
        }
      },
      "type": "object",
      "properties": {
        "type_key": {
          "type": "string"
        },
        "type_value": {
          "type": "string"
        },
        "unique_identifier_key": {
          "type": "string"
        },
        "metatype_id": {
          "type": "string"
        },
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Key"
          }
        },
        "example_payload": {
          "$ref": "#/definitions/ExamplePayload"
        }
      },
      "required": [
        "type_key",
        "type_value",
        "unique_identifier_key",
        "metatype_id",
        "keys",
        "example_payload"
      ]
    }
  },
  "tags": [
    {
      "name": "Containers",
      "description": "Containers are considered a root object with only users and organizations as potential parents. Containers separate object defintions (as declared in Metatypes) from each other and allow for versioning and access control. All data is separated by containers."
    },
    {
      "name": "Data Query",
      "description": "Deep Lynx gives you the ability to query data using a GraphQL enabled endpoint. Please see the documentation on GraphQL and run a schema query to learn more about what search methods, query arguments, and fields are available to you."
    },
    {
      "name": "Graph",
      "description": "These endpoints give you the ability to add nodes and edges to the graph manually as well as perform some basic queries. For all advanced queries, please use the GraphQL query endpoint."
    },
    {
      "name": "Metatypes",
      "description": "Metatypes only consist of a name and a description. While this might change, the bulk of information about a type should reside in its keys and relationships. Metatypes can be considered as \"classes\" when referring to web ontology."
    },
    {
      "name": "Metatype Keys",
      "description": "Keys represent a Metatype's properties, and in the future, its methods. This information allows for a user to modify and compile a complex object type/class and store it in a readable format. Inserted data is then validated against a Metatype's declared keys/properties."
    },
    {
      "name": "Metatype Relationships"
    },
    {
      "name": "Metatype Relationship Keys",
      "description": "Keys represent a Metatype Relationship's properties, and in the future, its methods. This information allows for a user to modify and compile a complex object type/class relationship and store it in a readable format. Relationships declared between already inserted data will be verified against its declared Metatype Relationship."
    },
    {
      "name": "Metatype Relationship Pairs",
      "description": "Metatype Relationship pairs represent the actual connection between two Metatypes. Properties of that relationship are attached to the Metatype Relationship. Again, this only represents the connection between two Metatypes."
    },
    {
      "name": "Data Sources",
      "description": "This set of endpoints allows the user to create and manage data sources. As of 3/26/2020 only the HTTP data source type is supported, and that's still under construction. Each endpoint functions - but there is no guaranteed functionality with regards to data sources beyond this point."
    },
    {
      "name": "Data Export",
      "description": "These endpoints have to do with the export functionality. A snapshot of the contained data can be exported to numerous different data sources. However, only Gremlin enabled Graph databases are supported for export."
    },
    {
      "name": "Users",
      "description": "These endpoints have to do with user functionality. As of 3/26/2020 there are no methods for creating new users - other than enabling and use SAML-ADFS authentication methods. Unless using this method, either request/build a feature or use Basic Authentication configuration."
    },
    {
      "name": "Data Type Mappings",
      "description": "These are mappings for taking unknown payloads and mapping them to known data classes and structures prior to storage."
    },
    {
      "name": "Misc",
      "description": ""
    }
  ]
}