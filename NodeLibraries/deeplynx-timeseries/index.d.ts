/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface Configuration {
  dbConnectionString: string
  maxColumns?: number
}
/**
 * Because we can't send the raw Bucket back to Node, and because we want to work with Objects in
 * Node, we built these translation types for the Node return and parameter types
 */
export interface BucketColumn {
  name: string
  shortName: string
  id?: string
  dataType: string
  columnAssignment?: string
  formatString?: string
  numericPrecision?: number
  numericScale?: number
  maxCharacters?: number
}
export interface LegacyTimeseriesColumn {
  column_name: string
  property_name: string
  is_primary_timestamp: boolean
  type: string
  date_conversion_format_string?: string
}
export interface Bucket {
  id: number
  name: string
  dataTableAssignment?: string
  structure: Array<BucketColumn>
  createdBy?: string
  modifiedBy?: string
  createdAt?: string
  modifiedAt?: string
}
export interface ChangeBucketPayload {
  name?: string
  columns: Array<BucketColumn>
}
export type JsBucketRepository = BucketRepository
export class BucketRepository {
  constructor()
  /**
   * # Safety
   *
   * This function should be called before any work done on the object
   */
  init(config: Configuration): Promise<void>
  createBucket(payload: ChangeBucketPayload): Promise<Bucket>
  retrieveBucket(bucketId: number): Promise<Bucket>
  updateBucket(bucketId: number, payload: ChangeBucketPayload): Promise<Bucket>
  deleteBucket(bucketId: number): Promise<void>
  /**
   * # Safety
   *
   * This spawns multithreaded operations so be wary. The beginCsvIngestion function initializes the
   * repository to receive CSV data from a node.js source
   */
  beginCsvIngestion(bucketId: number): Promise<void>
  /**
   * # Safety
   *
   * This spawns multithreaded operations so be wary. The beginCsvIngestion function initializes the
   * repository to receive CSV data from a node.js source
   */
  beginLegacyCsvIngestion(dataSourceId: string, columns: Array<LegacyTimeseriesColumn>): void
  /**
   * # Safety
   *
   * A "begin_x_ingestion" must have been called successfully before you attempt to read.
   * This is how data is passed into our internal pipeline
   */
  readData(bytes: Buffer): void
  /**
   * # Safety
   *
   * This terminates multithreaded operations so be wary. This is called when you've completed the
   * ingestion and can also be used to check for errors during the operation
   */
  completeIngestion(): Promise<void>
}
